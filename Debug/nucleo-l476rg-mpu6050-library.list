
nucleo-l476rg-mpu6050-library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006898  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08006a28  08006a28  00016a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d08  08006d08  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006d08  08006d08  00016d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d10  08006d10  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d10  08006d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200001dc  08006ef4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08006ef4  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da5f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c56  00000000  00000000  0002dc6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba8  00000000  00000000  0002f8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ab0  00000000  00000000  00030470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026448  00000000  00000000  00030f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d14  00000000  00000000  00057368  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea661  00000000  00000000  0006107c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b6dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a4  00000000  00000000  0014b758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a10 	.word	0x08006a10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006a10 	.word	0x08006a10

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f4c:	b0a8      	sub	sp, #160	; 0xa0
 8000f4e:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 fc6c 	bl	800182c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f86c 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 f952 	bl	8001200 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f5c:	f000 f920 	bl	80011a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f60:	f000 f8de 	bl	8001120 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init(&hi2c1);
 8000f64:	482e      	ldr	r0, [pc, #184]	; (8001020 <main+0xd8>)
 8000f66:	f000 f9b7 	bl	80012d8 <MPU6050_Init>
  HAL_Delay (1000);
 8000f6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6e:	f000 fcd9 	bl	8001924 <HAL_Delay>

    /* USER CODE BEGIN 3 */

	/* read the Accelerometer and Gyro values */

	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8000f72:	492c      	ldr	r1, [pc, #176]	; (8001024 <main+0xdc>)
 8000f74:	482a      	ldr	r0, [pc, #168]	; (8001020 <main+0xd8>)
 8000f76:	f000 fa09 	bl	800138c <MPU6050_Read_Accel>
	MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 8000f7a:	492a      	ldr	r1, [pc, #168]	; (8001024 <main+0xdc>)
 8000f7c:	4828      	ldr	r0, [pc, #160]	; (8001020 <main+0xd8>)
 8000f7e:	f000 fa77 	bl	8001470 <MPU6050_Read_Gyro>

	/* print the Acceleration and Gyro values on the LCD 20x4 */

	sprintf(msg, "Ax=%.2fg Ay=%.2fg Az=%.2fg Gx=%.2f Gy=%.2f Gz=%.2f \r\n", MPU6050.Ax, MPU6050.Ay, MPU6050.Az, MPU6050.Gx, MPU6050.Gy, MPU6050.Gz);
 8000f82:	4b28      	ldr	r3, [pc, #160]	; (8001024 <main+0xdc>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fade 	bl	8000548 <__aeabi_f2d>
 8000f8c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000f90:	4b24      	ldr	r3, [pc, #144]	; (8001024 <main+0xdc>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fad7 	bl	8000548 <__aeabi_f2d>
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	460d      	mov	r5, r1
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <main+0xdc>)
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fad0 	bl	8000548 <__aeabi_f2d>
 8000fa8:	4680      	mov	r8, r0
 8000faa:	4689      	mov	r9, r1
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <main+0xdc>)
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fac9 	bl	8000548 <__aeabi_f2d>
 8000fb6:	4682      	mov	sl, r0
 8000fb8:	468b      	mov	fp, r1
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <main+0xdc>)
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fac2 	bl	8000548 <__aeabi_f2d>
 8000fc4:	e9c7 0100 	strd	r0, r1, [r7]
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <main+0xdc>)
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fabb 	bl	8000548 <__aeabi_f2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	f107 0014 	add.w	r0, r7, #20
 8000fda:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000fde:	ed97 7b00 	vldr	d7, [r7]
 8000fe2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000fe6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000fea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000fee:	e9cd 4500 	strd	r4, r5, [sp]
 8000ff2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ff6:	490c      	ldr	r1, [pc, #48]	; (8001028 <main+0xe0>)
 8000ff8:	f004 f928 	bl	800524c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff f8e5 	bl	80001d0 <strlen>
 8001006:	4603      	mov	r3, r0
 8001008:	b29a      	uxth	r2, r3
 800100a:	f107 0114 	add.w	r1, r7, #20
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <main+0xe4>)
 8001014:	f003 f80c 	bl	8004030 <HAL_UART_Transmit>

	HAL_Delay (250);  // wait for a while
 8001018:	20fa      	movs	r0, #250	; 0xfa
 800101a:	f000 fc83 	bl	8001924 <HAL_Delay>
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 800101e:	e7a8      	b.n	8000f72 <main+0x2a>
 8001020:	20000204 	.word	0x20000204
 8001024:	20000250 	.word	0x20000250
 8001028:	08006a28 	.word	0x08006a28
 800102c:	20000278 	.word	0x20000278

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0b8      	sub	sp, #224	; 0xe0
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800103a:	2244      	movs	r2, #68	; 0x44
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fca0 	bl	8004984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	2288      	movs	r2, #136	; 0x88
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f003 fc92 	bl	8004984 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106e:	2310      	movs	r3, #16
 8001070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107a:	2302      	movs	r3, #2
 800107c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001086:	230a      	movs	r3, #10
 8001088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800108c:	2307      	movs	r3, #7
 800108e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001098:	2302      	movs	r3, #2
 800109a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fcdc 	bl	8002a60 <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010ae:	f000 f90f 	bl	80012d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b2:	230f      	movs	r3, #15
 80010b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	2303      	movs	r3, #3
 80010ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010d4:	2104      	movs	r1, #4
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 f8a8 	bl	800322c <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80010e2:	f000 f8f5 	bl	80012d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80010e6:	2342      	movs	r3, #66	; 0x42
 80010e8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 fa9d 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001100:	f000 f8e6 	bl	80012d0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001104:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001108:	f001 fc54 	bl	80029b4 <HAL_PWREx_ControlVoltageScaling>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001112:	f000 f8dd 	bl	80012d0 <Error_Handler>
  }
}
 8001116:	bf00      	nop
 8001118:	37e0      	adds	r7, #224	; 0xe0
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <MX_I2C1_Init+0x74>)
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <MX_I2C1_Init+0x78>)
 8001128:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_I2C1_Init+0x74>)
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <MX_I2C1_Init+0x7c>)
 800112e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_I2C1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_I2C1_Init+0x74>)
 8001138:	2201      	movs	r2, #1
 800113a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_I2C1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_I2C1_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_I2C1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_I2C1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <MX_I2C1_Init+0x74>)
 800115c:	f000 feaa 	bl	8001eb4 <HAL_I2C_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001166:	f000 f8b3 	bl	80012d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116a:	2100      	movs	r1, #0
 800116c:	4809      	ldr	r0, [pc, #36]	; (8001194 <MX_I2C1_Init+0x74>)
 800116e:	f001 fb7b 	bl	8002868 <HAL_I2CEx_ConfigAnalogFilter>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001178:	f000 f8aa 	bl	80012d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800117c:	2100      	movs	r1, #0
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_I2C1_Init+0x74>)
 8001180:	f001 fbbd 	bl	80028fe <HAL_I2CEx_ConfigDigitalFilter>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800118a:	f000 f8a1 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000204 	.word	0x20000204
 8001198:	40005400 	.word	0x40005400
 800119c:	10909cec 	.word	0x10909cec

080011a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <MX_USART2_UART_Init+0x5c>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USART2_UART_Init+0x58>)
 80011e4:	f002 fed6 	bl	8003f94 <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ee:	f000 f86f 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000278 	.word	0x20000278
 80011fc:	40004400 	.word	0x40004400

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a2a      	ldr	r2, [pc, #168]	; (80012c4 <MX_GPIO_Init+0xc4>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <MX_GPIO_Init+0xc4>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <MX_GPIO_Init+0xc4>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <MX_GPIO_Init+0xc4>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_GPIO_Init+0xc4>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2120      	movs	r1, #32
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f000 fe01 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_GPIO_Init+0xc8>)
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_GPIO_Init+0xcc>)
 8001298:	f000 fc4c 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800129c:	2320      	movs	r3, #32
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f000 fc3d 	bl	8001b34 <HAL_GPIO_Init>

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	10210000 	.word	0x10210000
 80012cc:	48000800 	.word	0x48000800

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <Error_Handler+0x6>

080012d8 <MPU6050_Init>:
#define TEMP_OUT_H_REG 0x41
#define GYRO_XOUT_H_REG 0x43
#define PWR_MGMT_1_REG 0x6B
#define WHO_AM_I_REG 0x75

void MPU6050_Init (I2C_HandleTypeDef *I2Cx){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af04      	add	r7, sp, #16
 80012de:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	/* Check device ID WHO_AM_I */
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80012e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 030f 	add.w	r3, r7, #15
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	2275      	movs	r2, #117	; 0x75
 80012f4:	21d0      	movs	r1, #208	; 0xd0
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 ff80 	bl	80021fc <HAL_I2C_Mem_Read>

	if (check == 114)  // 0x68 will be returned by the sensor if everything goes well
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	2b72      	cmp	r3, #114	; 0x72
 8001300:	d13f      	bne.n	8001382 <MPU6050_Init+0xaa>
	{
		/* power management register 0X6B we should write all 0's to wake the sensor up */
		Data = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2301      	movs	r3, #1
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	f107 030e 	add.w	r3, r7, #14
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	226b      	movs	r2, #107	; 0x6b
 800131a:	21d0      	movs	r1, #208	; 0xd0
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fe59 	bl	8001fd4 <HAL_I2C_Mem_Write>

		/* Set DATA RATE of 1KHz by writing SMPLRT_DIV register */
		Data = 0x07;
 8001322:	2307      	movs	r3, #7
 8001324:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	2301      	movs	r3, #1
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	f107 030e 	add.w	r3, r7, #14
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	2219      	movs	r2, #25
 800133a:	21d0      	movs	r1, #208	; 0xd0
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 fe49 	bl	8001fd4 <HAL_I2C_Mem_Write>

		/* Set accelerometer configuration in ACCEL_CONFIG Register
		   XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g */
		Data = 0x00;
 8001342:	2300      	movs	r3, #0
 8001344:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	9302      	str	r3, [sp, #8]
 800134c:	2301      	movs	r3, #1
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	f107 030e 	add.w	r3, r7, #14
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2301      	movs	r3, #1
 8001358:	221c      	movs	r2, #28
 800135a:	21d0      	movs	r1, #208	; 0xd0
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fe39 	bl	8001fd4 <HAL_I2C_Mem_Write>

	  	/* Set Gyroscopic configuration in GYRO_CONFIG Register
		   XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s */
		Data = 0x00;
 8001362:	2300      	movs	r3, #0
 8001364:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9302      	str	r3, [sp, #8]
 800136c:	2301      	movs	r3, #1
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	f107 030e 	add.w	r3, r7, #14
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2301      	movs	r3, #1
 8001378:	221b      	movs	r2, #27
 800137a:	21d0      	movs	r1, #208	; 0xd0
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fe29 	bl	8001fd4 <HAL_I2C_Mem_Write>
	}
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <MPU6050_Read_Accel>:

void MPU6050_Read_Accel (I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af04      	add	r7, sp, #16
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[6];

	/* Read 6 BYTES of data starting from ACCEL_XOUT_H register */

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	2306      	movs	r3, #6
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	223b      	movs	r2, #59	; 0x3b
 80013aa:	21d0      	movs	r1, #208	; 0xd0
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 ff25 	bl	80021fc <HAL_I2C_Mem_Read>

	DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80013b2:	7a3b      	ldrb	r3, [r7, #8]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	7a7b      	ldrb	r3, [r7, #9]
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b21a      	sxth	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80013c4:	7abb      	ldrb	r3, [r7, #10]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	7afb      	ldrb	r3, [r7, #11]
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80013d6:	7b3b      	ldrb	r3, [r7, #12]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21a      	sxth	r2, r3
 80013dc:	7b7b      	ldrb	r3, [r7, #13]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	809a      	strh	r2, [r3, #4]
	/* convert the RAW values into acceleration in 'g'
       we have to divide according to the Full scale value set in FS_SEL
       I have configured FS_SEL = 0. So I am dividing by 16384.0
       for more details check ACCEL_CONFIG Register */

	DataStruct->Ax = DataStruct->Accel_X_RAW/16384.0;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f898 	bl	8000524 <__aeabi_i2d>
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MPU6050_Read_Accel+0xdc>)
 80013fa:	f7ff fa27 	bl	800084c <__aeabi_ddiv>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4618      	mov	r0, r3
 8001404:	4621      	mov	r1, r4
 8001406:	f7ff fbcf 	bl	8000ba8 <__aeabi_d2f>
 800140a:	4602      	mov	r2, r0
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	609a      	str	r2, [r3, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW/16384.0;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f884 	bl	8000524 <__aeabi_i2d>
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MPU6050_Read_Accel+0xdc>)
 8001422:	f7ff fa13 	bl	800084c <__aeabi_ddiv>
 8001426:	4603      	mov	r3, r0
 8001428:	460c      	mov	r4, r1
 800142a:	4618      	mov	r0, r3
 800142c:	4621      	mov	r1, r4
 800142e:	f7ff fbbb 	bl	8000ba8 <__aeabi_d2f>
 8001432:	4602      	mov	r2, r0
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	60da      	str	r2, [r3, #12]
	DataStruct->Az = DataStruct->Accel_Z_RAW/16384.0;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f870 	bl	8000524 <__aeabi_i2d>
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MPU6050_Read_Accel+0xdc>)
 800144a:	f7ff f9ff 	bl	800084c <__aeabi_ddiv>
 800144e:	4603      	mov	r3, r0
 8001450:	460c      	mov	r4, r1
 8001452:	4618      	mov	r0, r3
 8001454:	4621      	mov	r1, r4
 8001456:	f7ff fba7 	bl	8000ba8 <__aeabi_d2f>
 800145a:	4602      	mov	r2, r0
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	611a      	str	r2, [r3, #16]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	40d00000 	.word	0x40d00000
 800146c:	00000000 	.word	0x00000000

08001470 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro (I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af04      	add	r7, sp, #16
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	2306      	movs	r3, #6
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2301      	movs	r3, #1
 800148c:	2243      	movs	r2, #67	; 0x43
 800148e:	21d0      	movs	r1, #208	; 0xd0
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 feb3 	bl	80021fc <HAL_I2C_Mem_Read>

	DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001496:	7a3b      	ldrb	r3, [r7, #8]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b21a      	sxth	r2, r3
 800149c:	7a7b      	ldrb	r3, [r7, #9]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80014a8:	7abb      	ldrb	r3, [r7, #10]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	82da      	strh	r2, [r3, #22]
	DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80014ba:	7b3b      	ldrb	r3, [r7, #12]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	7b7b      	ldrb	r3, [r7, #13]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	831a      	strh	r2, [r3, #24]
	/* convert the RAW values into dps (�/s)
       we have to divide according to the Full scale value set in FS_SEL
       I have configured FS_SEL = 0. So I am dividing by 131.0
       for more details check GYRO_CONFIG Register */

	DataStruct->Gx = DataStruct->Gyro_X_RAW/131.0;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f826 	bl	8000524 <__aeabi_i2d>
 80014d8:	a31d      	add	r3, pc, #116	; (adr r3, 8001550 <MPU6050_Read_Gyro+0xe0>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f9b5 	bl	800084c <__aeabi_ddiv>
 80014e2:	4603      	mov	r3, r0
 80014e4:	460c      	mov	r4, r1
 80014e6:	4618      	mov	r0, r3
 80014e8:	4621      	mov	r1, r4
 80014ea:	f7ff fb5d 	bl	8000ba8 <__aeabi_d2f>
 80014ee:	4602      	mov	r2, r0
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	61da      	str	r2, [r3, #28]
	DataStruct->Gy = DataStruct->Gyro_Y_RAW/131.0;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f812 	bl	8000524 <__aeabi_i2d>
 8001500:	a313      	add	r3, pc, #76	; (adr r3, 8001550 <MPU6050_Read_Gyro+0xe0>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff f9a1 	bl	800084c <__aeabi_ddiv>
 800150a:	4603      	mov	r3, r0
 800150c:	460c      	mov	r4, r1
 800150e:	4618      	mov	r0, r3
 8001510:	4621      	mov	r1, r4
 8001512:	f7ff fb49 	bl	8000ba8 <__aeabi_d2f>
 8001516:	4602      	mov	r2, r0
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	621a      	str	r2, [r3, #32]
	DataStruct->Gz = DataStruct->Gyro_Z_RAW/131.0;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe fffe 	bl	8000524 <__aeabi_i2d>
 8001528:	a309      	add	r3, pc, #36	; (adr r3, 8001550 <MPU6050_Read_Gyro+0xe0>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f98d 	bl	800084c <__aeabi_ddiv>
 8001532:	4603      	mov	r3, r0
 8001534:	460c      	mov	r4, r1
 8001536:	4618      	mov	r0, r3
 8001538:	4621      	mov	r1, r4
 800153a:	f7ff fb35 	bl	8000ba8 <__aeabi_d2f>
 800153e:	4602      	mov	r2, r0
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}
 800154c:	f3af 8000 	nop.w
 8001550:	00000000 	.word	0x00000000
 8001554:	40606000 	.word	0x40606000

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_MspInit+0x44>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_MspInit+0x44>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6613      	str	r3, [r2, #96]	; 0x60
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_MspInit+0x44>)
 800156c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_MspInit+0x44>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_MspInit+0x44>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6593      	str	r3, [r2, #88]	; 0x58
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_MspInit+0x44>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000

080015a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_I2C_MspInit+0x7c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d128      	bne.n	8001614 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_I2C_MspInit+0x80>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	4a16      	ldr	r2, [pc, #88]	; (8001620 <HAL_I2C_MspInit+0x80>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_I2C_MspInit+0x80>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e0:	2312      	movs	r3, #18
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ec:	2304      	movs	r3, #4
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	480b      	ldr	r0, [pc, #44]	; (8001624 <HAL_I2C_MspInit+0x84>)
 80015f8:	f000 fa9c 	bl	8001b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_I2C_MspInit+0x80>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_I2C_MspInit+0x80>)
 8001602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001606:	6593      	str	r3, [r2, #88]	; 0x58
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_I2C_MspInit+0x80>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40005400 	.word	0x40005400
 8001620:	40021000 	.word	0x40021000
 8001624:	48000400 	.word	0x48000400

08001628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_UART_MspInit+0x7c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d128      	bne.n	800169c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_UART_MspInit+0x80>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164e:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <HAL_UART_MspInit+0x80>)
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	6593      	str	r3, [r2, #88]	; 0x58
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_UART_MspInit+0x80>)
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_UART_MspInit+0x80>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	4a10      	ldr	r2, [pc, #64]	; (80016a8 <HAL_UART_MspInit+0x80>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_UART_MspInit+0x80>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800167a:	230c      	movs	r3, #12
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800168a:	2307      	movs	r3, #7
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001698:	f000 fa4c 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40004400 	.word	0x40004400
 80016a8:	40021000 	.word	0x40021000

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 f8f4 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f003 f8fe 	bl	8004930 <__errno>
 8001734:	4602      	mov	r2, r0
 8001736:	230c      	movs	r3, #12
 8001738:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20018000 	.word	0x20018000
 8001760:	00000400 	.word	0x00000400
 8001764:	200001f8 	.word	0x200001f8
 8001768:	20000300 	.word	0x20000300

0800176c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <SystemInit+0x64>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	4a16      	ldr	r2, [pc, #88]	; (80017d0 <SystemInit+0x64>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <SystemInit+0x68>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <SystemInit+0x68>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <SystemInit+0x68>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <SystemInit+0x68>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <SystemInit+0x68>)
 8001798:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800179c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <SystemInit+0x68>)
 80017a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <SystemInit+0x68>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <SystemInit+0x68>)
 80017b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <SystemInit+0x68>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SystemInit+0x64>)
 80017be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017c2:	609a      	str	r2, [r3, #8]
#endif
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00
 80017d4:	40021000 	.word	0x40021000

080017d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001810 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017dc:	f7ff ffc6 	bl	800176c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017e2:	e003      	b.n	80017ec <LoopCopyDataInit>

080017e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017ea:	3104      	adds	r1, #4

080017ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017ec:	480a      	ldr	r0, [pc, #40]	; (8001818 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <LoopForever+0xe>)
	adds	r2, r0, r1
 80017f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017f4:	d3f6      	bcc.n	80017e4 <CopyDataInit>
	ldr	r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017f8:	e002      	b.n	8001800 <LoopFillZerobss>

080017fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017fc:	f842 3b04 	str.w	r3, [r2], #4

08001800 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <LoopForever+0x16>)
	cmp	r2, r3
 8001802:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001804:	d3f9      	bcc.n	80017fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001806:	f003 f899 	bl	800493c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800180a:	f7ff fb9d 	bl	8000f48 <main>

0800180e <LoopForever>:

LoopForever:
    b LoopForever
 800180e:	e7fe      	b.n	800180e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001810:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001814:	08006d18 	.word	0x08006d18
	ldr	r0, =_sdata
 8001818:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800181c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001820:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001824:	20000300 	.word	0x20000300

08001828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC1_2_IRQHandler>
	...

0800182c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_Init+0x3c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_Init+0x3c>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001842:	2003      	movs	r0, #3
 8001844:	f000 f942 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001848:	2000      	movs	r0, #0
 800184a:	f000 f80f 	bl	800186c <HAL_InitTick>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	71fb      	strb	r3, [r7, #7]
 8001858:	e001      	b.n	800185e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800185a:	f7ff fe7d 	bl	8001558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800185e:	79fb      	ldrb	r3, [r7, #7]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40022000 	.word	0x40022000

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_InitTick+0x6c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d023      	beq.n	80018c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_InitTick+0x70>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_InitTick+0x6c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f93f 	bl	8001b1a <HAL_SYSTICK_Config>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d809      	bhi.n	80018bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f000 f917 	bl	8001ae2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_InitTick+0x74>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e007      	b.n	80018cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e004      	b.n	80018cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	e001      	b.n	80018cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000008 	.word	0x20000008
 8001908:	200002f8 	.word	0x200002f8

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	200002f8 	.word	0x200002f8

08001924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff ffee 	bl	800190c <HAL_GetTick>
 8001930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d005      	beq.n	800194a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_Delay+0x40>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800194a:	bf00      	nop
 800194c:	f7ff ffde 	bl	800190c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8f7      	bhi.n	800194c <HAL_Delay+0x28>
  {
  }
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000008 	.word	0x20000008

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff8e 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff47 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff5c 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff8e 	bl	8001a20 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5d 	bl	80019cc <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffb0 	bl	8001a88 <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b42:	e17f      	b.n	8001e44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	4013      	ands	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8171 	beq.w	8001e3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d00b      	beq.n	8001b7c <HAL_GPIO_Init+0x48>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d007      	beq.n	8001b7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b70:	2b11      	cmp	r3, #17
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b12      	cmp	r3, #18
 8001b7a:	d130      	bne.n	8001bde <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	f003 0201 	and.w	r2, r3, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d118      	bne.n	8001c1c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	f003 0201 	and.w	r2, r3, #1
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x128>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b12      	cmp	r3, #18
 8001c5a:	d123      	bne.n	8001ca4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	08da      	lsrs	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3208      	adds	r2, #8
 8001c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	220f      	movs	r2, #15
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	6939      	ldr	r1, [r7, #16]
 8001ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0203 	and.w	r2, r3, #3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80ac 	beq.w	8001e3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <HAL_GPIO_Init+0x32c>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	4a5d      	ldr	r2, [pc, #372]	; (8001e60 <HAL_GPIO_Init+0x32c>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf2:	4b5b      	ldr	r3, [pc, #364]	; (8001e60 <HAL_GPIO_Init+0x32c>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cfe:	4a59      	ldr	r2, [pc, #356]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d28:	d025      	beq.n	8001d76 <HAL_GPIO_Init+0x242>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4e      	ldr	r2, [pc, #312]	; (8001e68 <HAL_GPIO_Init+0x334>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d01f      	beq.n	8001d72 <HAL_GPIO_Init+0x23e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4d      	ldr	r2, [pc, #308]	; (8001e6c <HAL_GPIO_Init+0x338>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d019      	beq.n	8001d6e <HAL_GPIO_Init+0x23a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4c      	ldr	r2, [pc, #304]	; (8001e70 <HAL_GPIO_Init+0x33c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0x236>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4b      	ldr	r2, [pc, #300]	; (8001e74 <HAL_GPIO_Init+0x340>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00d      	beq.n	8001d66 <HAL_GPIO_Init+0x232>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4a      	ldr	r2, [pc, #296]	; (8001e78 <HAL_GPIO_Init+0x344>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d007      	beq.n	8001d62 <HAL_GPIO_Init+0x22e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a49      	ldr	r2, [pc, #292]	; (8001e7c <HAL_GPIO_Init+0x348>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d101      	bne.n	8001d5e <HAL_GPIO_Init+0x22a>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e00c      	b.n	8001d78 <HAL_GPIO_Init+0x244>
 8001d5e:	2307      	movs	r3, #7
 8001d60:	e00a      	b.n	8001d78 <HAL_GPIO_Init+0x244>
 8001d62:	2305      	movs	r3, #5
 8001d64:	e008      	b.n	8001d78 <HAL_GPIO_Init+0x244>
 8001d66:	2304      	movs	r3, #4
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x244>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e004      	b.n	8001d78 <HAL_GPIO_Init+0x244>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_Init+0x244>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_Init+0x244>
 8001d76:	2300      	movs	r3, #0
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	f002 0203 	and.w	r2, r2, #3
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	4093      	lsls	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d88:	4936      	ldr	r1, [pc, #216]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d96:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <HAL_GPIO_Init+0x34c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dba:	4a31      	ldr	r2, [pc, #196]	; (8001e80 <HAL_GPIO_Init+0x34c>)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001dc0:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <HAL_GPIO_Init+0x34c>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001de4:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <HAL_GPIO_Init+0x34c>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dea:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <HAL_GPIO_Init+0x34c>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_GPIO_Init+0x34c>)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_GPIO_Init+0x34c>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e38:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_GPIO_Init+0x34c>)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f47f ae78 	bne.w	8001b44 <HAL_GPIO_Init+0x10>
  }
}
 8001e54:	bf00      	nop
 8001e56:	371c      	adds	r7, #28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000
 8001e68:	48000400 	.word	0x48000400
 8001e6c:	48000800 	.word	0x48000800
 8001e70:	48000c00 	.word	0x48000c00
 8001e74:	48001000 	.word	0x48001000
 8001e78:	48001400 	.word	0x48001400
 8001e7c:	48001800 	.word	0x48001800
 8001e80:	40010400 	.word	0x40010400

08001e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
 8001e90:	4613      	mov	r3, r2
 8001e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e94:	787b      	ldrb	r3, [r7, #1]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ea0:	e002      	b.n	8001ea8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e081      	b.n	8001fca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff fb60 	bl	80015a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2224      	movs	r2, #36	; 0x24
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d107      	bne.n	8001f2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	e006      	b.n	8001f3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d104      	bne.n	8001f4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	ea42 0103 	orr.w	r1, r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	021a      	lsls	r2, r3, #8
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69d9      	ldr	r1, [r3, #28]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1a      	ldr	r2, [r3, #32]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4611      	mov	r1, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	817b      	strh	r3, [r7, #10]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	813b      	strh	r3, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	f040 80f9 	bne.w	80021ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_I2C_Mem_Write+0x34>
 8002002:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800200e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0ed      	b.n	80021f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_I2C_Mem_Write+0x4e>
 800201e:	2302      	movs	r3, #2
 8002020:	e0e6      	b.n	80021f0 <HAL_I2C_Mem_Write+0x21c>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800202a:	f7ff fc6f 	bl	800190c <HAL_GetTick>
 800202e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2319      	movs	r3, #25
 8002036:	2201      	movs	r2, #1
 8002038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fac3 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0d1      	b.n	80021f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2221      	movs	r2, #33	; 0x21
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2240      	movs	r2, #64	; 0x40
 8002058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a3a      	ldr	r2, [r7, #32]
 8002066:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800206c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002074:	88f8      	ldrh	r0, [r7, #6]
 8002076:	893a      	ldrh	r2, [r7, #8]
 8002078:	8979      	ldrh	r1, [r7, #10]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	4603      	mov	r3, r0
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f9d3 	bl	8002430 <I2C_RequestMemoryWrite>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0a9      	b.n	80021f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2bff      	cmp	r3, #255	; 0xff
 80020a4:	d90e      	bls.n	80020c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	22ff      	movs	r2, #255	; 0xff
 80020aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	8979      	ldrh	r1, [r7, #10]
 80020b4:	2300      	movs	r3, #0
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fba5 	bl	800280c <I2C_TransferConfig>
 80020c2:	e00f      	b.n	80020e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	8979      	ldrh	r1, [r7, #10]
 80020d6:	2300      	movs	r3, #0
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 fb94 	bl	800280c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 faad 	bl	8002648 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e07b      	b.n	80021f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d034      	beq.n	800219c <HAL_I2C_Mem_Write+0x1c8>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	2b00      	cmp	r3, #0
 8002138:	d130      	bne.n	800219c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	2200      	movs	r2, #0
 8002142:	2180      	movs	r1, #128	; 0x80
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 fa3f 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e04d      	b.n	80021f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	2bff      	cmp	r3, #255	; 0xff
 800215c:	d90e      	bls.n	800217c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	22ff      	movs	r2, #255	; 0xff
 8002162:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	b2da      	uxtb	r2, r3
 800216a:	8979      	ldrh	r1, [r7, #10]
 800216c:	2300      	movs	r3, #0
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fb49 	bl	800280c <I2C_TransferConfig>
 800217a:	e00f      	b.n	800219c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	b2da      	uxtb	r2, r3
 800218c:	8979      	ldrh	r1, [r7, #10]
 800218e:	2300      	movs	r3, #0
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fb38 	bl	800280c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d19e      	bne.n	80020e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 fa8c 	bl	80026c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e01a      	b.n	80021f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2220      	movs	r2, #32
 80021c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_I2C_Mem_Write+0x224>)
 80021ce:	400b      	ands	r3, r1
 80021d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80021ee:	2302      	movs	r3, #2
  }
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	fe00e800 	.word	0xfe00e800

080021fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	4608      	mov	r0, r1
 8002206:	4611      	mov	r1, r2
 8002208:	461a      	mov	r2, r3
 800220a:	4603      	mov	r3, r0
 800220c:	817b      	strh	r3, [r7, #10]
 800220e:	460b      	mov	r3, r1
 8002210:	813b      	strh	r3, [r7, #8]
 8002212:	4613      	mov	r3, r2
 8002214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b20      	cmp	r3, #32
 8002220:	f040 80fd 	bne.w	800241e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_I2C_Mem_Read+0x34>
 800222a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800222c:	2b00      	cmp	r3, #0
 800222e:	d105      	bne.n	800223c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0f1      	b.n	8002420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_I2C_Mem_Read+0x4e>
 8002246:	2302      	movs	r3, #2
 8002248:	e0ea      	b.n	8002420 <HAL_I2C_Mem_Read+0x224>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002252:	f7ff fb5b 	bl	800190c <HAL_GetTick>
 8002256:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2319      	movs	r3, #25
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f9af 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0d5      	b.n	8002420 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2222      	movs	r2, #34	; 0x22
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a3a      	ldr	r2, [r7, #32]
 800228e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002294:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800229c:	88f8      	ldrh	r0, [r7, #6]
 800229e:	893a      	ldrh	r2, [r7, #8]
 80022a0:	8979      	ldrh	r1, [r7, #10]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	4603      	mov	r3, r0
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f913 	bl	80024d8 <I2C_RequestMemoryRead>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0ad      	b.n	8002420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2bff      	cmp	r3, #255	; 0xff
 80022cc:	d90e      	bls.n	80022ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	22ff      	movs	r2, #255	; 0xff
 80022d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	8979      	ldrh	r1, [r7, #10]
 80022dc:	4b52      	ldr	r3, [pc, #328]	; (8002428 <HAL_I2C_Mem_Read+0x22c>)
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fa91 	bl	800280c <I2C_TransferConfig>
 80022ea:	e00f      	b.n	800230c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	8979      	ldrh	r1, [r7, #10]
 80022fe:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <HAL_I2C_Mem_Read+0x22c>)
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fa80 	bl	800280c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	2200      	movs	r2, #0
 8002314:	2104      	movs	r1, #4
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f956 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e07c      	b.n	8002420 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d034      	beq.n	80023cc <HAL_I2C_Mem_Read+0x1d0>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	2b00      	cmp	r3, #0
 8002368:	d130      	bne.n	80023cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	2200      	movs	r2, #0
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f927 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e04d      	b.n	8002420 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	2bff      	cmp	r3, #255	; 0xff
 800238c:	d90e      	bls.n	80023ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	22ff      	movs	r2, #255	; 0xff
 8002392:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	b2da      	uxtb	r2, r3
 800239a:	8979      	ldrh	r1, [r7, #10]
 800239c:	2300      	movs	r3, #0
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fa31 	bl	800280c <I2C_TransferConfig>
 80023aa:	e00f      	b.n	80023cc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	8979      	ldrh	r1, [r7, #10]
 80023be:	2300      	movs	r3, #0
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 fa20 	bl	800280c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d19a      	bne.n	800230c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f974 	bl	80026c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e01a      	b.n	8002420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2220      	movs	r2, #32
 80023f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_I2C_Mem_Read+0x230>)
 80023fe:	400b      	ands	r3, r1
 8002400:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	e000      	b.n	8002420 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800241e:	2302      	movs	r3, #2
  }
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	80002400 	.word	0x80002400
 800242c:	fe00e800 	.word	0xfe00e800

08002430 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	4608      	mov	r0, r1
 800243a:	4611      	mov	r1, r2
 800243c:	461a      	mov	r2, r3
 800243e:	4603      	mov	r3, r0
 8002440:	817b      	strh	r3, [r7, #10]
 8002442:	460b      	mov	r3, r1
 8002444:	813b      	strh	r3, [r7, #8]
 8002446:	4613      	mov	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	8979      	ldrh	r1, [r7, #10]
 8002450:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <I2C_RequestMemoryWrite+0xa4>)
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 f9d7 	bl	800280c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	69b9      	ldr	r1, [r7, #24]
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f8f0 	bl	8002648 <I2C_WaitOnTXISFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e02c      	b.n	80024cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d105      	bne.n	8002484 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002478:	893b      	ldrh	r3, [r7, #8]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	629a      	str	r2, [r3, #40]	; 0x28
 8002482:	e015      	b.n	80024b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002484:	893b      	ldrh	r3, [r7, #8]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	b29b      	uxth	r3, r3
 800248a:	b2da      	uxtb	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	69b9      	ldr	r1, [r7, #24]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f8d6 	bl	8002648 <I2C_WaitOnTXISFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e012      	b.n	80024cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024a6:	893b      	ldrh	r3, [r7, #8]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2200      	movs	r2, #0
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f884 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	80002000 	.word	0x80002000

080024d8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	4608      	mov	r0, r1
 80024e2:	4611      	mov	r1, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	817b      	strh	r3, [r7, #10]
 80024ea:	460b      	mov	r3, r1
 80024ec:	813b      	strh	r3, [r7, #8]
 80024ee:	4613      	mov	r3, r2
 80024f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	8979      	ldrh	r1, [r7, #10]
 80024f8:	4b20      	ldr	r3, [pc, #128]	; (800257c <I2C_RequestMemoryRead+0xa4>)
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2300      	movs	r3, #0
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f984 	bl	800280c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	69b9      	ldr	r1, [r7, #24]
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f89d 	bl	8002648 <I2C_WaitOnTXISFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e02c      	b.n	8002572 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d105      	bne.n	800252a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800251e:	893b      	ldrh	r3, [r7, #8]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	629a      	str	r2, [r3, #40]	; 0x28
 8002528:	e015      	b.n	8002556 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800252a:	893b      	ldrh	r3, [r7, #8]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	b29b      	uxth	r3, r3
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	69b9      	ldr	r1, [r7, #24]
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 f883 	bl	8002648 <I2C_WaitOnTXISFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e012      	b.n	8002572 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800254c:	893b      	ldrh	r3, [r7, #8]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2200      	movs	r2, #0
 800255e:	2140      	movs	r1, #64	; 0x40
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f831 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	80002000 	.word	0x80002000

08002580 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b02      	cmp	r3, #2
 8002594:	d103      	bne.n	800259e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2200      	movs	r2, #0
 800259c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d007      	beq.n	80025bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	619a      	str	r2, [r3, #24]
  }
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d8:	e022      	b.n	8002620 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d01e      	beq.n	8002620 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e2:	f7ff f993 	bl	800190c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d302      	bcc.n	80025f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d113      	bne.n	8002620 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	f043 0220 	orr.w	r2, r3, #32
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e00f      	b.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4013      	ands	r3, r2
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	429a      	cmp	r2, r3
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	429a      	cmp	r2, r3
 800263c:	d0cd      	beq.n	80025da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002654:	e02c      	b.n	80026b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f870 	bl	8002740 <I2C_IsAcknowledgeFailed>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e02a      	b.n	80026c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d01e      	beq.n	80026b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002672:	f7ff f94b 	bl	800190c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	429a      	cmp	r2, r3
 8002680:	d302      	bcc.n	8002688 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d113      	bne.n	80026b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	f043 0220 	orr.w	r2, r3, #32
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e007      	b.n	80026c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d1cb      	bne.n	8002656 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026d4:	e028      	b.n	8002728 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f830 	bl	8002740 <I2C_IsAcknowledgeFailed>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e026      	b.n	8002738 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ea:	f7ff f90f 	bl	800190c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d302      	bcc.n	8002700 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d113      	bne.n	8002728 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	f043 0220 	orr.w	r2, r3, #32
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e007      	b.n	8002738 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b20      	cmp	r3, #32
 8002734:	d1cf      	bne.n	80026d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b10      	cmp	r3, #16
 8002758:	d151      	bne.n	80027fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800275a:	e022      	b.n	80027a2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002762:	d01e      	beq.n	80027a2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002764:	f7ff f8d2 	bl	800190c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	429a      	cmp	r2, r3
 8002772:	d302      	bcc.n	800277a <I2C_IsAcknowledgeFailed+0x3a>
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d113      	bne.n	80027a2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e02e      	b.n	8002800 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d1d5      	bne.n	800275c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2210      	movs	r2, #16
 80027b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2220      	movs	r2, #32
 80027be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f7ff fedd 	bl	8002580 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <I2C_IsAcknowledgeFailed+0xc8>)
 80027d2:	400b      	ands	r3, r1
 80027d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f043 0204 	orr.w	r2, r3, #4
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2220      	movs	r2, #32
 80027e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	fe00e800 	.word	0xfe00e800

0800280c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	817b      	strh	r3, [r7, #10]
 800281a:	4613      	mov	r3, r2
 800281c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	0d5b      	lsrs	r3, r3, #21
 8002828:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800282c:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <I2C_TransferConfig+0x58>)
 800282e:	430b      	orrs	r3, r1
 8002830:	43db      	mvns	r3, r3
 8002832:	ea02 0103 	and.w	r1, r2, r3
 8002836:	897b      	ldrh	r3, [r7, #10]
 8002838:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800283c:	7a7b      	ldrb	r3, [r7, #9]
 800283e:	041b      	lsls	r3, r3, #16
 8002840:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	431a      	orrs	r2, r3
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	431a      	orrs	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	03ff63ff 	.word	0x03ff63ff

08002868 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b20      	cmp	r3, #32
 800287c:	d138      	bne.n	80028f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002888:	2302      	movs	r3, #2
 800288a:	e032      	b.n	80028f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2224      	movs	r2, #36	; 0x24
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6819      	ldr	r1, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b20      	cmp	r3, #32
 8002912:	d139      	bne.n	8002988 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800291e:	2302      	movs	r3, #2
 8002920:	e033      	b.n	800298a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2224      	movs	r2, #36	; 0x24
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002950:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	e000      	b.n	800298a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002988:	2302      	movs	r3, #2
  }
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40007000 	.word	0x40007000

080029b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c2:	d130      	bne.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d0:	d038      	beq.n	8002a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029da:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2232      	movs	r2, #50	; 0x32
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0c9b      	lsrs	r3, r3, #18
 80029f4:	3301      	adds	r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f8:	e002      	b.n	8002a00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0c:	d102      	bne.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f2      	bne.n	80029fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a20:	d110      	bne.n	8002a44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e00f      	b.n	8002a46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a32:	d007      	beq.n	8002a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a3c:	4a05      	ldr	r2, [pc, #20]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40007000 	.word	0x40007000
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	431bde83 	.word	0x431bde83

08002a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e3d4      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a72:	4ba1      	ldr	r3, [pc, #644]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a7c:	4b9e      	ldr	r3, [pc, #632]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80e4 	beq.w	8002c5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_RCC_OscConfig+0x4a>
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	f040 808b 	bne.w	8002bb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	f040 8087 	bne.w	8002bb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aaa:	4b93      	ldr	r3, [pc, #588]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x62>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e3ac      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1a      	ldr	r2, [r3, #32]
 8002ac6:	4b8c      	ldr	r3, [pc, #560]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d004      	beq.n	8002adc <HAL_RCC_OscConfig+0x7c>
 8002ad2:	4b89      	ldr	r3, [pc, #548]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ada:	e005      	b.n	8002ae8 <HAL_RCC_OscConfig+0x88>
 8002adc:	4b86      	ldr	r3, [pc, #536]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d223      	bcs.n	8002b34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fd3f 	bl	8003574 <RCC_SetFlashLatencyFromMSIRange>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e38d      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b00:	4b7d      	ldr	r3, [pc, #500]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a7c      	ldr	r2, [pc, #496]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b06:	f043 0308 	orr.w	r3, r3, #8
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b7a      	ldr	r3, [pc, #488]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4977      	ldr	r1, [pc, #476]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b1e:	4b76      	ldr	r3, [pc, #472]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	4972      	ldr	r1, [pc, #456]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
 8002b32:	e025      	b.n	8002b80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b34:	4b70      	ldr	r3, [pc, #448]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a6f      	ldr	r2, [pc, #444]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b3a:	f043 0308 	orr.w	r3, r3, #8
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b6d      	ldr	r3, [pc, #436]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	496a      	ldr	r1, [pc, #424]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b52:	4b69      	ldr	r3, [pc, #420]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	4965      	ldr	r1, [pc, #404]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fcff 	bl	8003574 <RCC_SetFlashLatencyFromMSIRange>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e34d      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b80:	f000 fc36 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8002b84:	4601      	mov	r1, r0
 8002b86:	4b5c      	ldr	r3, [pc, #368]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	4a5a      	ldr	r2, [pc, #360]	; (8002cfc <HAL_RCC_OscConfig+0x29c>)
 8002b92:	5cd3      	ldrb	r3, [r2, r3]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	fa21 f303 	lsr.w	r3, r1, r3
 8002b9c:	4a58      	ldr	r2, [pc, #352]	; (8002d00 <HAL_RCC_OscConfig+0x2a0>)
 8002b9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ba0:	4b58      	ldr	r3, [pc, #352]	; (8002d04 <HAL_RCC_OscConfig+0x2a4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe fe61 	bl	800186c <HAL_InitTick>
 8002baa:	4603      	mov	r3, r0
 8002bac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d052      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	e331      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d032      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bc0:	4b4d      	ldr	r3, [pc, #308]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a4c      	ldr	r2, [pc, #304]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fe9e 	bl	800190c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fe9a 	bl	800190c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e31a      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002be6:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bf2:	4b41      	ldr	r3, [pc, #260]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a40      	ldr	r2, [pc, #256]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002bf8:	f043 0308 	orr.w	r3, r3, #8
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b3e      	ldr	r3, [pc, #248]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	493b      	ldr	r1, [pc, #236]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c10:	4b39      	ldr	r3, [pc, #228]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	4936      	ldr	r1, [pc, #216]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
 8002c24:	e01a      	b.n	8002c5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c26:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a33      	ldr	r2, [pc, #204]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c32:	f7fe fe6b 	bl	800190c <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fe67 	bl	800190c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e2e7      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c4c:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f0      	bne.n	8002c3a <HAL_RCC_OscConfig+0x1da>
 8002c58:	e000      	b.n	8002c5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d074      	beq.n	8002d52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d005      	beq.n	8002c7a <HAL_RCC_OscConfig+0x21a>
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	d10e      	bne.n	8002c92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d10b      	bne.n	8002c92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7a:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d064      	beq.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d160      	bne.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e2c4      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x24a>
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a15      	ldr	r2, [pc, #84]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e01d      	b.n	8002ce6 <HAL_RCC_OscConfig+0x286>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb2:	d10c      	bne.n	8002cce <HAL_RCC_OscConfig+0x26e>
 8002cb4:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0f      	ldr	r2, [pc, #60]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002cba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	e00b      	b.n	8002ce6 <HAL_RCC_OscConfig+0x286>
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a06      	ldr	r2, [pc, #24]	; (8002cf8 <HAL_RCC_OscConfig+0x298>)
 8002ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d01c      	beq.n	8002d28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe fe0d 	bl	800190c <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cf4:	e011      	b.n	8002d1a <HAL_RCC_OscConfig+0x2ba>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	08006a60 	.word	0x08006a60
 8002d00:	20000000 	.word	0x20000000
 8002d04:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe fe00 	bl	800190c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e280      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d1a:	4baf      	ldr	r3, [pc, #700]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x2a8>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe fdf0 	bl	800190c <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d30:	f7fe fdec 	bl	800190c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e26c      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d42:	4ba5      	ldr	r3, [pc, #660]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2d0>
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d060      	beq.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_OscConfig+0x310>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	d119      	bne.n	8002d9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d116      	bne.n	8002d9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d70:	4b99      	ldr	r3, [pc, #612]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_OscConfig+0x328>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e249      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b93      	ldr	r3, [pc, #588]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	4990      	ldr	r1, [pc, #576]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d9c:	e040      	b.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d023      	beq.n	8002dee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da6:	4b8c      	ldr	r3, [pc, #560]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a8b      	ldr	r2, [pc, #556]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fdab 	bl	800190c <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe fda7 	bl	800190c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e227      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dcc:	4b82      	ldr	r3, [pc, #520]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b7f      	ldr	r3, [pc, #508]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	061b      	lsls	r3, r3, #24
 8002de6:	497c      	ldr	r1, [pc, #496]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
 8002dec:	e018      	b.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dee:	4b7a      	ldr	r3, [pc, #488]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a79      	ldr	r2, [pc, #484]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fd87 	bl	800190c <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e02:	f7fe fd83 	bl	800190c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e203      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e14:	4b70      	ldr	r3, [pc, #448]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d03c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01c      	beq.n	8002e6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e34:	4b68      	ldr	r3, [pc, #416]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3a:	4a67      	ldr	r2, [pc, #412]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7fe fd62 	bl	800190c <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fd5e 	bl	800190c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e1de      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e5e:	4b5e      	ldr	r3, [pc, #376]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0ef      	beq.n	8002e4c <HAL_RCC_OscConfig+0x3ec>
 8002e6c:	e01b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6e:	4b5a      	ldr	r3, [pc, #360]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e74:	4a58      	ldr	r2, [pc, #352]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7e:	f7fe fd45 	bl	800190c <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e86:	f7fe fd41 	bl	800190c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e1c1      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e98:	4b4f      	ldr	r3, [pc, #316]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1ef      	bne.n	8002e86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 80a6 	beq.w	8003000 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eb8:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	4b44      	ldr	r3, [pc, #272]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	4a43      	ldr	r2, [pc, #268]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ece:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed0:	4b41      	ldr	r3, [pc, #260]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002edc:	2301      	movs	r3, #1
 8002ede:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee0:	4b3e      	ldr	r3, [pc, #248]	; (8002fdc <HAL_RCC_OscConfig+0x57c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d118      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eec:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <HAL_RCC_OscConfig+0x57c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a3a      	ldr	r2, [pc, #232]	; (8002fdc <HAL_RCC_OscConfig+0x57c>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef8:	f7fe fd08 	bl	800190c <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f00:	f7fe fd04 	bl	800190c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e184      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f12:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <HAL_RCC_OscConfig+0x57c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d108      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4d8>
 8002f26:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	4a2a      	ldr	r2, [pc, #168]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f36:	e024      	b.n	8002f82 <HAL_RCC_OscConfig+0x522>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b05      	cmp	r3, #5
 8002f3e:	d110      	bne.n	8002f62 <HAL_RCC_OscConfig+0x502>
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002f48:	f043 0304 	orr.w	r3, r3, #4
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f50:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f60:	e00f      	b.n	8002f82 <HAL_RCC_OscConfig+0x522>
 8002f62:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	4a1b      	ldr	r2, [pc, #108]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002f7a:	f023 0304 	bic.w	r3, r3, #4
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d016      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fcbf 	bl	800190c <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe fcbb 	bl	800190c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e139      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_RCC_OscConfig+0x578>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0ed      	beq.n	8002f92 <HAL_RCC_OscConfig+0x532>
 8002fb6:	e01a      	b.n	8002fee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fca8 	bl	800190c <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fbe:	e00f      	b.n	8002fe0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe fca4 	bl	800190c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d906      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e122      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fe0:	4b90      	ldr	r3, [pc, #576]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1e8      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fee:	7ffb      	ldrb	r3, [r7, #31]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff4:	4b8b      	ldr	r3, [pc, #556]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	4a8a      	ldr	r2, [pc, #552]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 8002ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8108 	beq.w	800321a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	2b02      	cmp	r3, #2
 8003010:	f040 80d0 	bne.w	80031b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003014:	4b83      	ldr	r3, [pc, #524]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0203 	and.w	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	429a      	cmp	r2, r3
 8003026:	d130      	bne.n	800308a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	3b01      	subs	r3, #1
 8003034:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d127      	bne.n	800308a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003044:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d11f      	bne.n	800308a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003054:	2a07      	cmp	r2, #7
 8003056:	bf14      	ite	ne
 8003058:	2201      	movne	r2, #1
 800305a:	2200      	moveq	r2, #0
 800305c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800305e:	4293      	cmp	r3, r2
 8003060:	d113      	bne.n	800308a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	3b01      	subs	r3, #1
 8003070:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d109      	bne.n	800308a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	3b01      	subs	r3, #1
 8003084:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d06e      	beq.n	8003168 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b0c      	cmp	r3, #12
 800308e:	d069      	beq.n	8003164 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003090:	4b64      	ldr	r3, [pc, #400]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d105      	bne.n	80030a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800309c:	4b61      	ldr	r3, [pc, #388]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0b7      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030ac:	4b5d      	ldr	r3, [pc, #372]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a5c      	ldr	r2, [pc, #368]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 80030b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030b8:	f7fe fc28 	bl	800190c <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c0:	f7fe fc24 	bl	800190c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0a4      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d2:	4b54      	ldr	r3, [pc, #336]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030de:	4b51      	ldr	r3, [pc, #324]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	4b51      	ldr	r3, [pc, #324]	; (8003228 <HAL_RCC_OscConfig+0x7c8>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030ee:	3a01      	subs	r2, #1
 80030f0:	0112      	lsls	r2, r2, #4
 80030f2:	4311      	orrs	r1, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030f8:	0212      	lsls	r2, r2, #8
 80030fa:	4311      	orrs	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003100:	0852      	lsrs	r2, r2, #1
 8003102:	3a01      	subs	r2, #1
 8003104:	0552      	lsls	r2, r2, #21
 8003106:	4311      	orrs	r1, r2
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800310c:	0852      	lsrs	r2, r2, #1
 800310e:	3a01      	subs	r2, #1
 8003110:	0652      	lsls	r2, r2, #25
 8003112:	4311      	orrs	r1, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003118:	0912      	lsrs	r2, r2, #4
 800311a:	0452      	lsls	r2, r2, #17
 800311c:	430a      	orrs	r2, r1
 800311e:	4941      	ldr	r1, [pc, #260]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 8003120:	4313      	orrs	r3, r2
 8003122:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003124:	4b3f      	ldr	r3, [pc, #252]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a3e      	ldr	r2, [pc, #248]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 800312a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003130:	4b3c      	ldr	r3, [pc, #240]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a3b      	ldr	r2, [pc, #236]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 8003136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800313c:	f7fe fbe6 	bl	800190c <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe fbe2 	bl	800190c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e062      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003156:	4b33      	ldr	r3, [pc, #204]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003162:	e05a      	b.n	800321a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e059      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003168:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d152      	bne.n	800321a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003174:	4b2b      	ldr	r3, [pc, #172]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2a      	ldr	r2, [pc, #168]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 800317a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003180:	4b28      	ldr	r3, [pc, #160]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a27      	ldr	r2, [pc, #156]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 8003186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800318a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800318c:	f7fe fbbe 	bl	800190c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003194:	f7fe fbba 	bl	800190c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e03a      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a6:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x734>
 80031b2:	e032      	b.n	800321a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b0c      	cmp	r3, #12
 80031b8:	d02d      	beq.n	8003216 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a19      	ldr	r2, [pc, #100]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 80031c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80031c6:	4b17      	ldr	r3, [pc, #92]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d105      	bne.n	80031de <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031d2:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	4a13      	ldr	r2, [pc, #76]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 80031d8:	f023 0303 	bic.w	r3, r3, #3
 80031dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	4a10      	ldr	r2, [pc, #64]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 80031e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ee:	f7fe fb8d 	bl	800190c <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f6:	f7fe fb89 	bl	800190c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e009      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_RCC_OscConfig+0x7c4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f0      	bne.n	80031f6 <HAL_RCC_OscConfig+0x796>
 8003214:	e001      	b.n	800321a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3720      	adds	r7, #32
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	f99d808c 	.word	0xf99d808c

0800322c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0c8      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003240:	4b66      	ldr	r3, [pc, #408]	; (80033dc <HAL_RCC_ClockConfig+0x1b0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d910      	bls.n	8003270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCC_ClockConfig+0x1b0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 0207 	bic.w	r2, r3, #7
 8003256:	4961      	ldr	r1, [pc, #388]	; (80033dc <HAL_RCC_ClockConfig+0x1b0>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <HAL_RCC_ClockConfig+0x1b0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0b0      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d04c      	beq.n	8003316 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d107      	bne.n	8003294 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003284:	4b56      	ldr	r3, [pc, #344]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d121      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e09e      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d107      	bne.n	80032ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800329c:	4b50      	ldr	r3, [pc, #320]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d115      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e092      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d107      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032b4:	4b4a      	ldr	r3, [pc, #296]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d109      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e086      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c4:	4b46      	ldr	r3, [pc, #280]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e07e      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032d4:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f023 0203 	bic.w	r2, r3, #3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	493f      	ldr	r1, [pc, #252]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e6:	f7fe fb11 	bl	800190c <HAL_GetTick>
 80032ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ec:	e00a      	b.n	8003304 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ee:	f7fe fb0d 	bl	800190c <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e066      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003304:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 020c 	and.w	r2, r3, #12
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	429a      	cmp	r2, r3
 8003314:	d1eb      	bne.n	80032ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003322:	4b2f      	ldr	r3, [pc, #188]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	492c      	ldr	r1, [pc, #176]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003330:	4313      	orrs	r3, r2
 8003332:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003334:	4b29      	ldr	r3, [pc, #164]	; (80033dc <HAL_RCC_ClockConfig+0x1b0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d210      	bcs.n	8003364 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b26      	ldr	r3, [pc, #152]	; (80033dc <HAL_RCC_ClockConfig+0x1b0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 0207 	bic.w	r2, r3, #7
 800334a:	4924      	ldr	r1, [pc, #144]	; (80033dc <HAL_RCC_ClockConfig+0x1b0>)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_RCC_ClockConfig+0x1b0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e036      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4918      	ldr	r1, [pc, #96]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338e:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4910      	ldr	r1, [pc, #64]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033a2:	f000 f825 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80033a6:	4601      	mov	r1, r0
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_RCC_ClockConfig+0x1b4>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	5cd3      	ldrb	r3, [r2, r3]
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	fa21 f303 	lsr.w	r3, r1, r3
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe fa50 	bl	800186c <HAL_InitTick>
 80033cc:	4603      	mov	r3, r0
 80033ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80033d0:	7afb      	ldrb	r3, [r7, #11]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40022000 	.word	0x40022000
 80033e0:	40021000 	.word	0x40021000
 80033e4:	08006a60 	.word	0x08006a60
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000004 	.word	0x20000004

080033f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003408:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x104>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x34>
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b0c      	cmp	r3, #12
 800341c:	d121      	bne.n	8003462 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d11e      	bne.n	8003462 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003424:	4b33      	ldr	r3, [pc, #204]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d107      	bne.n	8003440 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003430:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	e005      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003440:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800344c:	4a2a      	ldr	r2, [pc, #168]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003454:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10d      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003460:	e00a      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d102      	bne.n	800346e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	e004      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d101      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <HAL_RCC_GetSysClockFreq+0x110>)
 8003476:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d133      	bne.n	80034e6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800347e:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d002      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0xa4>
 800348e:	2b03      	cmp	r3, #3
 8003490:	d003      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0xaa>
 8003492:	e005      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003496:	617b      	str	r3, [r7, #20]
      break;
 8003498:	e005      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800349a:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_RCC_GetSysClockFreq+0x110>)
 800349c:	617b      	str	r3, [r7, #20]
      break;
 800349e:	e002      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	617b      	str	r3, [r7, #20]
      break;
 80034a4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034a6:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	3301      	adds	r3, #1
 80034b2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	fb02 f203 	mul.w	r2, r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	0e5b      	lsrs	r3, r3, #25
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	3301      	adds	r3, #1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034e6:	69bb      	ldr	r3, [r7, #24]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3724      	adds	r7, #36	; 0x24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	40021000 	.word	0x40021000
 80034f8:	08006a78 	.word	0x08006a78
 80034fc:	00f42400 	.word	0x00f42400
 8003500:	007a1200 	.word	0x007a1200

08003504 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_RCC_GetHCLKFreq+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000000 	.word	0x20000000

0800351c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003520:	f7ff fff0 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8003524:	4601      	mov	r1, r0
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003532:	5cd3      	ldrb	r3, [r2, r3]
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	fa21 f303 	lsr.w	r3, r1, r3
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	08006a70 	.word	0x08006a70

08003548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800354c:	f7ff ffda 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8003550:	4601      	mov	r1, r0
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	0adb      	lsrs	r3, r3, #11
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_RCC_GetPCLK2Freq+0x28>)
 800355e:	5cd3      	ldrb	r3, [r2, r3]
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	08006a70 	.word	0x08006a70

08003574 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003580:	4b2a      	ldr	r3, [pc, #168]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800358c:	f7ff fa04 	bl	8002998 <HAL_PWREx_GetVoltageRange>
 8003590:	6178      	str	r0, [r7, #20]
 8003592:	e014      	b.n	80035be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003594:	4b25      	ldr	r3, [pc, #148]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	4a24      	ldr	r2, [pc, #144]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359e:	6593      	str	r3, [r2, #88]	; 0x58
 80035a0:	4b22      	ldr	r3, [pc, #136]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035ac:	f7ff f9f4 	bl	8002998 <HAL_PWREx_GetVoltageRange>
 80035b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4b1e      	ldr	r3, [pc, #120]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b6:	4a1d      	ldr	r2, [pc, #116]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c4:	d10b      	bne.n	80035de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d919      	bls.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2ba0      	cmp	r3, #160	; 0xa0
 80035d0:	d902      	bls.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035d2:	2302      	movs	r3, #2
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	e013      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d8:	2301      	movs	r3, #1
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	e010      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b80      	cmp	r3, #128	; 0x80
 80035e2:	d902      	bls.n	80035ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035e4:	2303      	movs	r3, #3
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	e00a      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b80      	cmp	r3, #128	; 0x80
 80035ee:	d102      	bne.n	80035f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035f0:	2302      	movs	r3, #2
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	e004      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b70      	cmp	r3, #112	; 0x70
 80035fa:	d101      	bne.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035fc:	2301      	movs	r3, #1
 80035fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f023 0207 	bic.w	r2, r3, #7
 8003608:	4909      	ldr	r1, [pc, #36]	; (8003630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003610:	4b07      	ldr	r3, [pc, #28]	; (8003630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	429a      	cmp	r2, r3
 800361c:	d001      	beq.n	8003622 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000
 8003630:	40022000 	.word	0x40022000

08003634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800363c:	2300      	movs	r3, #0
 800363e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003640:	2300      	movs	r3, #0
 8003642:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364c:	2b00      	cmp	r3, #0
 800364e:	d03f      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003658:	d01c      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800365a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800365e:	d802      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00e      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003664:	e01f      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003666:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800366a:	d003      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800366c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003670:	d01c      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003672:	e018      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003674:	4b85      	ldr	r3, [pc, #532]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a84      	ldr	r2, [pc, #528]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800367a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003680:	e015      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fab9 	bl	8003c00 <RCCEx_PLLSAI1_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003692:	e00c      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3320      	adds	r3, #32
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fba0 	bl	8003de0 <RCCEx_PLLSAI2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036a4:	e003      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	74fb      	strb	r3, [r7, #19]
      break;
 80036aa:	e000      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80036ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036b4:	4b75      	ldr	r3, [pc, #468]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c2:	4972      	ldr	r1, [pc, #456]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ca:	e001      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d03f      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e4:	d01c      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80036e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ea:	d802      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00e      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xda>
 80036f0:	e01f      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036f6:	d003      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80036f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036fc:	d01c      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80036fe:	e018      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003700:	4b62      	ldr	r3, [pc, #392]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a61      	ldr	r2, [pc, #388]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800370c:	e015      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fa73 	bl	8003c00 <RCCEx_PLLSAI1_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800371e:	e00c      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3320      	adds	r3, #32
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fb5a 	bl	8003de0 <RCCEx_PLLSAI2_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003730:	e003      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	74fb      	strb	r3, [r7, #19]
      break;
 8003736:	e000      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373a:	7cfb      	ldrb	r3, [r7, #19]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10b      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003740:	4b52      	ldr	r3, [pc, #328]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800374e:	494f      	ldr	r1, [pc, #316]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003756:	e001      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80a0 	beq.w	80038aa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003784:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	4a40      	ldr	r2, [pc, #256]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800378a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378e:	6593      	str	r3, [r2, #88]	; 0x58
 8003790:	4b3e      	ldr	r3, [pc, #248]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379c:	2301      	movs	r3, #1
 800379e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a0:	4b3b      	ldr	r3, [pc, #236]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a3a      	ldr	r2, [pc, #232]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037ac:	f7fe f8ae 	bl	800190c <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037b2:	e009      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b4:	f7fe f8aa 	bl	800190c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d902      	bls.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	74fb      	strb	r3, [r7, #19]
        break;
 80037c6:	e005      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037c8:	4b31      	ldr	r3, [pc, #196]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0ef      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80037d4:	7cfb      	ldrb	r3, [r7, #19]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d15c      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037da:	4b2c      	ldr	r3, [pc, #176]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01f      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d019      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003802:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003804:	4b21      	ldr	r3, [pc, #132]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	4a20      	ldr	r2, [pc, #128]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003814:	4b1d      	ldr	r3, [pc, #116]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	4a1c      	ldr	r2, [pc, #112]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800381c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003824:	4a19      	ldr	r2, [pc, #100]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d016      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003836:	f7fe f869 	bl	800190c <HAL_GetTick>
 800383a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383c:	e00b      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383e:	f7fe f865 	bl	800190c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f241 3288 	movw	r2, #5000	; 0x1388
 800384c:	4293      	cmp	r3, r2
 800384e:	d902      	bls.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	74fb      	strb	r3, [r7, #19]
            break;
 8003854:	e006      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ec      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10c      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387a:	4904      	ldr	r1, [pc, #16]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003882:	e009      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	74bb      	strb	r3, [r7, #18]
 8003888:	e006      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003898:	7c7b      	ldrb	r3, [r7, #17]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d105      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389e:	4b9e      	ldr	r3, [pc, #632]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a2:	4a9d      	ldr	r2, [pc, #628]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b6:	4b98      	ldr	r3, [pc, #608]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038bc:	f023 0203 	bic.w	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	4994      	ldr	r1, [pc, #592]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038d8:	4b8f      	ldr	r3, [pc, #572]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038de:	f023 020c 	bic.w	r2, r3, #12
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	498c      	ldr	r1, [pc, #560]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038fa:	4b87      	ldr	r3, [pc, #540]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003900:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	4983      	ldr	r1, [pc, #524]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800391c:	4b7e      	ldr	r3, [pc, #504]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	497b      	ldr	r1, [pc, #492]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800393e:	4b76      	ldr	r3, [pc, #472]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394c:	4972      	ldr	r1, [pc, #456]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003960:	4b6d      	ldr	r3, [pc, #436]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	496a      	ldr	r1, [pc, #424]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003982:	4b65      	ldr	r3, [pc, #404]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003990:	4961      	ldr	r1, [pc, #388]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039a4:	4b5c      	ldr	r3, [pc, #368]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b2:	4959      	ldr	r1, [pc, #356]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039c6:	4b54      	ldr	r3, [pc, #336]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d4:	4950      	ldr	r1, [pc, #320]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039e8:	4b4b      	ldr	r3, [pc, #300]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f6:	4948      	ldr	r1, [pc, #288]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a0a:	4b43      	ldr	r3, [pc, #268]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	493f      	ldr	r1, [pc, #252]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d028      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a2c:	4b3a      	ldr	r3, [pc, #232]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3a:	4937      	ldr	r1, [pc, #220]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a4a:	d106      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a4c:	4b32      	ldr	r3, [pc, #200]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a31      	ldr	r2, [pc, #196]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a56:	60d3      	str	r3, [r2, #12]
 8003a58:	e011      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a62:	d10c      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3304      	adds	r3, #4
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f8c8 	bl	8003c00 <RCCEx_PLLSAI1_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d028      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a8a:	4b23      	ldr	r3, [pc, #140]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	491f      	ldr	r1, [pc, #124]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aa8:	d106      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aaa:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	4a1a      	ldr	r2, [pc, #104]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab4:	60d3      	str	r3, [r2, #12]
 8003ab6:	e011      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 f899 	bl	8003c00 <RCCEx_PLLSAI1_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad2:	7cfb      	ldrb	r3, [r7, #19]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003ad8:	7cfb      	ldrb	r3, [r7, #19]
 8003ada:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02b      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af6:	4908      	ldr	r1, [pc, #32]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b06:	d109      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4a02      	ldr	r2, [pc, #8]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b12:	60d3      	str	r3, [r2, #12]
 8003b14:	e014      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 f867 	bl	8003c00 <RCCEx_PLLSAI1_Config>
 8003b32:	4603      	mov	r3, r0
 8003b34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b36:	7cfb      	ldrb	r3, [r7, #19]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d02f      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b4c:	4b2b      	ldr	r3, [pc, #172]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5a:	4928      	ldr	r1, [pc, #160]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6a:	d10d      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	2102      	movs	r1, #2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f844 	bl	8003c00 <RCCEx_PLLSAI1_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b7c:	7cfb      	ldrb	r3, [r7, #19]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d014      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003b82:	7cfb      	ldrb	r3, [r7, #19]
 8003b84:	74bb      	strb	r3, [r7, #18]
 8003b86:	e011      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b90:	d10c      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3320      	adds	r3, #32
 8003b96:	2102      	movs	r1, #2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 f921 	bl	8003de0 <RCCEx_PLLSAI2_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba2:	7cfb      	ldrb	r3, [r7, #19]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bb8:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc6:	490d      	ldr	r1, [pc, #52]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bea:	4904      	ldr	r1, [pc, #16]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bf2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000

08003c00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c0e:	4b73      	ldr	r3, [pc, #460]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d018      	beq.n	8003c4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c1a:	4b70      	ldr	r3, [pc, #448]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0203 	and.w	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d10d      	bne.n	8003c46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
       ||
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c32:	4b6a      	ldr	r3, [pc, #424]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	091b      	lsrs	r3, r3, #4
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
       ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d044      	beq.n	8003cd0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	73fb      	strb	r3, [r7, #15]
 8003c4a:	e041      	b.n	8003cd0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d00c      	beq.n	8003c6e <RCCEx_PLLSAI1_Config+0x6e>
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d013      	beq.n	8003c80 <RCCEx_PLLSAI1_Config+0x80>
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d120      	bne.n	8003c9e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c5c:	4b5f      	ldr	r3, [pc, #380]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d11d      	bne.n	8003ca4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6c:	e01a      	b.n	8003ca4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c6e:	4b5b      	ldr	r3, [pc, #364]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d116      	bne.n	8003ca8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c7e:	e013      	b.n	8003ca8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c80:	4b56      	ldr	r3, [pc, #344]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10f      	bne.n	8003cac <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c8c:	4b53      	ldr	r3, [pc, #332]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c9c:	e006      	b.n	8003cac <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca2:	e004      	b.n	8003cae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ca4:	bf00      	nop
 8003ca6:	e002      	b.n	8003cae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ca8:	bf00      	nop
 8003caa:	e000      	b.n	8003cae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003cac:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10d      	bne.n	8003cd0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cb4:	4b49      	ldr	r3, [pc, #292]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6819      	ldr	r1, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	4944      	ldr	r1, [pc, #272]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d17d      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cd6:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a40      	ldr	r2, [pc, #256]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce2:	f7fd fe13 	bl	800190c <HAL_GetTick>
 8003ce6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ce8:	e009      	b.n	8003cfe <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cea:	f7fd fe0f 	bl	800190c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d902      	bls.n	8003cfe <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	73fb      	strb	r3, [r7, #15]
        break;
 8003cfc:	e005      	b.n	8003d0a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cfe:	4b37      	ldr	r3, [pc, #220]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1ef      	bne.n	8003cea <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d160      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d111      	bne.n	8003d3a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d16:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6892      	ldr	r2, [r2, #8]
 8003d26:	0211      	lsls	r1, r2, #8
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	68d2      	ldr	r2, [r2, #12]
 8003d2c:	0912      	lsrs	r2, r2, #4
 8003d2e:	0452      	lsls	r2, r2, #17
 8003d30:	430a      	orrs	r2, r1
 8003d32:	492a      	ldr	r1, [pc, #168]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	610b      	str	r3, [r1, #16]
 8003d38:	e027      	b.n	8003d8a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d112      	bne.n	8003d66 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d40:	4b26      	ldr	r3, [pc, #152]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6892      	ldr	r2, [r2, #8]
 8003d50:	0211      	lsls	r1, r2, #8
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6912      	ldr	r2, [r2, #16]
 8003d56:	0852      	lsrs	r2, r2, #1
 8003d58:	3a01      	subs	r2, #1
 8003d5a:	0552      	lsls	r2, r2, #21
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	491f      	ldr	r1, [pc, #124]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	610b      	str	r3, [r1, #16]
 8003d64:	e011      	b.n	8003d8a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d66:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6892      	ldr	r2, [r2, #8]
 8003d76:	0211      	lsls	r1, r2, #8
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6952      	ldr	r2, [r2, #20]
 8003d7c:	0852      	lsrs	r2, r2, #1
 8003d7e:	3a01      	subs	r2, #1
 8003d80:	0652      	lsls	r2, r2, #25
 8003d82:	430a      	orrs	r2, r1
 8003d84:	4915      	ldr	r1, [pc, #84]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d8a:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7fd fdb9 	bl	800190c <HAL_GetTick>
 8003d9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d9c:	e009      	b.n	8003db2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d9e:	f7fd fdb5 	bl	800190c <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d902      	bls.n	8003db2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	73fb      	strb	r3, [r7, #15]
          break;
 8003db0:	e005      	b.n	8003dbe <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ef      	beq.n	8003d9e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	4903      	ldr	r1, [pc, #12]	; (8003ddc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000

08003de0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dee:	4b68      	ldr	r3, [pc, #416]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d018      	beq.n	8003e2c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dfa:	4b65      	ldr	r3, [pc, #404]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0203 	and.w	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d10d      	bne.n	8003e26 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e12:	4b5f      	ldr	r3, [pc, #380]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
       ||
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d044      	beq.n	8003eb0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
 8003e2a:	e041      	b.n	8003eb0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d00c      	beq.n	8003e4e <RCCEx_PLLSAI2_Config+0x6e>
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d013      	beq.n	8003e60 <RCCEx_PLLSAI2_Config+0x80>
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d120      	bne.n	8003e7e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e3c:	4b54      	ldr	r3, [pc, #336]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11d      	bne.n	8003e84 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4c:	e01a      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e4e:	4b50      	ldr	r3, [pc, #320]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d116      	bne.n	8003e88 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e5e:	e013      	b.n	8003e88 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e60:	4b4b      	ldr	r3, [pc, #300]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10f      	bne.n	8003e8c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e6c:	4b48      	ldr	r3, [pc, #288]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e7c:	e006      	b.n	8003e8c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	73fb      	strb	r3, [r7, #15]
      break;
 8003e82:	e004      	b.n	8003e8e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003e84:	bf00      	nop
 8003e86:	e002      	b.n	8003e8e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003e88:	bf00      	nop
 8003e8a:	e000      	b.n	8003e8e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003e8c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10d      	bne.n	8003eb0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e94:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6819      	ldr	r1, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	4939      	ldr	r1, [pc, #228]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d167      	bne.n	8003f86 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003eb6:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a35      	ldr	r2, [pc, #212]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec2:	f7fd fd23 	bl	800190c <HAL_GetTick>
 8003ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ec8:	e009      	b.n	8003ede <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eca:	f7fd fd1f 	bl	800190c <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d902      	bls.n	8003ede <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	73fb      	strb	r3, [r7, #15]
        break;
 8003edc:	e005      	b.n	8003eea <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ede:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1ef      	bne.n	8003eca <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d14a      	bne.n	8003f86 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d111      	bne.n	8003f1a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ef6:	4b26      	ldr	r3, [pc, #152]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6892      	ldr	r2, [r2, #8]
 8003f06:	0211      	lsls	r1, r2, #8
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68d2      	ldr	r2, [r2, #12]
 8003f0c:	0912      	lsrs	r2, r2, #4
 8003f0e:	0452      	lsls	r2, r2, #17
 8003f10:	430a      	orrs	r2, r1
 8003f12:	491f      	ldr	r1, [pc, #124]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	614b      	str	r3, [r1, #20]
 8003f18:	e011      	b.n	8003f3e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6892      	ldr	r2, [r2, #8]
 8003f2a:	0211      	lsls	r1, r2, #8
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6912      	ldr	r2, [r2, #16]
 8003f30:	0852      	lsrs	r2, r2, #1
 8003f32:	3a01      	subs	r2, #1
 8003f34:	0652      	lsls	r2, r2, #25
 8003f36:	430a      	orrs	r2, r1
 8003f38:	4915      	ldr	r1, [pc, #84]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f3e:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fcdf 	bl	800190c <HAL_GetTick>
 8003f4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f50:	e009      	b.n	8003f66 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f52:	f7fd fcdb 	bl	800190c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d902      	bls.n	8003f66 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	73fb      	strb	r3, [r7, #15]
          break;
 8003f64:	e005      	b.n	8003f72 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f66:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0ef      	beq.n	8003f52 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40021000 	.word	0x40021000

08003f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e040      	b.n	8004028 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd fb36 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	; 0x24
 8003fc0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8c0 	bl	8004158 <UART_SetConfig>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e022      	b.n	8004028 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fb3e 	bl	800466c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ffe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800400e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fbc5 	bl	80047b0 <UART_CheckIdleState>
 8004026:	4603      	mov	r3, r0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	4613      	mov	r3, r2
 800403e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004044:	2b20      	cmp	r3, #32
 8004046:	f040 8081 	bne.w	800414c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_UART_Transmit+0x26>
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e079      	b.n	800414e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_UART_Transmit+0x38>
 8004064:	2302      	movs	r3, #2
 8004066:	e072      	b.n	800414e <HAL_UART_Transmit+0x11e>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2221      	movs	r2, #33	; 0x21
 800407a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800407c:	f7fd fc46 	bl	800190c <HAL_GetTick>
 8004080:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	88fa      	ldrh	r2, [r7, #6]
 800408e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409a:	d108      	bne.n	80040ae <HAL_UART_Transmit+0x7e>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d104      	bne.n	80040ae <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	e003      	b.n	80040b6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80040be:	e02d      	b.n	800411c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2200      	movs	r2, #0
 80040c8:	2180      	movs	r1, #128	; 0x80
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fbb5 	bl	800483a <UART_WaitOnFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e039      	b.n	800414e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10b      	bne.n	80040f8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	881a      	ldrh	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ec:	b292      	uxth	r2, r2
 80040ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	3302      	adds	r3, #2
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	e008      	b.n	800410a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	781a      	ldrb	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	b292      	uxth	r2, r2
 8004102:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3301      	adds	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1cb      	bne.n	80040c0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	2140      	movs	r1, #64	; 0x40
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fb81 	bl	800483a <UART_WaitOnFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e005      	b.n	800414e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800414c:	2302      	movs	r3, #2
  }
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004158:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800415c:	b088      	sub	sp, #32
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	4313      	orrs	r3, r2
 800417c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4bac      	ldr	r3, [pc, #688]	; (8004438 <UART_SetConfig+0x2e0>)
 8004186:	4013      	ands	r3, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	69f9      	ldr	r1, [r7, #28]
 800418e:	430b      	orrs	r3, r1
 8004190:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4aa2      	ldr	r2, [pc, #648]	; (800443c <UART_SetConfig+0x2e4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a99      	ldr	r2, [pc, #612]	; (8004440 <UART_SetConfig+0x2e8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d121      	bne.n	8004224 <UART_SetConfig+0xcc>
 80041e0:	4b98      	ldr	r3, [pc, #608]	; (8004444 <UART_SetConfig+0x2ec>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d816      	bhi.n	800421c <UART_SetConfig+0xc4>
 80041ee:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <UART_SetConfig+0x9c>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	08004205 	.word	0x08004205
 80041f8:	08004211 	.word	0x08004211
 80041fc:	0800420b 	.word	0x0800420b
 8004200:	08004217 	.word	0x08004217
 8004204:	2301      	movs	r3, #1
 8004206:	76fb      	strb	r3, [r7, #27]
 8004208:	e0e8      	b.n	80043dc <UART_SetConfig+0x284>
 800420a:	2302      	movs	r3, #2
 800420c:	76fb      	strb	r3, [r7, #27]
 800420e:	e0e5      	b.n	80043dc <UART_SetConfig+0x284>
 8004210:	2304      	movs	r3, #4
 8004212:	76fb      	strb	r3, [r7, #27]
 8004214:	e0e2      	b.n	80043dc <UART_SetConfig+0x284>
 8004216:	2308      	movs	r3, #8
 8004218:	76fb      	strb	r3, [r7, #27]
 800421a:	e0df      	b.n	80043dc <UART_SetConfig+0x284>
 800421c:	2310      	movs	r3, #16
 800421e:	76fb      	strb	r3, [r7, #27]
 8004220:	bf00      	nop
 8004222:	e0db      	b.n	80043dc <UART_SetConfig+0x284>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a87      	ldr	r2, [pc, #540]	; (8004448 <UART_SetConfig+0x2f0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d134      	bne.n	8004298 <UART_SetConfig+0x140>
 800422e:	4b85      	ldr	r3, [pc, #532]	; (8004444 <UART_SetConfig+0x2ec>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f003 030c 	and.w	r3, r3, #12
 8004238:	2b0c      	cmp	r3, #12
 800423a:	d829      	bhi.n	8004290 <UART_SetConfig+0x138>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <UART_SetConfig+0xec>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004279 	.word	0x08004279
 8004248:	08004291 	.word	0x08004291
 800424c:	08004291 	.word	0x08004291
 8004250:	08004291 	.word	0x08004291
 8004254:	08004285 	.word	0x08004285
 8004258:	08004291 	.word	0x08004291
 800425c:	08004291 	.word	0x08004291
 8004260:	08004291 	.word	0x08004291
 8004264:	0800427f 	.word	0x0800427f
 8004268:	08004291 	.word	0x08004291
 800426c:	08004291 	.word	0x08004291
 8004270:	08004291 	.word	0x08004291
 8004274:	0800428b 	.word	0x0800428b
 8004278:	2300      	movs	r3, #0
 800427a:	76fb      	strb	r3, [r7, #27]
 800427c:	e0ae      	b.n	80043dc <UART_SetConfig+0x284>
 800427e:	2302      	movs	r3, #2
 8004280:	76fb      	strb	r3, [r7, #27]
 8004282:	e0ab      	b.n	80043dc <UART_SetConfig+0x284>
 8004284:	2304      	movs	r3, #4
 8004286:	76fb      	strb	r3, [r7, #27]
 8004288:	e0a8      	b.n	80043dc <UART_SetConfig+0x284>
 800428a:	2308      	movs	r3, #8
 800428c:	76fb      	strb	r3, [r7, #27]
 800428e:	e0a5      	b.n	80043dc <UART_SetConfig+0x284>
 8004290:	2310      	movs	r3, #16
 8004292:	76fb      	strb	r3, [r7, #27]
 8004294:	bf00      	nop
 8004296:	e0a1      	b.n	80043dc <UART_SetConfig+0x284>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a6b      	ldr	r2, [pc, #428]	; (800444c <UART_SetConfig+0x2f4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d120      	bne.n	80042e4 <UART_SetConfig+0x18c>
 80042a2:	4b68      	ldr	r3, [pc, #416]	; (8004444 <UART_SetConfig+0x2ec>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d00f      	beq.n	80042d0 <UART_SetConfig+0x178>
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d802      	bhi.n	80042ba <UART_SetConfig+0x162>
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <UART_SetConfig+0x16c>
 80042b8:	e010      	b.n	80042dc <UART_SetConfig+0x184>
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d005      	beq.n	80042ca <UART_SetConfig+0x172>
 80042be:	2b30      	cmp	r3, #48	; 0x30
 80042c0:	d009      	beq.n	80042d6 <UART_SetConfig+0x17e>
 80042c2:	e00b      	b.n	80042dc <UART_SetConfig+0x184>
 80042c4:	2300      	movs	r3, #0
 80042c6:	76fb      	strb	r3, [r7, #27]
 80042c8:	e088      	b.n	80043dc <UART_SetConfig+0x284>
 80042ca:	2302      	movs	r3, #2
 80042cc:	76fb      	strb	r3, [r7, #27]
 80042ce:	e085      	b.n	80043dc <UART_SetConfig+0x284>
 80042d0:	2304      	movs	r3, #4
 80042d2:	76fb      	strb	r3, [r7, #27]
 80042d4:	e082      	b.n	80043dc <UART_SetConfig+0x284>
 80042d6:	2308      	movs	r3, #8
 80042d8:	76fb      	strb	r3, [r7, #27]
 80042da:	e07f      	b.n	80043dc <UART_SetConfig+0x284>
 80042dc:	2310      	movs	r3, #16
 80042de:	76fb      	strb	r3, [r7, #27]
 80042e0:	bf00      	nop
 80042e2:	e07b      	b.n	80043dc <UART_SetConfig+0x284>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a59      	ldr	r2, [pc, #356]	; (8004450 <UART_SetConfig+0x2f8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d120      	bne.n	8004330 <UART_SetConfig+0x1d8>
 80042ee:	4b55      	ldr	r3, [pc, #340]	; (8004444 <UART_SetConfig+0x2ec>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042f8:	2b40      	cmp	r3, #64	; 0x40
 80042fa:	d00f      	beq.n	800431c <UART_SetConfig+0x1c4>
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	d802      	bhi.n	8004306 <UART_SetConfig+0x1ae>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <UART_SetConfig+0x1b8>
 8004304:	e010      	b.n	8004328 <UART_SetConfig+0x1d0>
 8004306:	2b80      	cmp	r3, #128	; 0x80
 8004308:	d005      	beq.n	8004316 <UART_SetConfig+0x1be>
 800430a:	2bc0      	cmp	r3, #192	; 0xc0
 800430c:	d009      	beq.n	8004322 <UART_SetConfig+0x1ca>
 800430e:	e00b      	b.n	8004328 <UART_SetConfig+0x1d0>
 8004310:	2300      	movs	r3, #0
 8004312:	76fb      	strb	r3, [r7, #27]
 8004314:	e062      	b.n	80043dc <UART_SetConfig+0x284>
 8004316:	2302      	movs	r3, #2
 8004318:	76fb      	strb	r3, [r7, #27]
 800431a:	e05f      	b.n	80043dc <UART_SetConfig+0x284>
 800431c:	2304      	movs	r3, #4
 800431e:	76fb      	strb	r3, [r7, #27]
 8004320:	e05c      	b.n	80043dc <UART_SetConfig+0x284>
 8004322:	2308      	movs	r3, #8
 8004324:	76fb      	strb	r3, [r7, #27]
 8004326:	e059      	b.n	80043dc <UART_SetConfig+0x284>
 8004328:	2310      	movs	r3, #16
 800432a:	76fb      	strb	r3, [r7, #27]
 800432c:	bf00      	nop
 800432e:	e055      	b.n	80043dc <UART_SetConfig+0x284>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a47      	ldr	r2, [pc, #284]	; (8004454 <UART_SetConfig+0x2fc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d124      	bne.n	8004384 <UART_SetConfig+0x22c>
 800433a:	4b42      	ldr	r3, [pc, #264]	; (8004444 <UART_SetConfig+0x2ec>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004348:	d012      	beq.n	8004370 <UART_SetConfig+0x218>
 800434a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800434e:	d802      	bhi.n	8004356 <UART_SetConfig+0x1fe>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <UART_SetConfig+0x20c>
 8004354:	e012      	b.n	800437c <UART_SetConfig+0x224>
 8004356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435a:	d006      	beq.n	800436a <UART_SetConfig+0x212>
 800435c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004360:	d009      	beq.n	8004376 <UART_SetConfig+0x21e>
 8004362:	e00b      	b.n	800437c <UART_SetConfig+0x224>
 8004364:	2300      	movs	r3, #0
 8004366:	76fb      	strb	r3, [r7, #27]
 8004368:	e038      	b.n	80043dc <UART_SetConfig+0x284>
 800436a:	2302      	movs	r3, #2
 800436c:	76fb      	strb	r3, [r7, #27]
 800436e:	e035      	b.n	80043dc <UART_SetConfig+0x284>
 8004370:	2304      	movs	r3, #4
 8004372:	76fb      	strb	r3, [r7, #27]
 8004374:	e032      	b.n	80043dc <UART_SetConfig+0x284>
 8004376:	2308      	movs	r3, #8
 8004378:	76fb      	strb	r3, [r7, #27]
 800437a:	e02f      	b.n	80043dc <UART_SetConfig+0x284>
 800437c:	2310      	movs	r3, #16
 800437e:	76fb      	strb	r3, [r7, #27]
 8004380:	bf00      	nop
 8004382:	e02b      	b.n	80043dc <UART_SetConfig+0x284>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2c      	ldr	r2, [pc, #176]	; (800443c <UART_SetConfig+0x2e4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d124      	bne.n	80043d8 <UART_SetConfig+0x280>
 800438e:	4b2d      	ldr	r3, [pc, #180]	; (8004444 <UART_SetConfig+0x2ec>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439c:	d012      	beq.n	80043c4 <UART_SetConfig+0x26c>
 800439e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a2:	d802      	bhi.n	80043aa <UART_SetConfig+0x252>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <UART_SetConfig+0x260>
 80043a8:	e012      	b.n	80043d0 <UART_SetConfig+0x278>
 80043aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ae:	d006      	beq.n	80043be <UART_SetConfig+0x266>
 80043b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043b4:	d009      	beq.n	80043ca <UART_SetConfig+0x272>
 80043b6:	e00b      	b.n	80043d0 <UART_SetConfig+0x278>
 80043b8:	2300      	movs	r3, #0
 80043ba:	76fb      	strb	r3, [r7, #27]
 80043bc:	e00e      	b.n	80043dc <UART_SetConfig+0x284>
 80043be:	2302      	movs	r3, #2
 80043c0:	76fb      	strb	r3, [r7, #27]
 80043c2:	e00b      	b.n	80043dc <UART_SetConfig+0x284>
 80043c4:	2304      	movs	r3, #4
 80043c6:	76fb      	strb	r3, [r7, #27]
 80043c8:	e008      	b.n	80043dc <UART_SetConfig+0x284>
 80043ca:	2308      	movs	r3, #8
 80043cc:	76fb      	strb	r3, [r7, #27]
 80043ce:	e005      	b.n	80043dc <UART_SetConfig+0x284>
 80043d0:	2310      	movs	r3, #16
 80043d2:	76fb      	strb	r3, [r7, #27]
 80043d4:	bf00      	nop
 80043d6:	e001      	b.n	80043dc <UART_SetConfig+0x284>
 80043d8:	2310      	movs	r3, #16
 80043da:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a16      	ldr	r2, [pc, #88]	; (800443c <UART_SetConfig+0x2e4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	f040 8087 	bne.w	80044f6 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043e8:	7efb      	ldrb	r3, [r7, #27]
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d836      	bhi.n	800445c <UART_SetConfig+0x304>
 80043ee:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <UART_SetConfig+0x29c>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	08004419 	.word	0x08004419
 80043f8:	0800445d 	.word	0x0800445d
 80043fc:	08004421 	.word	0x08004421
 8004400:	0800445d 	.word	0x0800445d
 8004404:	08004427 	.word	0x08004427
 8004408:	0800445d 	.word	0x0800445d
 800440c:	0800445d 	.word	0x0800445d
 8004410:	0800445d 	.word	0x0800445d
 8004414:	0800442f 	.word	0x0800442f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004418:	f7ff f880 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 800441c:	6178      	str	r0, [r7, #20]
        break;
 800441e:	e022      	b.n	8004466 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004420:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <UART_SetConfig+0x300>)
 8004422:	617b      	str	r3, [r7, #20]
        break;
 8004424:	e01f      	b.n	8004466 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004426:	f7fe ffe3 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 800442a:	6178      	str	r0, [r7, #20]
        break;
 800442c:	e01b      	b.n	8004466 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800442e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004432:	617b      	str	r3, [r7, #20]
        break;
 8004434:	e017      	b.n	8004466 <UART_SetConfig+0x30e>
 8004436:	bf00      	nop
 8004438:	efff69f3 	.word	0xefff69f3
 800443c:	40008000 	.word	0x40008000
 8004440:	40013800 	.word	0x40013800
 8004444:	40021000 	.word	0x40021000
 8004448:	40004400 	.word	0x40004400
 800444c:	40004800 	.word	0x40004800
 8004450:	40004c00 	.word	0x40004c00
 8004454:	40005000 	.word	0x40005000
 8004458:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	76bb      	strb	r3, [r7, #26]
        break;
 8004464:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80f1 	beq.w	8004650 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	4413      	add	r3, r2
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	429a      	cmp	r2, r3
 800447c:	d305      	bcc.n	800448a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	429a      	cmp	r2, r3
 8004488:	d902      	bls.n	8004490 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	76bb      	strb	r3, [r7, #26]
 800448e:	e0df      	b.n	8004650 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	4619      	mov	r1, r3
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	f04f 0400 	mov.w	r4, #0
 80044a0:	0214      	lsls	r4, r2, #8
 80044a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80044a6:	020b      	lsls	r3, r1, #8
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6852      	ldr	r2, [r2, #4]
 80044ac:	0852      	lsrs	r2, r2, #1
 80044ae:	4611      	mov	r1, r2
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	eb13 0b01 	adds.w	fp, r3, r1
 80044b8:	eb44 0c02 	adc.w	ip, r4, r2
 80044bc:	4658      	mov	r0, fp
 80044be:	4661      	mov	r1, ip
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f04f 0400 	mov.w	r4, #0
 80044c8:	461a      	mov	r2, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	f7fc fbbc 	bl	8000c48 <__aeabi_uldivmod>
 80044d0:	4603      	mov	r3, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044dc:	d308      	bcc.n	80044f0 <UART_SetConfig+0x398>
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044e4:	d204      	bcs.n	80044f0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	60da      	str	r2, [r3, #12]
 80044ee:	e0af      	b.n	8004650 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	76bb      	strb	r3, [r7, #26]
 80044f4:	e0ac      	b.n	8004650 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fe:	d15b      	bne.n	80045b8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004500:	7efb      	ldrb	r3, [r7, #27]
 8004502:	2b08      	cmp	r3, #8
 8004504:	d827      	bhi.n	8004556 <UART_SetConfig+0x3fe>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0x3b4>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	08004531 	.word	0x08004531
 8004510:	08004539 	.word	0x08004539
 8004514:	08004541 	.word	0x08004541
 8004518:	08004557 	.word	0x08004557
 800451c:	08004547 	.word	0x08004547
 8004520:	08004557 	.word	0x08004557
 8004524:	08004557 	.word	0x08004557
 8004528:	08004557 	.word	0x08004557
 800452c:	0800454f 	.word	0x0800454f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004530:	f7fe fff4 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8004534:	6178      	str	r0, [r7, #20]
        break;
 8004536:	e013      	b.n	8004560 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004538:	f7ff f806 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 800453c:	6178      	str	r0, [r7, #20]
        break;
 800453e:	e00f      	b.n	8004560 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004540:	4b49      	ldr	r3, [pc, #292]	; (8004668 <UART_SetConfig+0x510>)
 8004542:	617b      	str	r3, [r7, #20]
        break;
 8004544:	e00c      	b.n	8004560 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004546:	f7fe ff53 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 800454a:	6178      	str	r0, [r7, #20]
        break;
 800454c:	e008      	b.n	8004560 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800454e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004552:	617b      	str	r3, [r7, #20]
        break;
 8004554:	e004      	b.n	8004560 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	76bb      	strb	r3, [r7, #26]
        break;
 800455e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d074      	beq.n	8004650 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	005a      	lsls	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	085b      	lsrs	r3, r3, #1
 8004570:	441a      	add	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	b29b      	uxth	r3, r3
 800457c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b0f      	cmp	r3, #15
 8004582:	d916      	bls.n	80045b2 <UART_SetConfig+0x45a>
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458a:	d212      	bcs.n	80045b2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	b29b      	uxth	r3, r3
 8004590:	f023 030f 	bic.w	r3, r3, #15
 8004594:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	b29b      	uxth	r3, r3
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	89fb      	ldrh	r3, [r7, #14]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	89fa      	ldrh	r2, [r7, #14]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	e04e      	b.n	8004650 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	76bb      	strb	r3, [r7, #26]
 80045b6:	e04b      	b.n	8004650 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045b8:	7efb      	ldrb	r3, [r7, #27]
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d827      	bhi.n	800460e <UART_SetConfig+0x4b6>
 80045be:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <UART_SetConfig+0x46c>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	0800460f 	.word	0x0800460f
 80045d4:	080045ff 	.word	0x080045ff
 80045d8:	0800460f 	.word	0x0800460f
 80045dc:	0800460f 	.word	0x0800460f
 80045e0:	0800460f 	.word	0x0800460f
 80045e4:	08004607 	.word	0x08004607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e8:	f7fe ff98 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 80045ec:	6178      	str	r0, [r7, #20]
        break;
 80045ee:	e013      	b.n	8004618 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f0:	f7fe ffaa 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 80045f4:	6178      	str	r0, [r7, #20]
        break;
 80045f6:	e00f      	b.n	8004618 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f8:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <UART_SetConfig+0x510>)
 80045fa:	617b      	str	r3, [r7, #20]
        break;
 80045fc:	e00c      	b.n	8004618 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fe:	f7fe fef7 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004602:	6178      	str	r0, [r7, #20]
        break;
 8004604:	e008      	b.n	8004618 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460a:	617b      	str	r3, [r7, #20]
        break;
 800460c:	e004      	b.n	8004618 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	76bb      	strb	r3, [r7, #26]
        break;
 8004616:	bf00      	nop
    }

    if (pclk != 0U)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d018      	beq.n	8004650 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	085a      	lsrs	r2, r3, #1
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	441a      	add	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	b29b      	uxth	r3, r3
 8004632:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b0f      	cmp	r3, #15
 8004638:	d908      	bls.n	800464c <UART_SetConfig+0x4f4>
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004640:	d204      	bcs.n	800464c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	e001      	b.n	8004650 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800465c:	7ebb      	ldrb	r3, [r7, #26]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004668:	00f42400 	.word	0x00f42400

0800466c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01a      	beq.n	8004782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800476a:	d10a      	bne.n	8004782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	605a      	str	r2, [r3, #4]
  }
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80047be:	f7fd f8a5 	bl	800190c <HAL_GetTick>
 80047c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d10e      	bne.n	80047f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f82a 	bl	800483a <UART_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e020      	b.n	8004832 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d10e      	bne.n	800481c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f814 	bl	800483a <UART_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e00a      	b.n	8004832 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484a:	e05d      	b.n	8004908 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004852:	d059      	beq.n	8004908 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004854:	f7fd f85a 	bl	800190c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	429a      	cmp	r2, r3
 8004862:	d302      	bcc.n	800486a <UART_WaitOnFlagUntilTimeout+0x30>
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11b      	bne.n	80048a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004878:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e042      	b.n	8004928 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d02b      	beq.n	8004908 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048be:	d123      	bne.n	8004908 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048d8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e00f      	b.n	8004928 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4013      	ands	r3, r2
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	429a      	cmp	r2, r3
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	429a      	cmp	r2, r3
 8004924:	d092      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <__errno>:
 8004930:	4b01      	ldr	r3, [pc, #4]	; (8004938 <__errno+0x8>)
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	2000000c 	.word	0x2000000c

0800493c <__libc_init_array>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	4e0d      	ldr	r6, [pc, #52]	; (8004974 <__libc_init_array+0x38>)
 8004940:	4c0d      	ldr	r4, [pc, #52]	; (8004978 <__libc_init_array+0x3c>)
 8004942:	1ba4      	subs	r4, r4, r6
 8004944:	10a4      	asrs	r4, r4, #2
 8004946:	2500      	movs	r5, #0
 8004948:	42a5      	cmp	r5, r4
 800494a:	d109      	bne.n	8004960 <__libc_init_array+0x24>
 800494c:	4e0b      	ldr	r6, [pc, #44]	; (800497c <__libc_init_array+0x40>)
 800494e:	4c0c      	ldr	r4, [pc, #48]	; (8004980 <__libc_init_array+0x44>)
 8004950:	f002 f85e 	bl	8006a10 <_init>
 8004954:	1ba4      	subs	r4, r4, r6
 8004956:	10a4      	asrs	r4, r4, #2
 8004958:	2500      	movs	r5, #0
 800495a:	42a5      	cmp	r5, r4
 800495c:	d105      	bne.n	800496a <__libc_init_array+0x2e>
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004964:	4798      	blx	r3
 8004966:	3501      	adds	r5, #1
 8004968:	e7ee      	b.n	8004948 <__libc_init_array+0xc>
 800496a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800496e:	4798      	blx	r3
 8004970:	3501      	adds	r5, #1
 8004972:	e7f2      	b.n	800495a <__libc_init_array+0x1e>
 8004974:	08006d10 	.word	0x08006d10
 8004978:	08006d10 	.word	0x08006d10
 800497c:	08006d10 	.word	0x08006d10
 8004980:	08006d14 	.word	0x08006d14

08004984 <memset>:
 8004984:	4402      	add	r2, r0
 8004986:	4603      	mov	r3, r0
 8004988:	4293      	cmp	r3, r2
 800498a:	d100      	bne.n	800498e <memset+0xa>
 800498c:	4770      	bx	lr
 800498e:	f803 1b01 	strb.w	r1, [r3], #1
 8004992:	e7f9      	b.n	8004988 <memset+0x4>

08004994 <__cvt>:
 8004994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	ec55 4b10 	vmov	r4, r5, d0
 800499c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800499e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80049a2:	2d00      	cmp	r5, #0
 80049a4:	460e      	mov	r6, r1
 80049a6:	4691      	mov	r9, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	bfb8      	it	lt
 80049ac:	4622      	movlt	r2, r4
 80049ae:	462b      	mov	r3, r5
 80049b0:	f027 0720 	bic.w	r7, r7, #32
 80049b4:	bfbb      	ittet	lt
 80049b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80049ba:	461d      	movlt	r5, r3
 80049bc:	2300      	movge	r3, #0
 80049be:	232d      	movlt	r3, #45	; 0x2d
 80049c0:	bfb8      	it	lt
 80049c2:	4614      	movlt	r4, r2
 80049c4:	2f46      	cmp	r7, #70	; 0x46
 80049c6:	700b      	strb	r3, [r1, #0]
 80049c8:	d004      	beq.n	80049d4 <__cvt+0x40>
 80049ca:	2f45      	cmp	r7, #69	; 0x45
 80049cc:	d100      	bne.n	80049d0 <__cvt+0x3c>
 80049ce:	3601      	adds	r6, #1
 80049d0:	2102      	movs	r1, #2
 80049d2:	e000      	b.n	80049d6 <__cvt+0x42>
 80049d4:	2103      	movs	r1, #3
 80049d6:	ab03      	add	r3, sp, #12
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	ab02      	add	r3, sp, #8
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	4632      	mov	r2, r6
 80049e0:	4653      	mov	r3, sl
 80049e2:	ec45 4b10 	vmov	d0, r4, r5
 80049e6:	f000 fcdf 	bl	80053a8 <_dtoa_r>
 80049ea:	2f47      	cmp	r7, #71	; 0x47
 80049ec:	4680      	mov	r8, r0
 80049ee:	d102      	bne.n	80049f6 <__cvt+0x62>
 80049f0:	f019 0f01 	tst.w	r9, #1
 80049f4:	d026      	beq.n	8004a44 <__cvt+0xb0>
 80049f6:	2f46      	cmp	r7, #70	; 0x46
 80049f8:	eb08 0906 	add.w	r9, r8, r6
 80049fc:	d111      	bne.n	8004a22 <__cvt+0x8e>
 80049fe:	f898 3000 	ldrb.w	r3, [r8]
 8004a02:	2b30      	cmp	r3, #48	; 0x30
 8004a04:	d10a      	bne.n	8004a1c <__cvt+0x88>
 8004a06:	2200      	movs	r2, #0
 8004a08:	2300      	movs	r3, #0
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	f7fc f85b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a12:	b918      	cbnz	r0, 8004a1c <__cvt+0x88>
 8004a14:	f1c6 0601 	rsb	r6, r6, #1
 8004a18:	f8ca 6000 	str.w	r6, [sl]
 8004a1c:	f8da 3000 	ldr.w	r3, [sl]
 8004a20:	4499      	add	r9, r3
 8004a22:	2200      	movs	r2, #0
 8004a24:	2300      	movs	r3, #0
 8004a26:	4620      	mov	r0, r4
 8004a28:	4629      	mov	r1, r5
 8004a2a:	f7fc f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a2e:	b938      	cbnz	r0, 8004a40 <__cvt+0xac>
 8004a30:	2230      	movs	r2, #48	; 0x30
 8004a32:	9b03      	ldr	r3, [sp, #12]
 8004a34:	454b      	cmp	r3, r9
 8004a36:	d205      	bcs.n	8004a44 <__cvt+0xb0>
 8004a38:	1c59      	adds	r1, r3, #1
 8004a3a:	9103      	str	r1, [sp, #12]
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e7f8      	b.n	8004a32 <__cvt+0x9e>
 8004a40:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a44:	9b03      	ldr	r3, [sp, #12]
 8004a46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a48:	eba3 0308 	sub.w	r3, r3, r8
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	b004      	add	sp, #16
 8004a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a56 <__exponent>:
 8004a56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	bfba      	itte	lt
 8004a5e:	4249      	neglt	r1, r1
 8004a60:	232d      	movlt	r3, #45	; 0x2d
 8004a62:	232b      	movge	r3, #43	; 0x2b
 8004a64:	2909      	cmp	r1, #9
 8004a66:	f804 2b02 	strb.w	r2, [r4], #2
 8004a6a:	7043      	strb	r3, [r0, #1]
 8004a6c:	dd20      	ble.n	8004ab0 <__exponent+0x5a>
 8004a6e:	f10d 0307 	add.w	r3, sp, #7
 8004a72:	461f      	mov	r7, r3
 8004a74:	260a      	movs	r6, #10
 8004a76:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a7a:	fb06 1115 	mls	r1, r6, r5, r1
 8004a7e:	3130      	adds	r1, #48	; 0x30
 8004a80:	2d09      	cmp	r5, #9
 8004a82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a86:	f103 32ff 	add.w	r2, r3, #4294967295
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	dc09      	bgt.n	8004aa2 <__exponent+0x4c>
 8004a8e:	3130      	adds	r1, #48	; 0x30
 8004a90:	3b02      	subs	r3, #2
 8004a92:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a96:	42bb      	cmp	r3, r7
 8004a98:	4622      	mov	r2, r4
 8004a9a:	d304      	bcc.n	8004aa6 <__exponent+0x50>
 8004a9c:	1a10      	subs	r0, r2, r0
 8004a9e:	b003      	add	sp, #12
 8004aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	e7e7      	b.n	8004a76 <__exponent+0x20>
 8004aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aaa:	f804 2b01 	strb.w	r2, [r4], #1
 8004aae:	e7f2      	b.n	8004a96 <__exponent+0x40>
 8004ab0:	2330      	movs	r3, #48	; 0x30
 8004ab2:	4419      	add	r1, r3
 8004ab4:	7083      	strb	r3, [r0, #2]
 8004ab6:	1d02      	adds	r2, r0, #4
 8004ab8:	70c1      	strb	r1, [r0, #3]
 8004aba:	e7ef      	b.n	8004a9c <__exponent+0x46>

08004abc <_printf_float>:
 8004abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac0:	b08d      	sub	sp, #52	; 0x34
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004ac8:	4616      	mov	r6, r2
 8004aca:	461f      	mov	r7, r3
 8004acc:	4605      	mov	r5, r0
 8004ace:	f001 fa23 	bl	8005f18 <_localeconv_r>
 8004ad2:	6803      	ldr	r3, [r0, #0]
 8004ad4:	9304      	str	r3, [sp, #16]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fb fb7a 	bl	80001d0 <strlen>
 8004adc:	2300      	movs	r3, #0
 8004ade:	930a      	str	r3, [sp, #40]	; 0x28
 8004ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae4:	9005      	str	r0, [sp, #20]
 8004ae6:	3307      	adds	r3, #7
 8004ae8:	f023 0307 	bic.w	r3, r3, #7
 8004aec:	f103 0208 	add.w	r2, r3, #8
 8004af0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004af4:	f8d4 b000 	ldr.w	fp, [r4]
 8004af8:	f8c8 2000 	str.w	r2, [r8]
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b04:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004b08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b0c:	9307      	str	r3, [sp, #28]
 8004b0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b12:	f04f 32ff 	mov.w	r2, #4294967295
 8004b16:	4ba7      	ldr	r3, [pc, #668]	; (8004db4 <_printf_float+0x2f8>)
 8004b18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b1c:	f7fc f806 	bl	8000b2c <__aeabi_dcmpun>
 8004b20:	bb70      	cbnz	r0, 8004b80 <_printf_float+0xc4>
 8004b22:	f04f 32ff 	mov.w	r2, #4294967295
 8004b26:	4ba3      	ldr	r3, [pc, #652]	; (8004db4 <_printf_float+0x2f8>)
 8004b28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b2c:	f7fb ffe0 	bl	8000af0 <__aeabi_dcmple>
 8004b30:	bb30      	cbnz	r0, 8004b80 <_printf_float+0xc4>
 8004b32:	2200      	movs	r2, #0
 8004b34:	2300      	movs	r3, #0
 8004b36:	4640      	mov	r0, r8
 8004b38:	4649      	mov	r1, r9
 8004b3a:	f7fb ffcf 	bl	8000adc <__aeabi_dcmplt>
 8004b3e:	b110      	cbz	r0, 8004b46 <_printf_float+0x8a>
 8004b40:	232d      	movs	r3, #45	; 0x2d
 8004b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b46:	4a9c      	ldr	r2, [pc, #624]	; (8004db8 <_printf_float+0x2fc>)
 8004b48:	4b9c      	ldr	r3, [pc, #624]	; (8004dbc <_printf_float+0x300>)
 8004b4a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004b4e:	bf8c      	ite	hi
 8004b50:	4690      	movhi	r8, r2
 8004b52:	4698      	movls	r8, r3
 8004b54:	2303      	movs	r3, #3
 8004b56:	f02b 0204 	bic.w	r2, fp, #4
 8004b5a:	6123      	str	r3, [r4, #16]
 8004b5c:	6022      	str	r2, [r4, #0]
 8004b5e:	f04f 0900 	mov.w	r9, #0
 8004b62:	9700      	str	r7, [sp, #0]
 8004b64:	4633      	mov	r3, r6
 8004b66:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 f9e6 	bl	8004f3c <_printf_common>
 8004b70:	3001      	adds	r0, #1
 8004b72:	f040 808d 	bne.w	8004c90 <_printf_float+0x1d4>
 8004b76:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7a:	b00d      	add	sp, #52	; 0x34
 8004b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b80:	4642      	mov	r2, r8
 8004b82:	464b      	mov	r3, r9
 8004b84:	4640      	mov	r0, r8
 8004b86:	4649      	mov	r1, r9
 8004b88:	f7fb ffd0 	bl	8000b2c <__aeabi_dcmpun>
 8004b8c:	b110      	cbz	r0, 8004b94 <_printf_float+0xd8>
 8004b8e:	4a8c      	ldr	r2, [pc, #560]	; (8004dc0 <_printf_float+0x304>)
 8004b90:	4b8c      	ldr	r3, [pc, #560]	; (8004dc4 <_printf_float+0x308>)
 8004b92:	e7da      	b.n	8004b4a <_printf_float+0x8e>
 8004b94:	6861      	ldr	r1, [r4, #4]
 8004b96:	1c4b      	adds	r3, r1, #1
 8004b98:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004b9c:	a80a      	add	r0, sp, #40	; 0x28
 8004b9e:	d13e      	bne.n	8004c1e <_printf_float+0x162>
 8004ba0:	2306      	movs	r3, #6
 8004ba2:	6063      	str	r3, [r4, #4]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004baa:	ab09      	add	r3, sp, #36	; 0x24
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	ec49 8b10 	vmov	d0, r8, r9
 8004bb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004bb6:	6022      	str	r2, [r4, #0]
 8004bb8:	f8cd a004 	str.w	sl, [sp, #4]
 8004bbc:	6861      	ldr	r1, [r4, #4]
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f7ff fee8 	bl	8004994 <__cvt>
 8004bc4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004bc8:	2b47      	cmp	r3, #71	; 0x47
 8004bca:	4680      	mov	r8, r0
 8004bcc:	d109      	bne.n	8004be2 <_printf_float+0x126>
 8004bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd0:	1cd8      	adds	r0, r3, #3
 8004bd2:	db02      	blt.n	8004bda <_printf_float+0x11e>
 8004bd4:	6862      	ldr	r2, [r4, #4]
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	dd47      	ble.n	8004c6a <_printf_float+0x1ae>
 8004bda:	f1aa 0a02 	sub.w	sl, sl, #2
 8004bde:	fa5f fa8a 	uxtb.w	sl, sl
 8004be2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004be6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004be8:	d824      	bhi.n	8004c34 <_printf_float+0x178>
 8004bea:	3901      	subs	r1, #1
 8004bec:	4652      	mov	r2, sl
 8004bee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bf2:	9109      	str	r1, [sp, #36]	; 0x24
 8004bf4:	f7ff ff2f 	bl	8004a56 <__exponent>
 8004bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bfa:	1813      	adds	r3, r2, r0
 8004bfc:	2a01      	cmp	r2, #1
 8004bfe:	4681      	mov	r9, r0
 8004c00:	6123      	str	r3, [r4, #16]
 8004c02:	dc02      	bgt.n	8004c0a <_printf_float+0x14e>
 8004c04:	6822      	ldr	r2, [r4, #0]
 8004c06:	07d1      	lsls	r1, r2, #31
 8004c08:	d501      	bpl.n	8004c0e <_printf_float+0x152>
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	6123      	str	r3, [r4, #16]
 8004c0e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0a5      	beq.n	8004b62 <_printf_float+0xa6>
 8004c16:	232d      	movs	r3, #45	; 0x2d
 8004c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c1c:	e7a1      	b.n	8004b62 <_printf_float+0xa6>
 8004c1e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004c22:	f000 8177 	beq.w	8004f14 <_printf_float+0x458>
 8004c26:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004c2a:	d1bb      	bne.n	8004ba4 <_printf_float+0xe8>
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	d1b9      	bne.n	8004ba4 <_printf_float+0xe8>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e7b6      	b.n	8004ba2 <_printf_float+0xe6>
 8004c34:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004c38:	d119      	bne.n	8004c6e <_printf_float+0x1b2>
 8004c3a:	2900      	cmp	r1, #0
 8004c3c:	6863      	ldr	r3, [r4, #4]
 8004c3e:	dd0c      	ble.n	8004c5a <_printf_float+0x19e>
 8004c40:	6121      	str	r1, [r4, #16]
 8004c42:	b913      	cbnz	r3, 8004c4a <_printf_float+0x18e>
 8004c44:	6822      	ldr	r2, [r4, #0]
 8004c46:	07d2      	lsls	r2, r2, #31
 8004c48:	d502      	bpl.n	8004c50 <_printf_float+0x194>
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	440b      	add	r3, r1
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c52:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c54:	f04f 0900 	mov.w	r9, #0
 8004c58:	e7d9      	b.n	8004c0e <_printf_float+0x152>
 8004c5a:	b913      	cbnz	r3, 8004c62 <_printf_float+0x1a6>
 8004c5c:	6822      	ldr	r2, [r4, #0]
 8004c5e:	07d0      	lsls	r0, r2, #31
 8004c60:	d501      	bpl.n	8004c66 <_printf_float+0x1aa>
 8004c62:	3302      	adds	r3, #2
 8004c64:	e7f3      	b.n	8004c4e <_printf_float+0x192>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e7f1      	b.n	8004c4e <_printf_float+0x192>
 8004c6a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004c6e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004c72:	4293      	cmp	r3, r2
 8004c74:	db05      	blt.n	8004c82 <_printf_float+0x1c6>
 8004c76:	6822      	ldr	r2, [r4, #0]
 8004c78:	6123      	str	r3, [r4, #16]
 8004c7a:	07d1      	lsls	r1, r2, #31
 8004c7c:	d5e8      	bpl.n	8004c50 <_printf_float+0x194>
 8004c7e:	3301      	adds	r3, #1
 8004c80:	e7e5      	b.n	8004c4e <_printf_float+0x192>
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bfd4      	ite	le
 8004c86:	f1c3 0302 	rsble	r3, r3, #2
 8004c8a:	2301      	movgt	r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	e7de      	b.n	8004c4e <_printf_float+0x192>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	055a      	lsls	r2, r3, #21
 8004c94:	d407      	bmi.n	8004ca6 <_printf_float+0x1ea>
 8004c96:	6923      	ldr	r3, [r4, #16]
 8004c98:	4642      	mov	r2, r8
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d12b      	bne.n	8004cfc <_printf_float+0x240>
 8004ca4:	e767      	b.n	8004b76 <_printf_float+0xba>
 8004ca6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004caa:	f240 80dc 	bls.w	8004e66 <_printf_float+0x3aa>
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cb6:	f7fb ff07 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d033      	beq.n	8004d26 <_printf_float+0x26a>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	4a41      	ldr	r2, [pc, #260]	; (8004dc8 <_printf_float+0x30c>)
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	47b8      	blx	r7
 8004cc8:	3001      	adds	r0, #1
 8004cca:	f43f af54 	beq.w	8004b76 <_printf_float+0xba>
 8004cce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	db02      	blt.n	8004cdc <_printf_float+0x220>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	07d8      	lsls	r0, r3, #31
 8004cda:	d50f      	bpl.n	8004cfc <_printf_float+0x240>
 8004cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f af45 	beq.w	8004b76 <_printf_float+0xba>
 8004cec:	f04f 0800 	mov.w	r8, #0
 8004cf0:	f104 091a 	add.w	r9, r4, #26
 8004cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	4543      	cmp	r3, r8
 8004cfa:	dc09      	bgt.n	8004d10 <_printf_float+0x254>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	079b      	lsls	r3, r3, #30
 8004d00:	f100 8103 	bmi.w	8004f0a <_printf_float+0x44e>
 8004d04:	68e0      	ldr	r0, [r4, #12]
 8004d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d08:	4298      	cmp	r0, r3
 8004d0a:	bfb8      	it	lt
 8004d0c:	4618      	movlt	r0, r3
 8004d0e:	e734      	b.n	8004b7a <_printf_float+0xbe>
 8004d10:	2301      	movs	r3, #1
 8004d12:	464a      	mov	r2, r9
 8004d14:	4631      	mov	r1, r6
 8004d16:	4628      	mov	r0, r5
 8004d18:	47b8      	blx	r7
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	f43f af2b 	beq.w	8004b76 <_printf_float+0xba>
 8004d20:	f108 0801 	add.w	r8, r8, #1
 8004d24:	e7e6      	b.n	8004cf4 <_printf_float+0x238>
 8004d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	dc2b      	bgt.n	8004d84 <_printf_float+0x2c8>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4a26      	ldr	r2, [pc, #152]	; (8004dc8 <_printf_float+0x30c>)
 8004d30:	4631      	mov	r1, r6
 8004d32:	4628      	mov	r0, r5
 8004d34:	47b8      	blx	r7
 8004d36:	3001      	adds	r0, #1
 8004d38:	f43f af1d 	beq.w	8004b76 <_printf_float+0xba>
 8004d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d3e:	b923      	cbnz	r3, 8004d4a <_printf_float+0x28e>
 8004d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d42:	b913      	cbnz	r3, 8004d4a <_printf_float+0x28e>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	07d9      	lsls	r1, r3, #31
 8004d48:	d5d8      	bpl.n	8004cfc <_printf_float+0x240>
 8004d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4628      	mov	r0, r5
 8004d52:	47b8      	blx	r7
 8004d54:	3001      	adds	r0, #1
 8004d56:	f43f af0e 	beq.w	8004b76 <_printf_float+0xba>
 8004d5a:	f04f 0900 	mov.w	r9, #0
 8004d5e:	f104 0a1a 	add.w	sl, r4, #26
 8004d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d64:	425b      	negs	r3, r3
 8004d66:	454b      	cmp	r3, r9
 8004d68:	dc01      	bgt.n	8004d6e <_printf_float+0x2b2>
 8004d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d6c:	e794      	b.n	8004c98 <_printf_float+0x1dc>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	4652      	mov	r2, sl
 8004d72:	4631      	mov	r1, r6
 8004d74:	4628      	mov	r0, r5
 8004d76:	47b8      	blx	r7
 8004d78:	3001      	adds	r0, #1
 8004d7a:	f43f aefc 	beq.w	8004b76 <_printf_float+0xba>
 8004d7e:	f109 0901 	add.w	r9, r9, #1
 8004d82:	e7ee      	b.n	8004d62 <_printf_float+0x2a6>
 8004d84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	bfa8      	it	ge
 8004d8c:	461a      	movge	r2, r3
 8004d8e:	2a00      	cmp	r2, #0
 8004d90:	4691      	mov	r9, r2
 8004d92:	dd07      	ble.n	8004da4 <_printf_float+0x2e8>
 8004d94:	4613      	mov	r3, r2
 8004d96:	4631      	mov	r1, r6
 8004d98:	4642      	mov	r2, r8
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b8      	blx	r7
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f43f aee9 	beq.w	8004b76 <_printf_float+0xba>
 8004da4:	f104 031a 	add.w	r3, r4, #26
 8004da8:	f04f 0b00 	mov.w	fp, #0
 8004dac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004db0:	9306      	str	r3, [sp, #24]
 8004db2:	e015      	b.n	8004de0 <_printf_float+0x324>
 8004db4:	7fefffff 	.word	0x7fefffff
 8004db8:	08006aac 	.word	0x08006aac
 8004dbc:	08006aa8 	.word	0x08006aa8
 8004dc0:	08006ab4 	.word	0x08006ab4
 8004dc4:	08006ab0 	.word	0x08006ab0
 8004dc8:	08006ab8 	.word	0x08006ab8
 8004dcc:	2301      	movs	r3, #1
 8004dce:	9a06      	ldr	r2, [sp, #24]
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	47b8      	blx	r7
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	f43f aecd 	beq.w	8004b76 <_printf_float+0xba>
 8004ddc:	f10b 0b01 	add.w	fp, fp, #1
 8004de0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004de4:	ebaa 0309 	sub.w	r3, sl, r9
 8004de8:	455b      	cmp	r3, fp
 8004dea:	dcef      	bgt.n	8004dcc <_printf_float+0x310>
 8004dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004df0:	429a      	cmp	r2, r3
 8004df2:	44d0      	add	r8, sl
 8004df4:	db15      	blt.n	8004e22 <_printf_float+0x366>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	07da      	lsls	r2, r3, #31
 8004dfa:	d412      	bmi.n	8004e22 <_printf_float+0x366>
 8004dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e00:	eba3 020a 	sub.w	r2, r3, sl
 8004e04:	eba3 0a01 	sub.w	sl, r3, r1
 8004e08:	4592      	cmp	sl, r2
 8004e0a:	bfa8      	it	ge
 8004e0c:	4692      	movge	sl, r2
 8004e0e:	f1ba 0f00 	cmp.w	sl, #0
 8004e12:	dc0e      	bgt.n	8004e32 <_printf_float+0x376>
 8004e14:	f04f 0800 	mov.w	r8, #0
 8004e18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004e1c:	f104 091a 	add.w	r9, r4, #26
 8004e20:	e019      	b.n	8004e56 <_printf_float+0x39a>
 8004e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e26:	4631      	mov	r1, r6
 8004e28:	4628      	mov	r0, r5
 8004e2a:	47b8      	blx	r7
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d1e5      	bne.n	8004dfc <_printf_float+0x340>
 8004e30:	e6a1      	b.n	8004b76 <_printf_float+0xba>
 8004e32:	4653      	mov	r3, sl
 8004e34:	4642      	mov	r2, r8
 8004e36:	4631      	mov	r1, r6
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b8      	blx	r7
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d1e9      	bne.n	8004e14 <_printf_float+0x358>
 8004e40:	e699      	b.n	8004b76 <_printf_float+0xba>
 8004e42:	2301      	movs	r3, #1
 8004e44:	464a      	mov	r2, r9
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b8      	blx	r7
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	f43f ae92 	beq.w	8004b76 <_printf_float+0xba>
 8004e52:	f108 0801 	add.w	r8, r8, #1
 8004e56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	eba3 030a 	sub.w	r3, r3, sl
 8004e60:	4543      	cmp	r3, r8
 8004e62:	dcee      	bgt.n	8004e42 <_printf_float+0x386>
 8004e64:	e74a      	b.n	8004cfc <_printf_float+0x240>
 8004e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e68:	2a01      	cmp	r2, #1
 8004e6a:	dc01      	bgt.n	8004e70 <_printf_float+0x3b4>
 8004e6c:	07db      	lsls	r3, r3, #31
 8004e6e:	d53a      	bpl.n	8004ee6 <_printf_float+0x42a>
 8004e70:	2301      	movs	r3, #1
 8004e72:	4642      	mov	r2, r8
 8004e74:	4631      	mov	r1, r6
 8004e76:	4628      	mov	r0, r5
 8004e78:	47b8      	blx	r7
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	f43f ae7b 	beq.w	8004b76 <_printf_float+0xba>
 8004e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e84:	4631      	mov	r1, r6
 8004e86:	4628      	mov	r0, r5
 8004e88:	47b8      	blx	r7
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	f108 0801 	add.w	r8, r8, #1
 8004e90:	f43f ae71 	beq.w	8004b76 <_printf_float+0xba>
 8004e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e96:	2200      	movs	r2, #0
 8004e98:	f103 3aff 	add.w	sl, r3, #4294967295
 8004e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f7fb fe11 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ea6:	b9c8      	cbnz	r0, 8004edc <_printf_float+0x420>
 8004ea8:	4653      	mov	r3, sl
 8004eaa:	4642      	mov	r2, r8
 8004eac:	4631      	mov	r1, r6
 8004eae:	4628      	mov	r0, r5
 8004eb0:	47b8      	blx	r7
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d10e      	bne.n	8004ed4 <_printf_float+0x418>
 8004eb6:	e65e      	b.n	8004b76 <_printf_float+0xba>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	4652      	mov	r2, sl
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	47b8      	blx	r7
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	f43f ae57 	beq.w	8004b76 <_printf_float+0xba>
 8004ec8:	f108 0801 	add.w	r8, r8, #1
 8004ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	4543      	cmp	r3, r8
 8004ed2:	dcf1      	bgt.n	8004eb8 <_printf_float+0x3fc>
 8004ed4:	464b      	mov	r3, r9
 8004ed6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004eda:	e6de      	b.n	8004c9a <_printf_float+0x1de>
 8004edc:	f04f 0800 	mov.w	r8, #0
 8004ee0:	f104 0a1a 	add.w	sl, r4, #26
 8004ee4:	e7f2      	b.n	8004ecc <_printf_float+0x410>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e7df      	b.n	8004eaa <_printf_float+0x3ee>
 8004eea:	2301      	movs	r3, #1
 8004eec:	464a      	mov	r2, r9
 8004eee:	4631      	mov	r1, r6
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	47b8      	blx	r7
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	f43f ae3e 	beq.w	8004b76 <_printf_float+0xba>
 8004efa:	f108 0801 	add.w	r8, r8, #1
 8004efe:	68e3      	ldr	r3, [r4, #12]
 8004f00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	4543      	cmp	r3, r8
 8004f06:	dcf0      	bgt.n	8004eea <_printf_float+0x42e>
 8004f08:	e6fc      	b.n	8004d04 <_printf_float+0x248>
 8004f0a:	f04f 0800 	mov.w	r8, #0
 8004f0e:	f104 0919 	add.w	r9, r4, #25
 8004f12:	e7f4      	b.n	8004efe <_printf_float+0x442>
 8004f14:	2900      	cmp	r1, #0
 8004f16:	f43f ae8b 	beq.w	8004c30 <_printf_float+0x174>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004f20:	ab09      	add	r3, sp, #36	; 0x24
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	ec49 8b10 	vmov	d0, r8, r9
 8004f28:	6022      	str	r2, [r4, #0]
 8004f2a:	f8cd a004 	str.w	sl, [sp, #4]
 8004f2e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f32:	4628      	mov	r0, r5
 8004f34:	f7ff fd2e 	bl	8004994 <__cvt>
 8004f38:	4680      	mov	r8, r0
 8004f3a:	e648      	b.n	8004bce <_printf_float+0x112>

08004f3c <_printf_common>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	4691      	mov	r9, r2
 8004f42:	461f      	mov	r7, r3
 8004f44:	688a      	ldr	r2, [r1, #8]
 8004f46:	690b      	ldr	r3, [r1, #16]
 8004f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	bfb8      	it	lt
 8004f50:	4613      	movlt	r3, r2
 8004f52:	f8c9 3000 	str.w	r3, [r9]
 8004f56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	b112      	cbz	r2, 8004f66 <_printf_common+0x2a>
 8004f60:	3301      	adds	r3, #1
 8004f62:	f8c9 3000 	str.w	r3, [r9]
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	0699      	lsls	r1, r3, #26
 8004f6a:	bf42      	ittt	mi
 8004f6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f70:	3302      	addmi	r3, #2
 8004f72:	f8c9 3000 	strmi.w	r3, [r9]
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	f015 0506 	ands.w	r5, r5, #6
 8004f7c:	d107      	bne.n	8004f8e <_printf_common+0x52>
 8004f7e:	f104 0a19 	add.w	sl, r4, #25
 8004f82:	68e3      	ldr	r3, [r4, #12]
 8004f84:	f8d9 2000 	ldr.w	r2, [r9]
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	42ab      	cmp	r3, r5
 8004f8c:	dc28      	bgt.n	8004fe0 <_printf_common+0xa4>
 8004f8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	3300      	adds	r3, #0
 8004f96:	bf18      	it	ne
 8004f98:	2301      	movne	r3, #1
 8004f9a:	0692      	lsls	r2, r2, #26
 8004f9c:	d42d      	bmi.n	8004ffa <_printf_common+0xbe>
 8004f9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fa2:	4639      	mov	r1, r7
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	47c0      	blx	r8
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d020      	beq.n	8004fee <_printf_common+0xb2>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	68e5      	ldr	r5, [r4, #12]
 8004fb0:	f8d9 2000 	ldr.w	r2, [r9]
 8004fb4:	f003 0306 	and.w	r3, r3, #6
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	bf08      	it	eq
 8004fbc:	1aad      	subeq	r5, r5, r2
 8004fbe:	68a3      	ldr	r3, [r4, #8]
 8004fc0:	6922      	ldr	r2, [r4, #16]
 8004fc2:	bf0c      	ite	eq
 8004fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fc8:	2500      	movne	r5, #0
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	bfc4      	itt	gt
 8004fce:	1a9b      	subgt	r3, r3, r2
 8004fd0:	18ed      	addgt	r5, r5, r3
 8004fd2:	f04f 0900 	mov.w	r9, #0
 8004fd6:	341a      	adds	r4, #26
 8004fd8:	454d      	cmp	r5, r9
 8004fda:	d11a      	bne.n	8005012 <_printf_common+0xd6>
 8004fdc:	2000      	movs	r0, #0
 8004fde:	e008      	b.n	8004ff2 <_printf_common+0xb6>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4652      	mov	r2, sl
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	47c0      	blx	r8
 8004fea:	3001      	adds	r0, #1
 8004fec:	d103      	bne.n	8004ff6 <_printf_common+0xba>
 8004fee:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff6:	3501      	adds	r5, #1
 8004ff8:	e7c3      	b.n	8004f82 <_printf_common+0x46>
 8004ffa:	18e1      	adds	r1, r4, r3
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	2030      	movs	r0, #48	; 0x30
 8005000:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005004:	4422      	add	r2, r4
 8005006:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800500a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800500e:	3302      	adds	r3, #2
 8005010:	e7c5      	b.n	8004f9e <_printf_common+0x62>
 8005012:	2301      	movs	r3, #1
 8005014:	4622      	mov	r2, r4
 8005016:	4639      	mov	r1, r7
 8005018:	4630      	mov	r0, r6
 800501a:	47c0      	blx	r8
 800501c:	3001      	adds	r0, #1
 800501e:	d0e6      	beq.n	8004fee <_printf_common+0xb2>
 8005020:	f109 0901 	add.w	r9, r9, #1
 8005024:	e7d8      	b.n	8004fd8 <_printf_common+0x9c>
	...

08005028 <_printf_i>:
 8005028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800502c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005030:	460c      	mov	r4, r1
 8005032:	7e09      	ldrb	r1, [r1, #24]
 8005034:	b085      	sub	sp, #20
 8005036:	296e      	cmp	r1, #110	; 0x6e
 8005038:	4617      	mov	r7, r2
 800503a:	4606      	mov	r6, r0
 800503c:	4698      	mov	r8, r3
 800503e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005040:	f000 80b3 	beq.w	80051aa <_printf_i+0x182>
 8005044:	d822      	bhi.n	800508c <_printf_i+0x64>
 8005046:	2963      	cmp	r1, #99	; 0x63
 8005048:	d036      	beq.n	80050b8 <_printf_i+0x90>
 800504a:	d80a      	bhi.n	8005062 <_printf_i+0x3a>
 800504c:	2900      	cmp	r1, #0
 800504e:	f000 80b9 	beq.w	80051c4 <_printf_i+0x19c>
 8005052:	2958      	cmp	r1, #88	; 0x58
 8005054:	f000 8083 	beq.w	800515e <_printf_i+0x136>
 8005058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800505c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005060:	e032      	b.n	80050c8 <_printf_i+0xa0>
 8005062:	2964      	cmp	r1, #100	; 0x64
 8005064:	d001      	beq.n	800506a <_printf_i+0x42>
 8005066:	2969      	cmp	r1, #105	; 0x69
 8005068:	d1f6      	bne.n	8005058 <_printf_i+0x30>
 800506a:	6820      	ldr	r0, [r4, #0]
 800506c:	6813      	ldr	r3, [r2, #0]
 800506e:	0605      	lsls	r5, r0, #24
 8005070:	f103 0104 	add.w	r1, r3, #4
 8005074:	d52a      	bpl.n	80050cc <_printf_i+0xa4>
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6011      	str	r1, [r2, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	da03      	bge.n	8005086 <_printf_i+0x5e>
 800507e:	222d      	movs	r2, #45	; 0x2d
 8005080:	425b      	negs	r3, r3
 8005082:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005086:	486f      	ldr	r0, [pc, #444]	; (8005244 <_printf_i+0x21c>)
 8005088:	220a      	movs	r2, #10
 800508a:	e039      	b.n	8005100 <_printf_i+0xd8>
 800508c:	2973      	cmp	r1, #115	; 0x73
 800508e:	f000 809d 	beq.w	80051cc <_printf_i+0x1a4>
 8005092:	d808      	bhi.n	80050a6 <_printf_i+0x7e>
 8005094:	296f      	cmp	r1, #111	; 0x6f
 8005096:	d020      	beq.n	80050da <_printf_i+0xb2>
 8005098:	2970      	cmp	r1, #112	; 0x70
 800509a:	d1dd      	bne.n	8005058 <_printf_i+0x30>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	f043 0320 	orr.w	r3, r3, #32
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	e003      	b.n	80050ae <_printf_i+0x86>
 80050a6:	2975      	cmp	r1, #117	; 0x75
 80050a8:	d017      	beq.n	80050da <_printf_i+0xb2>
 80050aa:	2978      	cmp	r1, #120	; 0x78
 80050ac:	d1d4      	bne.n	8005058 <_printf_i+0x30>
 80050ae:	2378      	movs	r3, #120	; 0x78
 80050b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050b4:	4864      	ldr	r0, [pc, #400]	; (8005248 <_printf_i+0x220>)
 80050b6:	e055      	b.n	8005164 <_printf_i+0x13c>
 80050b8:	6813      	ldr	r3, [r2, #0]
 80050ba:	1d19      	adds	r1, r3, #4
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6011      	str	r1, [r2, #0]
 80050c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050c8:	2301      	movs	r3, #1
 80050ca:	e08c      	b.n	80051e6 <_printf_i+0x1be>
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6011      	str	r1, [r2, #0]
 80050d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050d4:	bf18      	it	ne
 80050d6:	b21b      	sxthne	r3, r3
 80050d8:	e7cf      	b.n	800507a <_printf_i+0x52>
 80050da:	6813      	ldr	r3, [r2, #0]
 80050dc:	6825      	ldr	r5, [r4, #0]
 80050de:	1d18      	adds	r0, r3, #4
 80050e0:	6010      	str	r0, [r2, #0]
 80050e2:	0628      	lsls	r0, r5, #24
 80050e4:	d501      	bpl.n	80050ea <_printf_i+0xc2>
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	e002      	b.n	80050f0 <_printf_i+0xc8>
 80050ea:	0668      	lsls	r0, r5, #25
 80050ec:	d5fb      	bpl.n	80050e6 <_printf_i+0xbe>
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	4854      	ldr	r0, [pc, #336]	; (8005244 <_printf_i+0x21c>)
 80050f2:	296f      	cmp	r1, #111	; 0x6f
 80050f4:	bf14      	ite	ne
 80050f6:	220a      	movne	r2, #10
 80050f8:	2208      	moveq	r2, #8
 80050fa:	2100      	movs	r1, #0
 80050fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005100:	6865      	ldr	r5, [r4, #4]
 8005102:	60a5      	str	r5, [r4, #8]
 8005104:	2d00      	cmp	r5, #0
 8005106:	f2c0 8095 	blt.w	8005234 <_printf_i+0x20c>
 800510a:	6821      	ldr	r1, [r4, #0]
 800510c:	f021 0104 	bic.w	r1, r1, #4
 8005110:	6021      	str	r1, [r4, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d13d      	bne.n	8005192 <_printf_i+0x16a>
 8005116:	2d00      	cmp	r5, #0
 8005118:	f040 808e 	bne.w	8005238 <_printf_i+0x210>
 800511c:	4665      	mov	r5, ip
 800511e:	2a08      	cmp	r2, #8
 8005120:	d10b      	bne.n	800513a <_printf_i+0x112>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	07db      	lsls	r3, r3, #31
 8005126:	d508      	bpl.n	800513a <_printf_i+0x112>
 8005128:	6923      	ldr	r3, [r4, #16]
 800512a:	6862      	ldr	r2, [r4, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	bfde      	ittt	le
 8005130:	2330      	movle	r3, #48	; 0x30
 8005132:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005136:	f105 35ff 	addle.w	r5, r5, #4294967295
 800513a:	ebac 0305 	sub.w	r3, ip, r5
 800513e:	6123      	str	r3, [r4, #16]
 8005140:	f8cd 8000 	str.w	r8, [sp]
 8005144:	463b      	mov	r3, r7
 8005146:	aa03      	add	r2, sp, #12
 8005148:	4621      	mov	r1, r4
 800514a:	4630      	mov	r0, r6
 800514c:	f7ff fef6 	bl	8004f3c <_printf_common>
 8005150:	3001      	adds	r0, #1
 8005152:	d14d      	bne.n	80051f0 <_printf_i+0x1c8>
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	b005      	add	sp, #20
 800515a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800515e:	4839      	ldr	r0, [pc, #228]	; (8005244 <_printf_i+0x21c>)
 8005160:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005164:	6813      	ldr	r3, [r2, #0]
 8005166:	6821      	ldr	r1, [r4, #0]
 8005168:	1d1d      	adds	r5, r3, #4
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6015      	str	r5, [r2, #0]
 800516e:	060a      	lsls	r2, r1, #24
 8005170:	d50b      	bpl.n	800518a <_printf_i+0x162>
 8005172:	07ca      	lsls	r2, r1, #31
 8005174:	bf44      	itt	mi
 8005176:	f041 0120 	orrmi.w	r1, r1, #32
 800517a:	6021      	strmi	r1, [r4, #0]
 800517c:	b91b      	cbnz	r3, 8005186 <_printf_i+0x15e>
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	f022 0220 	bic.w	r2, r2, #32
 8005184:	6022      	str	r2, [r4, #0]
 8005186:	2210      	movs	r2, #16
 8005188:	e7b7      	b.n	80050fa <_printf_i+0xd2>
 800518a:	064d      	lsls	r5, r1, #25
 800518c:	bf48      	it	mi
 800518e:	b29b      	uxthmi	r3, r3
 8005190:	e7ef      	b.n	8005172 <_printf_i+0x14a>
 8005192:	4665      	mov	r5, ip
 8005194:	fbb3 f1f2 	udiv	r1, r3, r2
 8005198:	fb02 3311 	mls	r3, r2, r1, r3
 800519c:	5cc3      	ldrb	r3, [r0, r3]
 800519e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051a2:	460b      	mov	r3, r1
 80051a4:	2900      	cmp	r1, #0
 80051a6:	d1f5      	bne.n	8005194 <_printf_i+0x16c>
 80051a8:	e7b9      	b.n	800511e <_printf_i+0xf6>
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	6825      	ldr	r5, [r4, #0]
 80051ae:	6961      	ldr	r1, [r4, #20]
 80051b0:	1d18      	adds	r0, r3, #4
 80051b2:	6010      	str	r0, [r2, #0]
 80051b4:	0628      	lsls	r0, r5, #24
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	d501      	bpl.n	80051be <_printf_i+0x196>
 80051ba:	6019      	str	r1, [r3, #0]
 80051bc:	e002      	b.n	80051c4 <_printf_i+0x19c>
 80051be:	066a      	lsls	r2, r5, #25
 80051c0:	d5fb      	bpl.n	80051ba <_printf_i+0x192>
 80051c2:	8019      	strh	r1, [r3, #0]
 80051c4:	2300      	movs	r3, #0
 80051c6:	6123      	str	r3, [r4, #16]
 80051c8:	4665      	mov	r5, ip
 80051ca:	e7b9      	b.n	8005140 <_printf_i+0x118>
 80051cc:	6813      	ldr	r3, [r2, #0]
 80051ce:	1d19      	adds	r1, r3, #4
 80051d0:	6011      	str	r1, [r2, #0]
 80051d2:	681d      	ldr	r5, [r3, #0]
 80051d4:	6862      	ldr	r2, [r4, #4]
 80051d6:	2100      	movs	r1, #0
 80051d8:	4628      	mov	r0, r5
 80051da:	f7fb f801 	bl	80001e0 <memchr>
 80051de:	b108      	cbz	r0, 80051e4 <_printf_i+0x1bc>
 80051e0:	1b40      	subs	r0, r0, r5
 80051e2:	6060      	str	r0, [r4, #4]
 80051e4:	6863      	ldr	r3, [r4, #4]
 80051e6:	6123      	str	r3, [r4, #16]
 80051e8:	2300      	movs	r3, #0
 80051ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ee:	e7a7      	b.n	8005140 <_printf_i+0x118>
 80051f0:	6923      	ldr	r3, [r4, #16]
 80051f2:	462a      	mov	r2, r5
 80051f4:	4639      	mov	r1, r7
 80051f6:	4630      	mov	r0, r6
 80051f8:	47c0      	blx	r8
 80051fa:	3001      	adds	r0, #1
 80051fc:	d0aa      	beq.n	8005154 <_printf_i+0x12c>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	079b      	lsls	r3, r3, #30
 8005202:	d413      	bmi.n	800522c <_printf_i+0x204>
 8005204:	68e0      	ldr	r0, [r4, #12]
 8005206:	9b03      	ldr	r3, [sp, #12]
 8005208:	4298      	cmp	r0, r3
 800520a:	bfb8      	it	lt
 800520c:	4618      	movlt	r0, r3
 800520e:	e7a3      	b.n	8005158 <_printf_i+0x130>
 8005210:	2301      	movs	r3, #1
 8005212:	464a      	mov	r2, r9
 8005214:	4639      	mov	r1, r7
 8005216:	4630      	mov	r0, r6
 8005218:	47c0      	blx	r8
 800521a:	3001      	adds	r0, #1
 800521c:	d09a      	beq.n	8005154 <_printf_i+0x12c>
 800521e:	3501      	adds	r5, #1
 8005220:	68e3      	ldr	r3, [r4, #12]
 8005222:	9a03      	ldr	r2, [sp, #12]
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	42ab      	cmp	r3, r5
 8005228:	dcf2      	bgt.n	8005210 <_printf_i+0x1e8>
 800522a:	e7eb      	b.n	8005204 <_printf_i+0x1dc>
 800522c:	2500      	movs	r5, #0
 800522e:	f104 0919 	add.w	r9, r4, #25
 8005232:	e7f5      	b.n	8005220 <_printf_i+0x1f8>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1ac      	bne.n	8005192 <_printf_i+0x16a>
 8005238:	7803      	ldrb	r3, [r0, #0]
 800523a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800523e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005242:	e76c      	b.n	800511e <_printf_i+0xf6>
 8005244:	08006aba 	.word	0x08006aba
 8005248:	08006acb 	.word	0x08006acb

0800524c <siprintf>:
 800524c:	b40e      	push	{r1, r2, r3}
 800524e:	b500      	push	{lr}
 8005250:	b09c      	sub	sp, #112	; 0x70
 8005252:	ab1d      	add	r3, sp, #116	; 0x74
 8005254:	9002      	str	r0, [sp, #8]
 8005256:	9006      	str	r0, [sp, #24]
 8005258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800525c:	4809      	ldr	r0, [pc, #36]	; (8005284 <siprintf+0x38>)
 800525e:	9107      	str	r1, [sp, #28]
 8005260:	9104      	str	r1, [sp, #16]
 8005262:	4909      	ldr	r1, [pc, #36]	; (8005288 <siprintf+0x3c>)
 8005264:	f853 2b04 	ldr.w	r2, [r3], #4
 8005268:	9105      	str	r1, [sp, #20]
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	a902      	add	r1, sp, #8
 8005270:	f001 fa5e 	bl	8006730 <_svfiprintf_r>
 8005274:	9b02      	ldr	r3, [sp, #8]
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	b01c      	add	sp, #112	; 0x70
 800527c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005280:	b003      	add	sp, #12
 8005282:	4770      	bx	lr
 8005284:	2000000c 	.word	0x2000000c
 8005288:	ffff0208 	.word	0xffff0208

0800528c <quorem>:
 800528c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005290:	6903      	ldr	r3, [r0, #16]
 8005292:	690c      	ldr	r4, [r1, #16]
 8005294:	42a3      	cmp	r3, r4
 8005296:	4680      	mov	r8, r0
 8005298:	f2c0 8082 	blt.w	80053a0 <quorem+0x114>
 800529c:	3c01      	subs	r4, #1
 800529e:	f101 0714 	add.w	r7, r1, #20
 80052a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80052a6:	f100 0614 	add.w	r6, r0, #20
 80052aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80052ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80052b2:	eb06 030c 	add.w	r3, r6, ip
 80052b6:	3501      	adds	r5, #1
 80052b8:	eb07 090c 	add.w	r9, r7, ip
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	fbb0 f5f5 	udiv	r5, r0, r5
 80052c2:	b395      	cbz	r5, 800532a <quorem+0x9e>
 80052c4:	f04f 0a00 	mov.w	sl, #0
 80052c8:	4638      	mov	r0, r7
 80052ca:	46b6      	mov	lr, r6
 80052cc:	46d3      	mov	fp, sl
 80052ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80052d2:	b293      	uxth	r3, r2
 80052d4:	fb05 a303 	mla	r3, r5, r3, sl
 80052d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052dc:	b29b      	uxth	r3, r3
 80052de:	ebab 0303 	sub.w	r3, fp, r3
 80052e2:	0c12      	lsrs	r2, r2, #16
 80052e4:	f8de b000 	ldr.w	fp, [lr]
 80052e8:	fb05 a202 	mla	r2, r5, r2, sl
 80052ec:	fa13 f38b 	uxtah	r3, r3, fp
 80052f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80052f4:	fa1f fb82 	uxth.w	fp, r2
 80052f8:	f8de 2000 	ldr.w	r2, [lr]
 80052fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005304:	b29b      	uxth	r3, r3
 8005306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800530a:	4581      	cmp	r9, r0
 800530c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005310:	f84e 3b04 	str.w	r3, [lr], #4
 8005314:	d2db      	bcs.n	80052ce <quorem+0x42>
 8005316:	f856 300c 	ldr.w	r3, [r6, ip]
 800531a:	b933      	cbnz	r3, 800532a <quorem+0x9e>
 800531c:	9b01      	ldr	r3, [sp, #4]
 800531e:	3b04      	subs	r3, #4
 8005320:	429e      	cmp	r6, r3
 8005322:	461a      	mov	r2, r3
 8005324:	d330      	bcc.n	8005388 <quorem+0xfc>
 8005326:	f8c8 4010 	str.w	r4, [r8, #16]
 800532a:	4640      	mov	r0, r8
 800532c:	f001 f82a 	bl	8006384 <__mcmp>
 8005330:	2800      	cmp	r0, #0
 8005332:	db25      	blt.n	8005380 <quorem+0xf4>
 8005334:	3501      	adds	r5, #1
 8005336:	4630      	mov	r0, r6
 8005338:	f04f 0c00 	mov.w	ip, #0
 800533c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005340:	f8d0 e000 	ldr.w	lr, [r0]
 8005344:	b293      	uxth	r3, r2
 8005346:	ebac 0303 	sub.w	r3, ip, r3
 800534a:	0c12      	lsrs	r2, r2, #16
 800534c:	fa13 f38e 	uxtah	r3, r3, lr
 8005350:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005354:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005358:	b29b      	uxth	r3, r3
 800535a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800535e:	45b9      	cmp	r9, r7
 8005360:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005364:	f840 3b04 	str.w	r3, [r0], #4
 8005368:	d2e8      	bcs.n	800533c <quorem+0xb0>
 800536a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800536e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005372:	b92a      	cbnz	r2, 8005380 <quorem+0xf4>
 8005374:	3b04      	subs	r3, #4
 8005376:	429e      	cmp	r6, r3
 8005378:	461a      	mov	r2, r3
 800537a:	d30b      	bcc.n	8005394 <quorem+0x108>
 800537c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005380:	4628      	mov	r0, r5
 8005382:	b003      	add	sp, #12
 8005384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	3b04      	subs	r3, #4
 800538c:	2a00      	cmp	r2, #0
 800538e:	d1ca      	bne.n	8005326 <quorem+0x9a>
 8005390:	3c01      	subs	r4, #1
 8005392:	e7c5      	b.n	8005320 <quorem+0x94>
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	3b04      	subs	r3, #4
 8005398:	2a00      	cmp	r2, #0
 800539a:	d1ef      	bne.n	800537c <quorem+0xf0>
 800539c:	3c01      	subs	r4, #1
 800539e:	e7ea      	b.n	8005376 <quorem+0xea>
 80053a0:	2000      	movs	r0, #0
 80053a2:	e7ee      	b.n	8005382 <quorem+0xf6>
 80053a4:	0000      	movs	r0, r0
	...

080053a8 <_dtoa_r>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	ec57 6b10 	vmov	r6, r7, d0
 80053b0:	b097      	sub	sp, #92	; 0x5c
 80053b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053b4:	9106      	str	r1, [sp, #24]
 80053b6:	4604      	mov	r4, r0
 80053b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80053ba:	9312      	str	r3, [sp, #72]	; 0x48
 80053bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053c0:	e9cd 6700 	strd	r6, r7, [sp]
 80053c4:	b93d      	cbnz	r5, 80053d6 <_dtoa_r+0x2e>
 80053c6:	2010      	movs	r0, #16
 80053c8:	f000 fdb4 	bl	8005f34 <malloc>
 80053cc:	6260      	str	r0, [r4, #36]	; 0x24
 80053ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053d2:	6005      	str	r5, [r0, #0]
 80053d4:	60c5      	str	r5, [r0, #12]
 80053d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053d8:	6819      	ldr	r1, [r3, #0]
 80053da:	b151      	cbz	r1, 80053f2 <_dtoa_r+0x4a>
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	604a      	str	r2, [r1, #4]
 80053e0:	2301      	movs	r3, #1
 80053e2:	4093      	lsls	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
 80053e6:	4620      	mov	r0, r4
 80053e8:	f000 fdeb 	bl	8005fc2 <_Bfree>
 80053ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	1e3b      	subs	r3, r7, #0
 80053f4:	bfbb      	ittet	lt
 80053f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053fa:	9301      	strlt	r3, [sp, #4]
 80053fc:	2300      	movge	r3, #0
 80053fe:	2201      	movlt	r2, #1
 8005400:	bfac      	ite	ge
 8005402:	f8c8 3000 	strge.w	r3, [r8]
 8005406:	f8c8 2000 	strlt.w	r2, [r8]
 800540a:	4baf      	ldr	r3, [pc, #700]	; (80056c8 <_dtoa_r+0x320>)
 800540c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005410:	ea33 0308 	bics.w	r3, r3, r8
 8005414:	d114      	bne.n	8005440 <_dtoa_r+0x98>
 8005416:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005418:	f242 730f 	movw	r3, #9999	; 0x270f
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	9b00      	ldr	r3, [sp, #0]
 8005420:	b923      	cbnz	r3, 800542c <_dtoa_r+0x84>
 8005422:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005426:	2800      	cmp	r0, #0
 8005428:	f000 8542 	beq.w	8005eb0 <_dtoa_r+0xb08>
 800542c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800542e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80056dc <_dtoa_r+0x334>
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 8544 	beq.w	8005ec0 <_dtoa_r+0xb18>
 8005438:	f10b 0303 	add.w	r3, fp, #3
 800543c:	f000 bd3e 	b.w	8005ebc <_dtoa_r+0xb14>
 8005440:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005444:	2200      	movs	r2, #0
 8005446:	2300      	movs	r3, #0
 8005448:	4630      	mov	r0, r6
 800544a:	4639      	mov	r1, r7
 800544c:	f7fb fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005450:	4681      	mov	r9, r0
 8005452:	b168      	cbz	r0, 8005470 <_dtoa_r+0xc8>
 8005454:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005456:	2301      	movs	r3, #1
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8524 	beq.w	8005eaa <_dtoa_r+0xb02>
 8005462:	4b9a      	ldr	r3, [pc, #616]	; (80056cc <_dtoa_r+0x324>)
 8005464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005466:	f103 3bff 	add.w	fp, r3, #4294967295
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	f000 bd28 	b.w	8005ec0 <_dtoa_r+0xb18>
 8005470:	aa14      	add	r2, sp, #80	; 0x50
 8005472:	a915      	add	r1, sp, #84	; 0x54
 8005474:	ec47 6b10 	vmov	d0, r6, r7
 8005478:	4620      	mov	r0, r4
 800547a:	f000 fffa 	bl	8006472 <__d2b>
 800547e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005482:	9004      	str	r0, [sp, #16]
 8005484:	2d00      	cmp	r5, #0
 8005486:	d07c      	beq.n	8005582 <_dtoa_r+0x1da>
 8005488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800548c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005490:	46b2      	mov	sl, r6
 8005492:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005496:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800549a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800549e:	2200      	movs	r2, #0
 80054a0:	4b8b      	ldr	r3, [pc, #556]	; (80056d0 <_dtoa_r+0x328>)
 80054a2:	4650      	mov	r0, sl
 80054a4:	4659      	mov	r1, fp
 80054a6:	f7fa feef 	bl	8000288 <__aeabi_dsub>
 80054aa:	a381      	add	r3, pc, #516	; (adr r3, 80056b0 <_dtoa_r+0x308>)
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f7fb f8a2 	bl	80005f8 <__aeabi_dmul>
 80054b4:	a380      	add	r3, pc, #512	; (adr r3, 80056b8 <_dtoa_r+0x310>)
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	f7fa fee7 	bl	800028c <__adddf3>
 80054be:	4606      	mov	r6, r0
 80054c0:	4628      	mov	r0, r5
 80054c2:	460f      	mov	r7, r1
 80054c4:	f7fb f82e 	bl	8000524 <__aeabi_i2d>
 80054c8:	a37d      	add	r3, pc, #500	; (adr r3, 80056c0 <_dtoa_r+0x318>)
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f7fb f893 	bl	80005f8 <__aeabi_dmul>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4630      	mov	r0, r6
 80054d8:	4639      	mov	r1, r7
 80054da:	f7fa fed7 	bl	800028c <__adddf3>
 80054de:	4606      	mov	r6, r0
 80054e0:	460f      	mov	r7, r1
 80054e2:	f7fb fb39 	bl	8000b58 <__aeabi_d2iz>
 80054e6:	2200      	movs	r2, #0
 80054e8:	4682      	mov	sl, r0
 80054ea:	2300      	movs	r3, #0
 80054ec:	4630      	mov	r0, r6
 80054ee:	4639      	mov	r1, r7
 80054f0:	f7fb faf4 	bl	8000adc <__aeabi_dcmplt>
 80054f4:	b148      	cbz	r0, 800550a <_dtoa_r+0x162>
 80054f6:	4650      	mov	r0, sl
 80054f8:	f7fb f814 	bl	8000524 <__aeabi_i2d>
 80054fc:	4632      	mov	r2, r6
 80054fe:	463b      	mov	r3, r7
 8005500:	f7fb fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005504:	b908      	cbnz	r0, 800550a <_dtoa_r+0x162>
 8005506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800550a:	f1ba 0f16 	cmp.w	sl, #22
 800550e:	d859      	bhi.n	80055c4 <_dtoa_r+0x21c>
 8005510:	4970      	ldr	r1, [pc, #448]	; (80056d4 <_dtoa_r+0x32c>)
 8005512:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800551a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800551e:	f7fb fafb 	bl	8000b18 <__aeabi_dcmpgt>
 8005522:	2800      	cmp	r0, #0
 8005524:	d050      	beq.n	80055c8 <_dtoa_r+0x220>
 8005526:	f10a 3aff 	add.w	sl, sl, #4294967295
 800552a:	2300      	movs	r3, #0
 800552c:	930f      	str	r3, [sp, #60]	; 0x3c
 800552e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005530:	1b5d      	subs	r5, r3, r5
 8005532:	f1b5 0801 	subs.w	r8, r5, #1
 8005536:	bf49      	itett	mi
 8005538:	f1c5 0301 	rsbmi	r3, r5, #1
 800553c:	2300      	movpl	r3, #0
 800553e:	9305      	strmi	r3, [sp, #20]
 8005540:	f04f 0800 	movmi.w	r8, #0
 8005544:	bf58      	it	pl
 8005546:	9305      	strpl	r3, [sp, #20]
 8005548:	f1ba 0f00 	cmp.w	sl, #0
 800554c:	db3e      	blt.n	80055cc <_dtoa_r+0x224>
 800554e:	2300      	movs	r3, #0
 8005550:	44d0      	add	r8, sl
 8005552:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005556:	9307      	str	r3, [sp, #28]
 8005558:	9b06      	ldr	r3, [sp, #24]
 800555a:	2b09      	cmp	r3, #9
 800555c:	f200 8090 	bhi.w	8005680 <_dtoa_r+0x2d8>
 8005560:	2b05      	cmp	r3, #5
 8005562:	bfc4      	itt	gt
 8005564:	3b04      	subgt	r3, #4
 8005566:	9306      	strgt	r3, [sp, #24]
 8005568:	9b06      	ldr	r3, [sp, #24]
 800556a:	f1a3 0302 	sub.w	r3, r3, #2
 800556e:	bfcc      	ite	gt
 8005570:	2500      	movgt	r5, #0
 8005572:	2501      	movle	r5, #1
 8005574:	2b03      	cmp	r3, #3
 8005576:	f200 808f 	bhi.w	8005698 <_dtoa_r+0x2f0>
 800557a:	e8df f003 	tbb	[pc, r3]
 800557e:	7f7d      	.short	0x7f7d
 8005580:	7131      	.short	0x7131
 8005582:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005586:	441d      	add	r5, r3
 8005588:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800558c:	2820      	cmp	r0, #32
 800558e:	dd13      	ble.n	80055b8 <_dtoa_r+0x210>
 8005590:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005594:	9b00      	ldr	r3, [sp, #0]
 8005596:	fa08 f800 	lsl.w	r8, r8, r0
 800559a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800559e:	fa23 f000 	lsr.w	r0, r3, r0
 80055a2:	ea48 0000 	orr.w	r0, r8, r0
 80055a6:	f7fa ffad 	bl	8000504 <__aeabi_ui2d>
 80055aa:	2301      	movs	r3, #1
 80055ac:	4682      	mov	sl, r0
 80055ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80055b2:	3d01      	subs	r5, #1
 80055b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80055b6:	e772      	b.n	800549e <_dtoa_r+0xf6>
 80055b8:	9b00      	ldr	r3, [sp, #0]
 80055ba:	f1c0 0020 	rsb	r0, r0, #32
 80055be:	fa03 f000 	lsl.w	r0, r3, r0
 80055c2:	e7f0      	b.n	80055a6 <_dtoa_r+0x1fe>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e7b1      	b.n	800552c <_dtoa_r+0x184>
 80055c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80055ca:	e7b0      	b.n	800552e <_dtoa_r+0x186>
 80055cc:	9b05      	ldr	r3, [sp, #20]
 80055ce:	eba3 030a 	sub.w	r3, r3, sl
 80055d2:	9305      	str	r3, [sp, #20]
 80055d4:	f1ca 0300 	rsb	r3, sl, #0
 80055d8:	9307      	str	r3, [sp, #28]
 80055da:	2300      	movs	r3, #0
 80055dc:	930e      	str	r3, [sp, #56]	; 0x38
 80055de:	e7bb      	b.n	8005558 <_dtoa_r+0x1b0>
 80055e0:	2301      	movs	r3, #1
 80055e2:	930a      	str	r3, [sp, #40]	; 0x28
 80055e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	dd59      	ble.n	800569e <_dtoa_r+0x2f6>
 80055ea:	9302      	str	r3, [sp, #8]
 80055ec:	4699      	mov	r9, r3
 80055ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80055f0:	2200      	movs	r2, #0
 80055f2:	6072      	str	r2, [r6, #4]
 80055f4:	2204      	movs	r2, #4
 80055f6:	f102 0014 	add.w	r0, r2, #20
 80055fa:	4298      	cmp	r0, r3
 80055fc:	6871      	ldr	r1, [r6, #4]
 80055fe:	d953      	bls.n	80056a8 <_dtoa_r+0x300>
 8005600:	4620      	mov	r0, r4
 8005602:	f000 fcaa 	bl	8005f5a <_Balloc>
 8005606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005608:	6030      	str	r0, [r6, #0]
 800560a:	f1b9 0f0e 	cmp.w	r9, #14
 800560e:	f8d3 b000 	ldr.w	fp, [r3]
 8005612:	f200 80e6 	bhi.w	80057e2 <_dtoa_r+0x43a>
 8005616:	2d00      	cmp	r5, #0
 8005618:	f000 80e3 	beq.w	80057e2 <_dtoa_r+0x43a>
 800561c:	ed9d 7b00 	vldr	d7, [sp]
 8005620:	f1ba 0f00 	cmp.w	sl, #0
 8005624:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005628:	dd74      	ble.n	8005714 <_dtoa_r+0x36c>
 800562a:	4a2a      	ldr	r2, [pc, #168]	; (80056d4 <_dtoa_r+0x32c>)
 800562c:	f00a 030f 	and.w	r3, sl, #15
 8005630:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005634:	ed93 7b00 	vldr	d7, [r3]
 8005638:	ea4f 162a 	mov.w	r6, sl, asr #4
 800563c:	06f0      	lsls	r0, r6, #27
 800563e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005642:	d565      	bpl.n	8005710 <_dtoa_r+0x368>
 8005644:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <_dtoa_r+0x330>)
 8005646:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800564a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800564e:	f7fb f8fd 	bl	800084c <__aeabi_ddiv>
 8005652:	e9cd 0100 	strd	r0, r1, [sp]
 8005656:	f006 060f 	and.w	r6, r6, #15
 800565a:	2503      	movs	r5, #3
 800565c:	4f1e      	ldr	r7, [pc, #120]	; (80056d8 <_dtoa_r+0x330>)
 800565e:	e04c      	b.n	80056fa <_dtoa_r+0x352>
 8005660:	2301      	movs	r3, #1
 8005662:	930a      	str	r3, [sp, #40]	; 0x28
 8005664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005666:	4453      	add	r3, sl
 8005668:	f103 0901 	add.w	r9, r3, #1
 800566c:	9302      	str	r3, [sp, #8]
 800566e:	464b      	mov	r3, r9
 8005670:	2b01      	cmp	r3, #1
 8005672:	bfb8      	it	lt
 8005674:	2301      	movlt	r3, #1
 8005676:	e7ba      	b.n	80055ee <_dtoa_r+0x246>
 8005678:	2300      	movs	r3, #0
 800567a:	e7b2      	b.n	80055e2 <_dtoa_r+0x23a>
 800567c:	2300      	movs	r3, #0
 800567e:	e7f0      	b.n	8005662 <_dtoa_r+0x2ba>
 8005680:	2501      	movs	r5, #1
 8005682:	2300      	movs	r3, #0
 8005684:	9306      	str	r3, [sp, #24]
 8005686:	950a      	str	r5, [sp, #40]	; 0x28
 8005688:	f04f 33ff 	mov.w	r3, #4294967295
 800568c:	9302      	str	r3, [sp, #8]
 800568e:	4699      	mov	r9, r3
 8005690:	2200      	movs	r2, #0
 8005692:	2312      	movs	r3, #18
 8005694:	920b      	str	r2, [sp, #44]	; 0x2c
 8005696:	e7aa      	b.n	80055ee <_dtoa_r+0x246>
 8005698:	2301      	movs	r3, #1
 800569a:	930a      	str	r3, [sp, #40]	; 0x28
 800569c:	e7f4      	b.n	8005688 <_dtoa_r+0x2e0>
 800569e:	2301      	movs	r3, #1
 80056a0:	9302      	str	r3, [sp, #8]
 80056a2:	4699      	mov	r9, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	e7f5      	b.n	8005694 <_dtoa_r+0x2ec>
 80056a8:	3101      	adds	r1, #1
 80056aa:	6071      	str	r1, [r6, #4]
 80056ac:	0052      	lsls	r2, r2, #1
 80056ae:	e7a2      	b.n	80055f6 <_dtoa_r+0x24e>
 80056b0:	636f4361 	.word	0x636f4361
 80056b4:	3fd287a7 	.word	0x3fd287a7
 80056b8:	8b60c8b3 	.word	0x8b60c8b3
 80056bc:	3fc68a28 	.word	0x3fc68a28
 80056c0:	509f79fb 	.word	0x509f79fb
 80056c4:	3fd34413 	.word	0x3fd34413
 80056c8:	7ff00000 	.word	0x7ff00000
 80056cc:	08006ab9 	.word	0x08006ab9
 80056d0:	3ff80000 	.word	0x3ff80000
 80056d4:	08006b18 	.word	0x08006b18
 80056d8:	08006af0 	.word	0x08006af0
 80056dc:	08006ae5 	.word	0x08006ae5
 80056e0:	07f1      	lsls	r1, r6, #31
 80056e2:	d508      	bpl.n	80056f6 <_dtoa_r+0x34e>
 80056e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ec:	f7fa ff84 	bl	80005f8 <__aeabi_dmul>
 80056f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80056f4:	3501      	adds	r5, #1
 80056f6:	1076      	asrs	r6, r6, #1
 80056f8:	3708      	adds	r7, #8
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	d1f0      	bne.n	80056e0 <_dtoa_r+0x338>
 80056fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005702:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005706:	f7fb f8a1 	bl	800084c <__aeabi_ddiv>
 800570a:	e9cd 0100 	strd	r0, r1, [sp]
 800570e:	e01a      	b.n	8005746 <_dtoa_r+0x39e>
 8005710:	2502      	movs	r5, #2
 8005712:	e7a3      	b.n	800565c <_dtoa_r+0x2b4>
 8005714:	f000 80a0 	beq.w	8005858 <_dtoa_r+0x4b0>
 8005718:	f1ca 0600 	rsb	r6, sl, #0
 800571c:	4b9f      	ldr	r3, [pc, #636]	; (800599c <_dtoa_r+0x5f4>)
 800571e:	4fa0      	ldr	r7, [pc, #640]	; (80059a0 <_dtoa_r+0x5f8>)
 8005720:	f006 020f 	and.w	r2, r6, #15
 8005724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005730:	f7fa ff62 	bl	80005f8 <__aeabi_dmul>
 8005734:	e9cd 0100 	strd	r0, r1, [sp]
 8005738:	1136      	asrs	r6, r6, #4
 800573a:	2300      	movs	r3, #0
 800573c:	2502      	movs	r5, #2
 800573e:	2e00      	cmp	r6, #0
 8005740:	d17f      	bne.n	8005842 <_dtoa_r+0x49a>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e1      	bne.n	800570a <_dtoa_r+0x362>
 8005746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8087 	beq.w	800585c <_dtoa_r+0x4b4>
 800574e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005752:	2200      	movs	r2, #0
 8005754:	4b93      	ldr	r3, [pc, #588]	; (80059a4 <_dtoa_r+0x5fc>)
 8005756:	4630      	mov	r0, r6
 8005758:	4639      	mov	r1, r7
 800575a:	f7fb f9bf 	bl	8000adc <__aeabi_dcmplt>
 800575e:	2800      	cmp	r0, #0
 8005760:	d07c      	beq.n	800585c <_dtoa_r+0x4b4>
 8005762:	f1b9 0f00 	cmp.w	r9, #0
 8005766:	d079      	beq.n	800585c <_dtoa_r+0x4b4>
 8005768:	9b02      	ldr	r3, [sp, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	dd35      	ble.n	80057da <_dtoa_r+0x432>
 800576e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005772:	9308      	str	r3, [sp, #32]
 8005774:	4639      	mov	r1, r7
 8005776:	2200      	movs	r2, #0
 8005778:	4b8b      	ldr	r3, [pc, #556]	; (80059a8 <_dtoa_r+0x600>)
 800577a:	4630      	mov	r0, r6
 800577c:	f7fa ff3c 	bl	80005f8 <__aeabi_dmul>
 8005780:	e9cd 0100 	strd	r0, r1, [sp]
 8005784:	9f02      	ldr	r7, [sp, #8]
 8005786:	3501      	adds	r5, #1
 8005788:	4628      	mov	r0, r5
 800578a:	f7fa fecb 	bl	8000524 <__aeabi_i2d>
 800578e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005792:	f7fa ff31 	bl	80005f8 <__aeabi_dmul>
 8005796:	2200      	movs	r2, #0
 8005798:	4b84      	ldr	r3, [pc, #528]	; (80059ac <_dtoa_r+0x604>)
 800579a:	f7fa fd77 	bl	800028c <__adddf3>
 800579e:	4605      	mov	r5, r0
 80057a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80057a4:	2f00      	cmp	r7, #0
 80057a6:	d15d      	bne.n	8005864 <_dtoa_r+0x4bc>
 80057a8:	2200      	movs	r2, #0
 80057aa:	4b81      	ldr	r3, [pc, #516]	; (80059b0 <_dtoa_r+0x608>)
 80057ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057b0:	f7fa fd6a 	bl	8000288 <__aeabi_dsub>
 80057b4:	462a      	mov	r2, r5
 80057b6:	4633      	mov	r3, r6
 80057b8:	e9cd 0100 	strd	r0, r1, [sp]
 80057bc:	f7fb f9ac 	bl	8000b18 <__aeabi_dcmpgt>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	f040 8288 	bne.w	8005cd6 <_dtoa_r+0x92e>
 80057c6:	462a      	mov	r2, r5
 80057c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80057cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057d0:	f7fb f984 	bl	8000adc <__aeabi_dcmplt>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	f040 827c 	bne.w	8005cd2 <_dtoa_r+0x92a>
 80057da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057de:	e9cd 2300 	strd	r2, r3, [sp]
 80057e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f2c0 8150 	blt.w	8005a8a <_dtoa_r+0x6e2>
 80057ea:	f1ba 0f0e 	cmp.w	sl, #14
 80057ee:	f300 814c 	bgt.w	8005a8a <_dtoa_r+0x6e2>
 80057f2:	4b6a      	ldr	r3, [pc, #424]	; (800599c <_dtoa_r+0x5f4>)
 80057f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057f8:	ed93 7b00 	vldr	d7, [r3]
 80057fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005804:	f280 80d8 	bge.w	80059b8 <_dtoa_r+0x610>
 8005808:	f1b9 0f00 	cmp.w	r9, #0
 800580c:	f300 80d4 	bgt.w	80059b8 <_dtoa_r+0x610>
 8005810:	f040 825e 	bne.w	8005cd0 <_dtoa_r+0x928>
 8005814:	2200      	movs	r2, #0
 8005816:	4b66      	ldr	r3, [pc, #408]	; (80059b0 <_dtoa_r+0x608>)
 8005818:	ec51 0b17 	vmov	r0, r1, d7
 800581c:	f7fa feec 	bl	80005f8 <__aeabi_dmul>
 8005820:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005824:	f7fb f96e 	bl	8000b04 <__aeabi_dcmpge>
 8005828:	464f      	mov	r7, r9
 800582a:	464e      	mov	r6, r9
 800582c:	2800      	cmp	r0, #0
 800582e:	f040 8234 	bne.w	8005c9a <_dtoa_r+0x8f2>
 8005832:	2331      	movs	r3, #49	; 0x31
 8005834:	f10b 0501 	add.w	r5, fp, #1
 8005838:	f88b 3000 	strb.w	r3, [fp]
 800583c:	f10a 0a01 	add.w	sl, sl, #1
 8005840:	e22f      	b.n	8005ca2 <_dtoa_r+0x8fa>
 8005842:	07f2      	lsls	r2, r6, #31
 8005844:	d505      	bpl.n	8005852 <_dtoa_r+0x4aa>
 8005846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800584a:	f7fa fed5 	bl	80005f8 <__aeabi_dmul>
 800584e:	3501      	adds	r5, #1
 8005850:	2301      	movs	r3, #1
 8005852:	1076      	asrs	r6, r6, #1
 8005854:	3708      	adds	r7, #8
 8005856:	e772      	b.n	800573e <_dtoa_r+0x396>
 8005858:	2502      	movs	r5, #2
 800585a:	e774      	b.n	8005746 <_dtoa_r+0x39e>
 800585c:	f8cd a020 	str.w	sl, [sp, #32]
 8005860:	464f      	mov	r7, r9
 8005862:	e791      	b.n	8005788 <_dtoa_r+0x3e0>
 8005864:	4b4d      	ldr	r3, [pc, #308]	; (800599c <_dtoa_r+0x5f4>)
 8005866:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800586a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800586e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005870:	2b00      	cmp	r3, #0
 8005872:	d047      	beq.n	8005904 <_dtoa_r+0x55c>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	2000      	movs	r0, #0
 800587a:	494e      	ldr	r1, [pc, #312]	; (80059b4 <_dtoa_r+0x60c>)
 800587c:	f7fa ffe6 	bl	800084c <__aeabi_ddiv>
 8005880:	462a      	mov	r2, r5
 8005882:	4633      	mov	r3, r6
 8005884:	f7fa fd00 	bl	8000288 <__aeabi_dsub>
 8005888:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800588c:	465d      	mov	r5, fp
 800588e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005892:	f7fb f961 	bl	8000b58 <__aeabi_d2iz>
 8005896:	4606      	mov	r6, r0
 8005898:	f7fa fe44 	bl	8000524 <__aeabi_i2d>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058a4:	f7fa fcf0 	bl	8000288 <__aeabi_dsub>
 80058a8:	3630      	adds	r6, #48	; 0x30
 80058aa:	f805 6b01 	strb.w	r6, [r5], #1
 80058ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058b2:	e9cd 0100 	strd	r0, r1, [sp]
 80058b6:	f7fb f911 	bl	8000adc <__aeabi_dcmplt>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d163      	bne.n	8005986 <_dtoa_r+0x5de>
 80058be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058c2:	2000      	movs	r0, #0
 80058c4:	4937      	ldr	r1, [pc, #220]	; (80059a4 <_dtoa_r+0x5fc>)
 80058c6:	f7fa fcdf 	bl	8000288 <__aeabi_dsub>
 80058ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058ce:	f7fb f905 	bl	8000adc <__aeabi_dcmplt>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	f040 80b7 	bne.w	8005a46 <_dtoa_r+0x69e>
 80058d8:	eba5 030b 	sub.w	r3, r5, fp
 80058dc:	429f      	cmp	r7, r3
 80058de:	f77f af7c 	ble.w	80057da <_dtoa_r+0x432>
 80058e2:	2200      	movs	r2, #0
 80058e4:	4b30      	ldr	r3, [pc, #192]	; (80059a8 <_dtoa_r+0x600>)
 80058e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058ea:	f7fa fe85 	bl	80005f8 <__aeabi_dmul>
 80058ee:	2200      	movs	r2, #0
 80058f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80058f4:	4b2c      	ldr	r3, [pc, #176]	; (80059a8 <_dtoa_r+0x600>)
 80058f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058fa:	f7fa fe7d 	bl	80005f8 <__aeabi_dmul>
 80058fe:	e9cd 0100 	strd	r0, r1, [sp]
 8005902:	e7c4      	b.n	800588e <_dtoa_r+0x4e6>
 8005904:	462a      	mov	r2, r5
 8005906:	4633      	mov	r3, r6
 8005908:	f7fa fe76 	bl	80005f8 <__aeabi_dmul>
 800590c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005910:	eb0b 0507 	add.w	r5, fp, r7
 8005914:	465e      	mov	r6, fp
 8005916:	e9dd 0100 	ldrd	r0, r1, [sp]
 800591a:	f7fb f91d 	bl	8000b58 <__aeabi_d2iz>
 800591e:	4607      	mov	r7, r0
 8005920:	f7fa fe00 	bl	8000524 <__aeabi_i2d>
 8005924:	3730      	adds	r7, #48	; 0x30
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800592e:	f7fa fcab 	bl	8000288 <__aeabi_dsub>
 8005932:	f806 7b01 	strb.w	r7, [r6], #1
 8005936:	42ae      	cmp	r6, r5
 8005938:	e9cd 0100 	strd	r0, r1, [sp]
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	d126      	bne.n	8005990 <_dtoa_r+0x5e8>
 8005942:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <_dtoa_r+0x60c>)
 8005944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005948:	f7fa fca0 	bl	800028c <__adddf3>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005954:	f7fb f8e0 	bl	8000b18 <__aeabi_dcmpgt>
 8005958:	2800      	cmp	r0, #0
 800595a:	d174      	bne.n	8005a46 <_dtoa_r+0x69e>
 800595c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005960:	2000      	movs	r0, #0
 8005962:	4914      	ldr	r1, [pc, #80]	; (80059b4 <_dtoa_r+0x60c>)
 8005964:	f7fa fc90 	bl	8000288 <__aeabi_dsub>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005970:	f7fb f8b4 	bl	8000adc <__aeabi_dcmplt>
 8005974:	2800      	cmp	r0, #0
 8005976:	f43f af30 	beq.w	80057da <_dtoa_r+0x432>
 800597a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800597e:	2b30      	cmp	r3, #48	; 0x30
 8005980:	f105 32ff 	add.w	r2, r5, #4294967295
 8005984:	d002      	beq.n	800598c <_dtoa_r+0x5e4>
 8005986:	f8dd a020 	ldr.w	sl, [sp, #32]
 800598a:	e04a      	b.n	8005a22 <_dtoa_r+0x67a>
 800598c:	4615      	mov	r5, r2
 800598e:	e7f4      	b.n	800597a <_dtoa_r+0x5d2>
 8005990:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <_dtoa_r+0x600>)
 8005992:	f7fa fe31 	bl	80005f8 <__aeabi_dmul>
 8005996:	e9cd 0100 	strd	r0, r1, [sp]
 800599a:	e7bc      	b.n	8005916 <_dtoa_r+0x56e>
 800599c:	08006b18 	.word	0x08006b18
 80059a0:	08006af0 	.word	0x08006af0
 80059a4:	3ff00000 	.word	0x3ff00000
 80059a8:	40240000 	.word	0x40240000
 80059ac:	401c0000 	.word	0x401c0000
 80059b0:	40140000 	.word	0x40140000
 80059b4:	3fe00000 	.word	0x3fe00000
 80059b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80059bc:	465d      	mov	r5, fp
 80059be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059c2:	4630      	mov	r0, r6
 80059c4:	4639      	mov	r1, r7
 80059c6:	f7fa ff41 	bl	800084c <__aeabi_ddiv>
 80059ca:	f7fb f8c5 	bl	8000b58 <__aeabi_d2iz>
 80059ce:	4680      	mov	r8, r0
 80059d0:	f7fa fda8 	bl	8000524 <__aeabi_i2d>
 80059d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059d8:	f7fa fe0e 	bl	80005f8 <__aeabi_dmul>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	4630      	mov	r0, r6
 80059e2:	4639      	mov	r1, r7
 80059e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80059e8:	f7fa fc4e 	bl	8000288 <__aeabi_dsub>
 80059ec:	f805 6b01 	strb.w	r6, [r5], #1
 80059f0:	eba5 060b 	sub.w	r6, r5, fp
 80059f4:	45b1      	cmp	r9, r6
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	d139      	bne.n	8005a70 <_dtoa_r+0x6c8>
 80059fc:	f7fa fc46 	bl	800028c <__adddf3>
 8005a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a04:	4606      	mov	r6, r0
 8005a06:	460f      	mov	r7, r1
 8005a08:	f7fb f886 	bl	8000b18 <__aeabi_dcmpgt>
 8005a0c:	b9c8      	cbnz	r0, 8005a42 <_dtoa_r+0x69a>
 8005a0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a12:	4630      	mov	r0, r6
 8005a14:	4639      	mov	r1, r7
 8005a16:	f7fb f857 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a1a:	b110      	cbz	r0, 8005a22 <_dtoa_r+0x67a>
 8005a1c:	f018 0f01 	tst.w	r8, #1
 8005a20:	d10f      	bne.n	8005a42 <_dtoa_r+0x69a>
 8005a22:	9904      	ldr	r1, [sp, #16]
 8005a24:	4620      	mov	r0, r4
 8005a26:	f000 facc 	bl	8005fc2 <_Bfree>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a2e:	702b      	strb	r3, [r5, #0]
 8005a30:	f10a 0301 	add.w	r3, sl, #1
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8241 	beq.w	8005ec0 <_dtoa_r+0xb18>
 8005a3e:	601d      	str	r5, [r3, #0]
 8005a40:	e23e      	b.n	8005ec0 <_dtoa_r+0xb18>
 8005a42:	f8cd a020 	str.w	sl, [sp, #32]
 8005a46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a4a:	2a39      	cmp	r2, #57	; 0x39
 8005a4c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005a50:	d108      	bne.n	8005a64 <_dtoa_r+0x6bc>
 8005a52:	459b      	cmp	fp, r3
 8005a54:	d10a      	bne.n	8005a6c <_dtoa_r+0x6c4>
 8005a56:	9b08      	ldr	r3, [sp, #32]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	9308      	str	r3, [sp, #32]
 8005a5c:	2330      	movs	r3, #48	; 0x30
 8005a5e:	f88b 3000 	strb.w	r3, [fp]
 8005a62:	465b      	mov	r3, fp
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	3201      	adds	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
 8005a6a:	e78c      	b.n	8005986 <_dtoa_r+0x5de>
 8005a6c:	461d      	mov	r5, r3
 8005a6e:	e7ea      	b.n	8005a46 <_dtoa_r+0x69e>
 8005a70:	2200      	movs	r2, #0
 8005a72:	4b9b      	ldr	r3, [pc, #620]	; (8005ce0 <_dtoa_r+0x938>)
 8005a74:	f7fa fdc0 	bl	80005f8 <__aeabi_dmul>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	460f      	mov	r7, r1
 8005a80:	f7fb f822 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d09a      	beq.n	80059be <_dtoa_r+0x616>
 8005a88:	e7cb      	b.n	8005a22 <_dtoa_r+0x67a>
 8005a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a8c:	2a00      	cmp	r2, #0
 8005a8e:	f000 808b 	beq.w	8005ba8 <_dtoa_r+0x800>
 8005a92:	9a06      	ldr	r2, [sp, #24]
 8005a94:	2a01      	cmp	r2, #1
 8005a96:	dc6e      	bgt.n	8005b76 <_dtoa_r+0x7ce>
 8005a98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a9a:	2a00      	cmp	r2, #0
 8005a9c:	d067      	beq.n	8005b6e <_dtoa_r+0x7c6>
 8005a9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005aa2:	9f07      	ldr	r7, [sp, #28]
 8005aa4:	9d05      	ldr	r5, [sp, #20]
 8005aa6:	9a05      	ldr	r2, [sp, #20]
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	441a      	add	r2, r3
 8005aac:	4620      	mov	r0, r4
 8005aae:	9205      	str	r2, [sp, #20]
 8005ab0:	4498      	add	r8, r3
 8005ab2:	f000 fb26 	bl	8006102 <__i2b>
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	2d00      	cmp	r5, #0
 8005aba:	dd0c      	ble.n	8005ad6 <_dtoa_r+0x72e>
 8005abc:	f1b8 0f00 	cmp.w	r8, #0
 8005ac0:	dd09      	ble.n	8005ad6 <_dtoa_r+0x72e>
 8005ac2:	4545      	cmp	r5, r8
 8005ac4:	9a05      	ldr	r2, [sp, #20]
 8005ac6:	462b      	mov	r3, r5
 8005ac8:	bfa8      	it	ge
 8005aca:	4643      	movge	r3, r8
 8005acc:	1ad2      	subs	r2, r2, r3
 8005ace:	9205      	str	r2, [sp, #20]
 8005ad0:	1aed      	subs	r5, r5, r3
 8005ad2:	eba8 0803 	sub.w	r8, r8, r3
 8005ad6:	9b07      	ldr	r3, [sp, #28]
 8005ad8:	b1eb      	cbz	r3, 8005b16 <_dtoa_r+0x76e>
 8005ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d067      	beq.n	8005bb0 <_dtoa_r+0x808>
 8005ae0:	b18f      	cbz	r7, 8005b06 <_dtoa_r+0x75e>
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	463a      	mov	r2, r7
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f000 fbaa 	bl	8006240 <__pow5mult>
 8005aec:	9a04      	ldr	r2, [sp, #16]
 8005aee:	4601      	mov	r1, r0
 8005af0:	4606      	mov	r6, r0
 8005af2:	4620      	mov	r0, r4
 8005af4:	f000 fb0e 	bl	8006114 <__multiply>
 8005af8:	9904      	ldr	r1, [sp, #16]
 8005afa:	9008      	str	r0, [sp, #32]
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fa60 	bl	8005fc2 <_Bfree>
 8005b02:	9b08      	ldr	r3, [sp, #32]
 8005b04:	9304      	str	r3, [sp, #16]
 8005b06:	9b07      	ldr	r3, [sp, #28]
 8005b08:	1bda      	subs	r2, r3, r7
 8005b0a:	d004      	beq.n	8005b16 <_dtoa_r+0x76e>
 8005b0c:	9904      	ldr	r1, [sp, #16]
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 fb96 	bl	8006240 <__pow5mult>
 8005b14:	9004      	str	r0, [sp, #16]
 8005b16:	2101      	movs	r1, #1
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 faf2 	bl	8006102 <__i2b>
 8005b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b20:	4607      	mov	r7, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 81d0 	beq.w	8005ec8 <_dtoa_r+0xb20>
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f000 fb87 	bl	8006240 <__pow5mult>
 8005b32:	9b06      	ldr	r3, [sp, #24]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	4607      	mov	r7, r0
 8005b38:	dc40      	bgt.n	8005bbc <_dtoa_r+0x814>
 8005b3a:	9b00      	ldr	r3, [sp, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d139      	bne.n	8005bb4 <_dtoa_r+0x80c>
 8005b40:	9b01      	ldr	r3, [sp, #4]
 8005b42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d136      	bne.n	8005bb8 <_dtoa_r+0x810>
 8005b4a:	9b01      	ldr	r3, [sp, #4]
 8005b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b50:	0d1b      	lsrs	r3, r3, #20
 8005b52:	051b      	lsls	r3, r3, #20
 8005b54:	b12b      	cbz	r3, 8005b62 <_dtoa_r+0x7ba>
 8005b56:	9b05      	ldr	r3, [sp, #20]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	9305      	str	r3, [sp, #20]
 8005b5c:	f108 0801 	add.w	r8, r8, #1
 8005b60:	2301      	movs	r3, #1
 8005b62:	9307      	str	r3, [sp, #28]
 8005b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d12a      	bne.n	8005bc0 <_dtoa_r+0x818>
 8005b6a:	2001      	movs	r0, #1
 8005b6c:	e030      	b.n	8005bd0 <_dtoa_r+0x828>
 8005b6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b74:	e795      	b.n	8005aa2 <_dtoa_r+0x6fa>
 8005b76:	9b07      	ldr	r3, [sp, #28]
 8005b78:	f109 37ff 	add.w	r7, r9, #4294967295
 8005b7c:	42bb      	cmp	r3, r7
 8005b7e:	bfbf      	itttt	lt
 8005b80:	9b07      	ldrlt	r3, [sp, #28]
 8005b82:	9707      	strlt	r7, [sp, #28]
 8005b84:	1afa      	sublt	r2, r7, r3
 8005b86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b88:	bfbb      	ittet	lt
 8005b8a:	189b      	addlt	r3, r3, r2
 8005b8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b8e:	1bdf      	subge	r7, r3, r7
 8005b90:	2700      	movlt	r7, #0
 8005b92:	f1b9 0f00 	cmp.w	r9, #0
 8005b96:	bfb5      	itete	lt
 8005b98:	9b05      	ldrlt	r3, [sp, #20]
 8005b9a:	9d05      	ldrge	r5, [sp, #20]
 8005b9c:	eba3 0509 	sublt.w	r5, r3, r9
 8005ba0:	464b      	movge	r3, r9
 8005ba2:	bfb8      	it	lt
 8005ba4:	2300      	movlt	r3, #0
 8005ba6:	e77e      	b.n	8005aa6 <_dtoa_r+0x6fe>
 8005ba8:	9f07      	ldr	r7, [sp, #28]
 8005baa:	9d05      	ldr	r5, [sp, #20]
 8005bac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005bae:	e783      	b.n	8005ab8 <_dtoa_r+0x710>
 8005bb0:	9a07      	ldr	r2, [sp, #28]
 8005bb2:	e7ab      	b.n	8005b0c <_dtoa_r+0x764>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e7d4      	b.n	8005b62 <_dtoa_r+0x7ba>
 8005bb8:	9b00      	ldr	r3, [sp, #0]
 8005bba:	e7d2      	b.n	8005b62 <_dtoa_r+0x7ba>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	9307      	str	r3, [sp, #28]
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005bc6:	6918      	ldr	r0, [r3, #16]
 8005bc8:	f000 fa4d 	bl	8006066 <__hi0bits>
 8005bcc:	f1c0 0020 	rsb	r0, r0, #32
 8005bd0:	4440      	add	r0, r8
 8005bd2:	f010 001f 	ands.w	r0, r0, #31
 8005bd6:	d047      	beq.n	8005c68 <_dtoa_r+0x8c0>
 8005bd8:	f1c0 0320 	rsb	r3, r0, #32
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	dd3b      	ble.n	8005c58 <_dtoa_r+0x8b0>
 8005be0:	9b05      	ldr	r3, [sp, #20]
 8005be2:	f1c0 001c 	rsb	r0, r0, #28
 8005be6:	4403      	add	r3, r0
 8005be8:	9305      	str	r3, [sp, #20]
 8005bea:	4405      	add	r5, r0
 8005bec:	4480      	add	r8, r0
 8005bee:	9b05      	ldr	r3, [sp, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dd05      	ble.n	8005c00 <_dtoa_r+0x858>
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	9904      	ldr	r1, [sp, #16]
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 fb6f 	bl	80062dc <__lshift>
 8005bfe:	9004      	str	r0, [sp, #16]
 8005c00:	f1b8 0f00 	cmp.w	r8, #0
 8005c04:	dd05      	ble.n	8005c12 <_dtoa_r+0x86a>
 8005c06:	4639      	mov	r1, r7
 8005c08:	4642      	mov	r2, r8
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f000 fb66 	bl	80062dc <__lshift>
 8005c10:	4607      	mov	r7, r0
 8005c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c14:	b353      	cbz	r3, 8005c6c <_dtoa_r+0x8c4>
 8005c16:	4639      	mov	r1, r7
 8005c18:	9804      	ldr	r0, [sp, #16]
 8005c1a:	f000 fbb3 	bl	8006384 <__mcmp>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	da24      	bge.n	8005c6c <_dtoa_r+0x8c4>
 8005c22:	2300      	movs	r3, #0
 8005c24:	220a      	movs	r2, #10
 8005c26:	9904      	ldr	r1, [sp, #16]
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 f9e1 	bl	8005ff0 <__multadd>
 8005c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c30:	9004      	str	r0, [sp, #16]
 8005c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 814d 	beq.w	8005ed6 <_dtoa_r+0xb2e>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4631      	mov	r1, r6
 8005c40:	220a      	movs	r2, #10
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 f9d4 	bl	8005ff0 <__multadd>
 8005c48:	9b02      	ldr	r3, [sp, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	dc4f      	bgt.n	8005cf0 <_dtoa_r+0x948>
 8005c50:	9b06      	ldr	r3, [sp, #24]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	dd4c      	ble.n	8005cf0 <_dtoa_r+0x948>
 8005c56:	e011      	b.n	8005c7c <_dtoa_r+0x8d4>
 8005c58:	d0c9      	beq.n	8005bee <_dtoa_r+0x846>
 8005c5a:	9a05      	ldr	r2, [sp, #20]
 8005c5c:	331c      	adds	r3, #28
 8005c5e:	441a      	add	r2, r3
 8005c60:	9205      	str	r2, [sp, #20]
 8005c62:	441d      	add	r5, r3
 8005c64:	4498      	add	r8, r3
 8005c66:	e7c2      	b.n	8005bee <_dtoa_r+0x846>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	e7f6      	b.n	8005c5a <_dtoa_r+0x8b2>
 8005c6c:	f1b9 0f00 	cmp.w	r9, #0
 8005c70:	dc38      	bgt.n	8005ce4 <_dtoa_r+0x93c>
 8005c72:	9b06      	ldr	r3, [sp, #24]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	dd35      	ble.n	8005ce4 <_dtoa_r+0x93c>
 8005c78:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c7c:	9b02      	ldr	r3, [sp, #8]
 8005c7e:	b963      	cbnz	r3, 8005c9a <_dtoa_r+0x8f2>
 8005c80:	4639      	mov	r1, r7
 8005c82:	2205      	movs	r2, #5
 8005c84:	4620      	mov	r0, r4
 8005c86:	f000 f9b3 	bl	8005ff0 <__multadd>
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	4607      	mov	r7, r0
 8005c8e:	9804      	ldr	r0, [sp, #16]
 8005c90:	f000 fb78 	bl	8006384 <__mcmp>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	f73f adcc 	bgt.w	8005832 <_dtoa_r+0x48a>
 8005c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c9c:	465d      	mov	r5, fp
 8005c9e:	ea6f 0a03 	mvn.w	sl, r3
 8005ca2:	f04f 0900 	mov.w	r9, #0
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 f98a 	bl	8005fc2 <_Bfree>
 8005cae:	2e00      	cmp	r6, #0
 8005cb0:	f43f aeb7 	beq.w	8005a22 <_dtoa_r+0x67a>
 8005cb4:	f1b9 0f00 	cmp.w	r9, #0
 8005cb8:	d005      	beq.n	8005cc6 <_dtoa_r+0x91e>
 8005cba:	45b1      	cmp	r9, r6
 8005cbc:	d003      	beq.n	8005cc6 <_dtoa_r+0x91e>
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f000 f97e 	bl	8005fc2 <_Bfree>
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 f97a 	bl	8005fc2 <_Bfree>
 8005cce:	e6a8      	b.n	8005a22 <_dtoa_r+0x67a>
 8005cd0:	2700      	movs	r7, #0
 8005cd2:	463e      	mov	r6, r7
 8005cd4:	e7e1      	b.n	8005c9a <_dtoa_r+0x8f2>
 8005cd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005cda:	463e      	mov	r6, r7
 8005cdc:	e5a9      	b.n	8005832 <_dtoa_r+0x48a>
 8005cde:	bf00      	nop
 8005ce0:	40240000 	.word	0x40240000
 8005ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce6:	f8cd 9008 	str.w	r9, [sp, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 80fa 	beq.w	8005ee4 <_dtoa_r+0xb3c>
 8005cf0:	2d00      	cmp	r5, #0
 8005cf2:	dd05      	ble.n	8005d00 <_dtoa_r+0x958>
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	462a      	mov	r2, r5
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f000 faef 	bl	80062dc <__lshift>
 8005cfe:	4606      	mov	r6, r0
 8005d00:	9b07      	ldr	r3, [sp, #28]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d04c      	beq.n	8005da0 <_dtoa_r+0x9f8>
 8005d06:	6871      	ldr	r1, [r6, #4]
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 f926 	bl	8005f5a <_Balloc>
 8005d0e:	6932      	ldr	r2, [r6, #16]
 8005d10:	3202      	adds	r2, #2
 8005d12:	4605      	mov	r5, r0
 8005d14:	0092      	lsls	r2, r2, #2
 8005d16:	f106 010c 	add.w	r1, r6, #12
 8005d1a:	300c      	adds	r0, #12
 8005d1c:	f000 f912 	bl	8005f44 <memcpy>
 8005d20:	2201      	movs	r2, #1
 8005d22:	4629      	mov	r1, r5
 8005d24:	4620      	mov	r0, r4
 8005d26:	f000 fad9 	bl	80062dc <__lshift>
 8005d2a:	9b00      	ldr	r3, [sp, #0]
 8005d2c:	f8cd b014 	str.w	fp, [sp, #20]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	46b1      	mov	r9, r6
 8005d36:	9307      	str	r3, [sp, #28]
 8005d38:	4606      	mov	r6, r0
 8005d3a:	4639      	mov	r1, r7
 8005d3c:	9804      	ldr	r0, [sp, #16]
 8005d3e:	f7ff faa5 	bl	800528c <quorem>
 8005d42:	4649      	mov	r1, r9
 8005d44:	4605      	mov	r5, r0
 8005d46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d4a:	9804      	ldr	r0, [sp, #16]
 8005d4c:	f000 fb1a 	bl	8006384 <__mcmp>
 8005d50:	4632      	mov	r2, r6
 8005d52:	9000      	str	r0, [sp, #0]
 8005d54:	4639      	mov	r1, r7
 8005d56:	4620      	mov	r0, r4
 8005d58:	f000 fb2e 	bl	80063b8 <__mdiff>
 8005d5c:	68c3      	ldr	r3, [r0, #12]
 8005d5e:	4602      	mov	r2, r0
 8005d60:	bb03      	cbnz	r3, 8005da4 <_dtoa_r+0x9fc>
 8005d62:	4601      	mov	r1, r0
 8005d64:	9008      	str	r0, [sp, #32]
 8005d66:	9804      	ldr	r0, [sp, #16]
 8005d68:	f000 fb0c 	bl	8006384 <__mcmp>
 8005d6c:	9a08      	ldr	r2, [sp, #32]
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4611      	mov	r1, r2
 8005d72:	4620      	mov	r0, r4
 8005d74:	9308      	str	r3, [sp, #32]
 8005d76:	f000 f924 	bl	8005fc2 <_Bfree>
 8005d7a:	9b08      	ldr	r3, [sp, #32]
 8005d7c:	b9a3      	cbnz	r3, 8005da8 <_dtoa_r+0xa00>
 8005d7e:	9a06      	ldr	r2, [sp, #24]
 8005d80:	b992      	cbnz	r2, 8005da8 <_dtoa_r+0xa00>
 8005d82:	9a07      	ldr	r2, [sp, #28]
 8005d84:	b982      	cbnz	r2, 8005da8 <_dtoa_r+0xa00>
 8005d86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d8a:	d029      	beq.n	8005de0 <_dtoa_r+0xa38>
 8005d8c:	9b00      	ldr	r3, [sp, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	dd01      	ble.n	8005d96 <_dtoa_r+0x9ee>
 8005d92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005d96:	9b05      	ldr	r3, [sp, #20]
 8005d98:	1c5d      	adds	r5, r3, #1
 8005d9a:	f883 8000 	strb.w	r8, [r3]
 8005d9e:	e782      	b.n	8005ca6 <_dtoa_r+0x8fe>
 8005da0:	4630      	mov	r0, r6
 8005da2:	e7c2      	b.n	8005d2a <_dtoa_r+0x982>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e7e3      	b.n	8005d70 <_dtoa_r+0x9c8>
 8005da8:	9a00      	ldr	r2, [sp, #0]
 8005daa:	2a00      	cmp	r2, #0
 8005dac:	db04      	blt.n	8005db8 <_dtoa_r+0xa10>
 8005dae:	d125      	bne.n	8005dfc <_dtoa_r+0xa54>
 8005db0:	9a06      	ldr	r2, [sp, #24]
 8005db2:	bb1a      	cbnz	r2, 8005dfc <_dtoa_r+0xa54>
 8005db4:	9a07      	ldr	r2, [sp, #28]
 8005db6:	bb0a      	cbnz	r2, 8005dfc <_dtoa_r+0xa54>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	ddec      	ble.n	8005d96 <_dtoa_r+0x9ee>
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	9904      	ldr	r1, [sp, #16]
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 fa8b 	bl	80062dc <__lshift>
 8005dc6:	4639      	mov	r1, r7
 8005dc8:	9004      	str	r0, [sp, #16]
 8005dca:	f000 fadb 	bl	8006384 <__mcmp>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	dc03      	bgt.n	8005dda <_dtoa_r+0xa32>
 8005dd2:	d1e0      	bne.n	8005d96 <_dtoa_r+0x9ee>
 8005dd4:	f018 0f01 	tst.w	r8, #1
 8005dd8:	d0dd      	beq.n	8005d96 <_dtoa_r+0x9ee>
 8005dda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dde:	d1d8      	bne.n	8005d92 <_dtoa_r+0x9ea>
 8005de0:	9b05      	ldr	r3, [sp, #20]
 8005de2:	9a05      	ldr	r2, [sp, #20]
 8005de4:	1c5d      	adds	r5, r3, #1
 8005de6:	2339      	movs	r3, #57	; 0x39
 8005de8:	7013      	strb	r3, [r2, #0]
 8005dea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005dee:	2b39      	cmp	r3, #57	; 0x39
 8005df0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005df4:	d04f      	beq.n	8005e96 <_dtoa_r+0xaee>
 8005df6:	3301      	adds	r3, #1
 8005df8:	7013      	strb	r3, [r2, #0]
 8005dfa:	e754      	b.n	8005ca6 <_dtoa_r+0x8fe>
 8005dfc:	9a05      	ldr	r2, [sp, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f102 0501 	add.w	r5, r2, #1
 8005e04:	dd06      	ble.n	8005e14 <_dtoa_r+0xa6c>
 8005e06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e0a:	d0e9      	beq.n	8005de0 <_dtoa_r+0xa38>
 8005e0c:	f108 0801 	add.w	r8, r8, #1
 8005e10:	9b05      	ldr	r3, [sp, #20]
 8005e12:	e7c2      	b.n	8005d9a <_dtoa_r+0x9f2>
 8005e14:	9a02      	ldr	r2, [sp, #8]
 8005e16:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e1a:	eba5 030b 	sub.w	r3, r5, fp
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d021      	beq.n	8005e66 <_dtoa_r+0xabe>
 8005e22:	2300      	movs	r3, #0
 8005e24:	220a      	movs	r2, #10
 8005e26:	9904      	ldr	r1, [sp, #16]
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 f8e1 	bl	8005ff0 <__multadd>
 8005e2e:	45b1      	cmp	r9, r6
 8005e30:	9004      	str	r0, [sp, #16]
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	f04f 020a 	mov.w	r2, #10
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	d105      	bne.n	8005e4c <_dtoa_r+0xaa4>
 8005e40:	f000 f8d6 	bl	8005ff0 <__multadd>
 8005e44:	4681      	mov	r9, r0
 8005e46:	4606      	mov	r6, r0
 8005e48:	9505      	str	r5, [sp, #20]
 8005e4a:	e776      	b.n	8005d3a <_dtoa_r+0x992>
 8005e4c:	f000 f8d0 	bl	8005ff0 <__multadd>
 8005e50:	4631      	mov	r1, r6
 8005e52:	4681      	mov	r9, r0
 8005e54:	2300      	movs	r3, #0
 8005e56:	220a      	movs	r2, #10
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 f8c9 	bl	8005ff0 <__multadd>
 8005e5e:	4606      	mov	r6, r0
 8005e60:	e7f2      	b.n	8005e48 <_dtoa_r+0xaa0>
 8005e62:	f04f 0900 	mov.w	r9, #0
 8005e66:	2201      	movs	r2, #1
 8005e68:	9904      	ldr	r1, [sp, #16]
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f000 fa36 	bl	80062dc <__lshift>
 8005e70:	4639      	mov	r1, r7
 8005e72:	9004      	str	r0, [sp, #16]
 8005e74:	f000 fa86 	bl	8006384 <__mcmp>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	dcb6      	bgt.n	8005dea <_dtoa_r+0xa42>
 8005e7c:	d102      	bne.n	8005e84 <_dtoa_r+0xadc>
 8005e7e:	f018 0f01 	tst.w	r8, #1
 8005e82:	d1b2      	bne.n	8005dea <_dtoa_r+0xa42>
 8005e84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e88:	2b30      	cmp	r3, #48	; 0x30
 8005e8a:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e8e:	f47f af0a 	bne.w	8005ca6 <_dtoa_r+0x8fe>
 8005e92:	4615      	mov	r5, r2
 8005e94:	e7f6      	b.n	8005e84 <_dtoa_r+0xadc>
 8005e96:	4593      	cmp	fp, r2
 8005e98:	d105      	bne.n	8005ea6 <_dtoa_r+0xafe>
 8005e9a:	2331      	movs	r3, #49	; 0x31
 8005e9c:	f10a 0a01 	add.w	sl, sl, #1
 8005ea0:	f88b 3000 	strb.w	r3, [fp]
 8005ea4:	e6ff      	b.n	8005ca6 <_dtoa_r+0x8fe>
 8005ea6:	4615      	mov	r5, r2
 8005ea8:	e79f      	b.n	8005dea <_dtoa_r+0xa42>
 8005eaa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005f10 <_dtoa_r+0xb68>
 8005eae:	e007      	b.n	8005ec0 <_dtoa_r+0xb18>
 8005eb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005eb2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005f14 <_dtoa_r+0xb6c>
 8005eb6:	b11b      	cbz	r3, 8005ec0 <_dtoa_r+0xb18>
 8005eb8:	f10b 0308 	add.w	r3, fp, #8
 8005ebc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	4658      	mov	r0, fp
 8005ec2:	b017      	add	sp, #92	; 0x5c
 8005ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec8:	9b06      	ldr	r3, [sp, #24]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	f77f ae35 	ble.w	8005b3a <_dtoa_r+0x792>
 8005ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ed2:	9307      	str	r3, [sp, #28]
 8005ed4:	e649      	b.n	8005b6a <_dtoa_r+0x7c2>
 8005ed6:	9b02      	ldr	r3, [sp, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dc03      	bgt.n	8005ee4 <_dtoa_r+0xb3c>
 8005edc:	9b06      	ldr	r3, [sp, #24]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	f73f aecc 	bgt.w	8005c7c <_dtoa_r+0x8d4>
 8005ee4:	465d      	mov	r5, fp
 8005ee6:	4639      	mov	r1, r7
 8005ee8:	9804      	ldr	r0, [sp, #16]
 8005eea:	f7ff f9cf 	bl	800528c <quorem>
 8005eee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005ef2:	f805 8b01 	strb.w	r8, [r5], #1
 8005ef6:	9a02      	ldr	r2, [sp, #8]
 8005ef8:	eba5 030b 	sub.w	r3, r5, fp
 8005efc:	429a      	cmp	r2, r3
 8005efe:	ddb0      	ble.n	8005e62 <_dtoa_r+0xaba>
 8005f00:	2300      	movs	r3, #0
 8005f02:	220a      	movs	r2, #10
 8005f04:	9904      	ldr	r1, [sp, #16]
 8005f06:	4620      	mov	r0, r4
 8005f08:	f000 f872 	bl	8005ff0 <__multadd>
 8005f0c:	9004      	str	r0, [sp, #16]
 8005f0e:	e7ea      	b.n	8005ee6 <_dtoa_r+0xb3e>
 8005f10:	08006ab8 	.word	0x08006ab8
 8005f14:	08006adc 	.word	0x08006adc

08005f18 <_localeconv_r>:
 8005f18:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <_localeconv_r+0x14>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6a18      	ldr	r0, [r3, #32]
 8005f1e:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <_localeconv_r+0x18>)
 8005f20:	2800      	cmp	r0, #0
 8005f22:	bf08      	it	eq
 8005f24:	4618      	moveq	r0, r3
 8005f26:	30f0      	adds	r0, #240	; 0xf0
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	2000000c 	.word	0x2000000c
 8005f30:	20000070 	.word	0x20000070

08005f34 <malloc>:
 8005f34:	4b02      	ldr	r3, [pc, #8]	; (8005f40 <malloc+0xc>)
 8005f36:	4601      	mov	r1, r0
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	f000 bb45 	b.w	80065c8 <_malloc_r>
 8005f3e:	bf00      	nop
 8005f40:	2000000c 	.word	0x2000000c

08005f44 <memcpy>:
 8005f44:	b510      	push	{r4, lr}
 8005f46:	1e43      	subs	r3, r0, #1
 8005f48:	440a      	add	r2, r1
 8005f4a:	4291      	cmp	r1, r2
 8005f4c:	d100      	bne.n	8005f50 <memcpy+0xc>
 8005f4e:	bd10      	pop	{r4, pc}
 8005f50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f58:	e7f7      	b.n	8005f4a <memcpy+0x6>

08005f5a <_Balloc>:
 8005f5a:	b570      	push	{r4, r5, r6, lr}
 8005f5c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f5e:	4604      	mov	r4, r0
 8005f60:	460e      	mov	r6, r1
 8005f62:	b93d      	cbnz	r5, 8005f74 <_Balloc+0x1a>
 8005f64:	2010      	movs	r0, #16
 8005f66:	f7ff ffe5 	bl	8005f34 <malloc>
 8005f6a:	6260      	str	r0, [r4, #36]	; 0x24
 8005f6c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f70:	6005      	str	r5, [r0, #0]
 8005f72:	60c5      	str	r5, [r0, #12]
 8005f74:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f76:	68eb      	ldr	r3, [r5, #12]
 8005f78:	b183      	cbz	r3, 8005f9c <_Balloc+0x42>
 8005f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f82:	b9b8      	cbnz	r0, 8005fb4 <_Balloc+0x5a>
 8005f84:	2101      	movs	r1, #1
 8005f86:	fa01 f506 	lsl.w	r5, r1, r6
 8005f8a:	1d6a      	adds	r2, r5, #5
 8005f8c:	0092      	lsls	r2, r2, #2
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f000 fabe 	bl	8006510 <_calloc_r>
 8005f94:	b160      	cbz	r0, 8005fb0 <_Balloc+0x56>
 8005f96:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f9a:	e00e      	b.n	8005fba <_Balloc+0x60>
 8005f9c:	2221      	movs	r2, #33	; 0x21
 8005f9e:	2104      	movs	r1, #4
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fab5 	bl	8006510 <_calloc_r>
 8005fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fa8:	60e8      	str	r0, [r5, #12]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e4      	bne.n	8005f7a <_Balloc+0x20>
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
 8005fb4:	6802      	ldr	r2, [r0, #0]
 8005fb6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fc0:	e7f7      	b.n	8005fb2 <_Balloc+0x58>

08005fc2 <_Bfree>:
 8005fc2:	b570      	push	{r4, r5, r6, lr}
 8005fc4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	460d      	mov	r5, r1
 8005fca:	b93c      	cbnz	r4, 8005fdc <_Bfree+0x1a>
 8005fcc:	2010      	movs	r0, #16
 8005fce:	f7ff ffb1 	bl	8005f34 <malloc>
 8005fd2:	6270      	str	r0, [r6, #36]	; 0x24
 8005fd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fd8:	6004      	str	r4, [r0, #0]
 8005fda:	60c4      	str	r4, [r0, #12]
 8005fdc:	b13d      	cbz	r5, 8005fee <_Bfree+0x2c>
 8005fde:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005fe0:	686a      	ldr	r2, [r5, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fe8:	6029      	str	r1, [r5, #0]
 8005fea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005fee:	bd70      	pop	{r4, r5, r6, pc}

08005ff0 <__multadd>:
 8005ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff4:	690d      	ldr	r5, [r1, #16]
 8005ff6:	461f      	mov	r7, r3
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	f101 0c14 	add.w	ip, r1, #20
 8006000:	2300      	movs	r3, #0
 8006002:	f8dc 0000 	ldr.w	r0, [ip]
 8006006:	b281      	uxth	r1, r0
 8006008:	fb02 7101 	mla	r1, r2, r1, r7
 800600c:	0c0f      	lsrs	r7, r1, #16
 800600e:	0c00      	lsrs	r0, r0, #16
 8006010:	fb02 7000 	mla	r0, r2, r0, r7
 8006014:	b289      	uxth	r1, r1
 8006016:	3301      	adds	r3, #1
 8006018:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800601c:	429d      	cmp	r5, r3
 800601e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006022:	f84c 1b04 	str.w	r1, [ip], #4
 8006026:	dcec      	bgt.n	8006002 <__multadd+0x12>
 8006028:	b1d7      	cbz	r7, 8006060 <__multadd+0x70>
 800602a:	68a3      	ldr	r3, [r4, #8]
 800602c:	42ab      	cmp	r3, r5
 800602e:	dc12      	bgt.n	8006056 <__multadd+0x66>
 8006030:	6861      	ldr	r1, [r4, #4]
 8006032:	4630      	mov	r0, r6
 8006034:	3101      	adds	r1, #1
 8006036:	f7ff ff90 	bl	8005f5a <_Balloc>
 800603a:	6922      	ldr	r2, [r4, #16]
 800603c:	3202      	adds	r2, #2
 800603e:	f104 010c 	add.w	r1, r4, #12
 8006042:	4680      	mov	r8, r0
 8006044:	0092      	lsls	r2, r2, #2
 8006046:	300c      	adds	r0, #12
 8006048:	f7ff ff7c 	bl	8005f44 <memcpy>
 800604c:	4621      	mov	r1, r4
 800604e:	4630      	mov	r0, r6
 8006050:	f7ff ffb7 	bl	8005fc2 <_Bfree>
 8006054:	4644      	mov	r4, r8
 8006056:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800605a:	3501      	adds	r5, #1
 800605c:	615f      	str	r7, [r3, #20]
 800605e:	6125      	str	r5, [r4, #16]
 8006060:	4620      	mov	r0, r4
 8006062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006066 <__hi0bits>:
 8006066:	0c02      	lsrs	r2, r0, #16
 8006068:	0412      	lsls	r2, r2, #16
 800606a:	4603      	mov	r3, r0
 800606c:	b9b2      	cbnz	r2, 800609c <__hi0bits+0x36>
 800606e:	0403      	lsls	r3, r0, #16
 8006070:	2010      	movs	r0, #16
 8006072:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006076:	bf04      	itt	eq
 8006078:	021b      	lsleq	r3, r3, #8
 800607a:	3008      	addeq	r0, #8
 800607c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006080:	bf04      	itt	eq
 8006082:	011b      	lsleq	r3, r3, #4
 8006084:	3004      	addeq	r0, #4
 8006086:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800608a:	bf04      	itt	eq
 800608c:	009b      	lsleq	r3, r3, #2
 800608e:	3002      	addeq	r0, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	db06      	blt.n	80060a2 <__hi0bits+0x3c>
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	d503      	bpl.n	80060a0 <__hi0bits+0x3a>
 8006098:	3001      	adds	r0, #1
 800609a:	4770      	bx	lr
 800609c:	2000      	movs	r0, #0
 800609e:	e7e8      	b.n	8006072 <__hi0bits+0xc>
 80060a0:	2020      	movs	r0, #32
 80060a2:	4770      	bx	lr

080060a4 <__lo0bits>:
 80060a4:	6803      	ldr	r3, [r0, #0]
 80060a6:	f013 0207 	ands.w	r2, r3, #7
 80060aa:	4601      	mov	r1, r0
 80060ac:	d00b      	beq.n	80060c6 <__lo0bits+0x22>
 80060ae:	07da      	lsls	r2, r3, #31
 80060b0:	d423      	bmi.n	80060fa <__lo0bits+0x56>
 80060b2:	0798      	lsls	r0, r3, #30
 80060b4:	bf49      	itett	mi
 80060b6:	085b      	lsrmi	r3, r3, #1
 80060b8:	089b      	lsrpl	r3, r3, #2
 80060ba:	2001      	movmi	r0, #1
 80060bc:	600b      	strmi	r3, [r1, #0]
 80060be:	bf5c      	itt	pl
 80060c0:	600b      	strpl	r3, [r1, #0]
 80060c2:	2002      	movpl	r0, #2
 80060c4:	4770      	bx	lr
 80060c6:	b298      	uxth	r0, r3
 80060c8:	b9a8      	cbnz	r0, 80060f6 <__lo0bits+0x52>
 80060ca:	0c1b      	lsrs	r3, r3, #16
 80060cc:	2010      	movs	r0, #16
 80060ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80060d2:	bf04      	itt	eq
 80060d4:	0a1b      	lsreq	r3, r3, #8
 80060d6:	3008      	addeq	r0, #8
 80060d8:	071a      	lsls	r2, r3, #28
 80060da:	bf04      	itt	eq
 80060dc:	091b      	lsreq	r3, r3, #4
 80060de:	3004      	addeq	r0, #4
 80060e0:	079a      	lsls	r2, r3, #30
 80060e2:	bf04      	itt	eq
 80060e4:	089b      	lsreq	r3, r3, #2
 80060e6:	3002      	addeq	r0, #2
 80060e8:	07da      	lsls	r2, r3, #31
 80060ea:	d402      	bmi.n	80060f2 <__lo0bits+0x4e>
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	d006      	beq.n	80060fe <__lo0bits+0x5a>
 80060f0:	3001      	adds	r0, #1
 80060f2:	600b      	str	r3, [r1, #0]
 80060f4:	4770      	bx	lr
 80060f6:	4610      	mov	r0, r2
 80060f8:	e7e9      	b.n	80060ce <__lo0bits+0x2a>
 80060fa:	2000      	movs	r0, #0
 80060fc:	4770      	bx	lr
 80060fe:	2020      	movs	r0, #32
 8006100:	4770      	bx	lr

08006102 <__i2b>:
 8006102:	b510      	push	{r4, lr}
 8006104:	460c      	mov	r4, r1
 8006106:	2101      	movs	r1, #1
 8006108:	f7ff ff27 	bl	8005f5a <_Balloc>
 800610c:	2201      	movs	r2, #1
 800610e:	6144      	str	r4, [r0, #20]
 8006110:	6102      	str	r2, [r0, #16]
 8006112:	bd10      	pop	{r4, pc}

08006114 <__multiply>:
 8006114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006118:	4614      	mov	r4, r2
 800611a:	690a      	ldr	r2, [r1, #16]
 800611c:	6923      	ldr	r3, [r4, #16]
 800611e:	429a      	cmp	r2, r3
 8006120:	bfb8      	it	lt
 8006122:	460b      	movlt	r3, r1
 8006124:	4688      	mov	r8, r1
 8006126:	bfbc      	itt	lt
 8006128:	46a0      	movlt	r8, r4
 800612a:	461c      	movlt	r4, r3
 800612c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006130:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006134:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006138:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800613c:	eb07 0609 	add.w	r6, r7, r9
 8006140:	42b3      	cmp	r3, r6
 8006142:	bfb8      	it	lt
 8006144:	3101      	addlt	r1, #1
 8006146:	f7ff ff08 	bl	8005f5a <_Balloc>
 800614a:	f100 0514 	add.w	r5, r0, #20
 800614e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006152:	462b      	mov	r3, r5
 8006154:	2200      	movs	r2, #0
 8006156:	4573      	cmp	r3, lr
 8006158:	d316      	bcc.n	8006188 <__multiply+0x74>
 800615a:	f104 0214 	add.w	r2, r4, #20
 800615e:	f108 0114 	add.w	r1, r8, #20
 8006162:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006166:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	9b00      	ldr	r3, [sp, #0]
 800616e:	9201      	str	r2, [sp, #4]
 8006170:	4293      	cmp	r3, r2
 8006172:	d80c      	bhi.n	800618e <__multiply+0x7a>
 8006174:	2e00      	cmp	r6, #0
 8006176:	dd03      	ble.n	8006180 <__multiply+0x6c>
 8006178:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800617c:	2b00      	cmp	r3, #0
 800617e:	d05d      	beq.n	800623c <__multiply+0x128>
 8006180:	6106      	str	r6, [r0, #16]
 8006182:	b003      	add	sp, #12
 8006184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006188:	f843 2b04 	str.w	r2, [r3], #4
 800618c:	e7e3      	b.n	8006156 <__multiply+0x42>
 800618e:	f8b2 b000 	ldrh.w	fp, [r2]
 8006192:	f1bb 0f00 	cmp.w	fp, #0
 8006196:	d023      	beq.n	80061e0 <__multiply+0xcc>
 8006198:	4689      	mov	r9, r1
 800619a:	46ac      	mov	ip, r5
 800619c:	f04f 0800 	mov.w	r8, #0
 80061a0:	f859 4b04 	ldr.w	r4, [r9], #4
 80061a4:	f8dc a000 	ldr.w	sl, [ip]
 80061a8:	b2a3      	uxth	r3, r4
 80061aa:	fa1f fa8a 	uxth.w	sl, sl
 80061ae:	fb0b a303 	mla	r3, fp, r3, sl
 80061b2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80061b6:	f8dc 4000 	ldr.w	r4, [ip]
 80061ba:	4443      	add	r3, r8
 80061bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80061c0:	fb0b 840a 	mla	r4, fp, sl, r8
 80061c4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80061c8:	46e2      	mov	sl, ip
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80061d0:	454f      	cmp	r7, r9
 80061d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80061d6:	f84a 3b04 	str.w	r3, [sl], #4
 80061da:	d82b      	bhi.n	8006234 <__multiply+0x120>
 80061dc:	f8cc 8004 	str.w	r8, [ip, #4]
 80061e0:	9b01      	ldr	r3, [sp, #4]
 80061e2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80061e6:	3204      	adds	r2, #4
 80061e8:	f1ba 0f00 	cmp.w	sl, #0
 80061ec:	d020      	beq.n	8006230 <__multiply+0x11c>
 80061ee:	682b      	ldr	r3, [r5, #0]
 80061f0:	4689      	mov	r9, r1
 80061f2:	46a8      	mov	r8, r5
 80061f4:	f04f 0b00 	mov.w	fp, #0
 80061f8:	f8b9 c000 	ldrh.w	ip, [r9]
 80061fc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006200:	fb0a 440c 	mla	r4, sl, ip, r4
 8006204:	445c      	add	r4, fp
 8006206:	46c4      	mov	ip, r8
 8006208:	b29b      	uxth	r3, r3
 800620a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800620e:	f84c 3b04 	str.w	r3, [ip], #4
 8006212:	f859 3b04 	ldr.w	r3, [r9], #4
 8006216:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800621a:	0c1b      	lsrs	r3, r3, #16
 800621c:	fb0a b303 	mla	r3, sl, r3, fp
 8006220:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006224:	454f      	cmp	r7, r9
 8006226:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800622a:	d805      	bhi.n	8006238 <__multiply+0x124>
 800622c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006230:	3504      	adds	r5, #4
 8006232:	e79b      	b.n	800616c <__multiply+0x58>
 8006234:	46d4      	mov	ip, sl
 8006236:	e7b3      	b.n	80061a0 <__multiply+0x8c>
 8006238:	46e0      	mov	r8, ip
 800623a:	e7dd      	b.n	80061f8 <__multiply+0xe4>
 800623c:	3e01      	subs	r6, #1
 800623e:	e799      	b.n	8006174 <__multiply+0x60>

08006240 <__pow5mult>:
 8006240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006244:	4615      	mov	r5, r2
 8006246:	f012 0203 	ands.w	r2, r2, #3
 800624a:	4606      	mov	r6, r0
 800624c:	460f      	mov	r7, r1
 800624e:	d007      	beq.n	8006260 <__pow5mult+0x20>
 8006250:	3a01      	subs	r2, #1
 8006252:	4c21      	ldr	r4, [pc, #132]	; (80062d8 <__pow5mult+0x98>)
 8006254:	2300      	movs	r3, #0
 8006256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800625a:	f7ff fec9 	bl	8005ff0 <__multadd>
 800625e:	4607      	mov	r7, r0
 8006260:	10ad      	asrs	r5, r5, #2
 8006262:	d035      	beq.n	80062d0 <__pow5mult+0x90>
 8006264:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006266:	b93c      	cbnz	r4, 8006278 <__pow5mult+0x38>
 8006268:	2010      	movs	r0, #16
 800626a:	f7ff fe63 	bl	8005f34 <malloc>
 800626e:	6270      	str	r0, [r6, #36]	; 0x24
 8006270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006274:	6004      	str	r4, [r0, #0]
 8006276:	60c4      	str	r4, [r0, #12]
 8006278:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800627c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006280:	b94c      	cbnz	r4, 8006296 <__pow5mult+0x56>
 8006282:	f240 2171 	movw	r1, #625	; 0x271
 8006286:	4630      	mov	r0, r6
 8006288:	f7ff ff3b 	bl	8006102 <__i2b>
 800628c:	2300      	movs	r3, #0
 800628e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006292:	4604      	mov	r4, r0
 8006294:	6003      	str	r3, [r0, #0]
 8006296:	f04f 0800 	mov.w	r8, #0
 800629a:	07eb      	lsls	r3, r5, #31
 800629c:	d50a      	bpl.n	80062b4 <__pow5mult+0x74>
 800629e:	4639      	mov	r1, r7
 80062a0:	4622      	mov	r2, r4
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7ff ff36 	bl	8006114 <__multiply>
 80062a8:	4639      	mov	r1, r7
 80062aa:	4681      	mov	r9, r0
 80062ac:	4630      	mov	r0, r6
 80062ae:	f7ff fe88 	bl	8005fc2 <_Bfree>
 80062b2:	464f      	mov	r7, r9
 80062b4:	106d      	asrs	r5, r5, #1
 80062b6:	d00b      	beq.n	80062d0 <__pow5mult+0x90>
 80062b8:	6820      	ldr	r0, [r4, #0]
 80062ba:	b938      	cbnz	r0, 80062cc <__pow5mult+0x8c>
 80062bc:	4622      	mov	r2, r4
 80062be:	4621      	mov	r1, r4
 80062c0:	4630      	mov	r0, r6
 80062c2:	f7ff ff27 	bl	8006114 <__multiply>
 80062c6:	6020      	str	r0, [r4, #0]
 80062c8:	f8c0 8000 	str.w	r8, [r0]
 80062cc:	4604      	mov	r4, r0
 80062ce:	e7e4      	b.n	800629a <__pow5mult+0x5a>
 80062d0:	4638      	mov	r0, r7
 80062d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062d6:	bf00      	nop
 80062d8:	08006be0 	.word	0x08006be0

080062dc <__lshift>:
 80062dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062e0:	460c      	mov	r4, r1
 80062e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062e6:	6923      	ldr	r3, [r4, #16]
 80062e8:	6849      	ldr	r1, [r1, #4]
 80062ea:	eb0a 0903 	add.w	r9, sl, r3
 80062ee:	68a3      	ldr	r3, [r4, #8]
 80062f0:	4607      	mov	r7, r0
 80062f2:	4616      	mov	r6, r2
 80062f4:	f109 0501 	add.w	r5, r9, #1
 80062f8:	42ab      	cmp	r3, r5
 80062fa:	db32      	blt.n	8006362 <__lshift+0x86>
 80062fc:	4638      	mov	r0, r7
 80062fe:	f7ff fe2c 	bl	8005f5a <_Balloc>
 8006302:	2300      	movs	r3, #0
 8006304:	4680      	mov	r8, r0
 8006306:	f100 0114 	add.w	r1, r0, #20
 800630a:	461a      	mov	r2, r3
 800630c:	4553      	cmp	r3, sl
 800630e:	db2b      	blt.n	8006368 <__lshift+0x8c>
 8006310:	6920      	ldr	r0, [r4, #16]
 8006312:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006316:	f104 0314 	add.w	r3, r4, #20
 800631a:	f016 021f 	ands.w	r2, r6, #31
 800631e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006322:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006326:	d025      	beq.n	8006374 <__lshift+0x98>
 8006328:	f1c2 0e20 	rsb	lr, r2, #32
 800632c:	2000      	movs	r0, #0
 800632e:	681e      	ldr	r6, [r3, #0]
 8006330:	468a      	mov	sl, r1
 8006332:	4096      	lsls	r6, r2
 8006334:	4330      	orrs	r0, r6
 8006336:	f84a 0b04 	str.w	r0, [sl], #4
 800633a:	f853 0b04 	ldr.w	r0, [r3], #4
 800633e:	459c      	cmp	ip, r3
 8006340:	fa20 f00e 	lsr.w	r0, r0, lr
 8006344:	d814      	bhi.n	8006370 <__lshift+0x94>
 8006346:	6048      	str	r0, [r1, #4]
 8006348:	b108      	cbz	r0, 800634e <__lshift+0x72>
 800634a:	f109 0502 	add.w	r5, r9, #2
 800634e:	3d01      	subs	r5, #1
 8006350:	4638      	mov	r0, r7
 8006352:	f8c8 5010 	str.w	r5, [r8, #16]
 8006356:	4621      	mov	r1, r4
 8006358:	f7ff fe33 	bl	8005fc2 <_Bfree>
 800635c:	4640      	mov	r0, r8
 800635e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006362:	3101      	adds	r1, #1
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	e7c7      	b.n	80062f8 <__lshift+0x1c>
 8006368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800636c:	3301      	adds	r3, #1
 800636e:	e7cd      	b.n	800630c <__lshift+0x30>
 8006370:	4651      	mov	r1, sl
 8006372:	e7dc      	b.n	800632e <__lshift+0x52>
 8006374:	3904      	subs	r1, #4
 8006376:	f853 2b04 	ldr.w	r2, [r3], #4
 800637a:	f841 2f04 	str.w	r2, [r1, #4]!
 800637e:	459c      	cmp	ip, r3
 8006380:	d8f9      	bhi.n	8006376 <__lshift+0x9a>
 8006382:	e7e4      	b.n	800634e <__lshift+0x72>

08006384 <__mcmp>:
 8006384:	6903      	ldr	r3, [r0, #16]
 8006386:	690a      	ldr	r2, [r1, #16]
 8006388:	1a9b      	subs	r3, r3, r2
 800638a:	b530      	push	{r4, r5, lr}
 800638c:	d10c      	bne.n	80063a8 <__mcmp+0x24>
 800638e:	0092      	lsls	r2, r2, #2
 8006390:	3014      	adds	r0, #20
 8006392:	3114      	adds	r1, #20
 8006394:	1884      	adds	r4, r0, r2
 8006396:	4411      	add	r1, r2
 8006398:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800639c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80063a0:	4295      	cmp	r5, r2
 80063a2:	d003      	beq.n	80063ac <__mcmp+0x28>
 80063a4:	d305      	bcc.n	80063b2 <__mcmp+0x2e>
 80063a6:	2301      	movs	r3, #1
 80063a8:	4618      	mov	r0, r3
 80063aa:	bd30      	pop	{r4, r5, pc}
 80063ac:	42a0      	cmp	r0, r4
 80063ae:	d3f3      	bcc.n	8006398 <__mcmp+0x14>
 80063b0:	e7fa      	b.n	80063a8 <__mcmp+0x24>
 80063b2:	f04f 33ff 	mov.w	r3, #4294967295
 80063b6:	e7f7      	b.n	80063a8 <__mcmp+0x24>

080063b8 <__mdiff>:
 80063b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063bc:	460d      	mov	r5, r1
 80063be:	4607      	mov	r7, r0
 80063c0:	4611      	mov	r1, r2
 80063c2:	4628      	mov	r0, r5
 80063c4:	4614      	mov	r4, r2
 80063c6:	f7ff ffdd 	bl	8006384 <__mcmp>
 80063ca:	1e06      	subs	r6, r0, #0
 80063cc:	d108      	bne.n	80063e0 <__mdiff+0x28>
 80063ce:	4631      	mov	r1, r6
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff fdc2 	bl	8005f5a <_Balloc>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80063dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e0:	bfa4      	itt	ge
 80063e2:	4623      	movge	r3, r4
 80063e4:	462c      	movge	r4, r5
 80063e6:	4638      	mov	r0, r7
 80063e8:	6861      	ldr	r1, [r4, #4]
 80063ea:	bfa6      	itte	ge
 80063ec:	461d      	movge	r5, r3
 80063ee:	2600      	movge	r6, #0
 80063f0:	2601      	movlt	r6, #1
 80063f2:	f7ff fdb2 	bl	8005f5a <_Balloc>
 80063f6:	692b      	ldr	r3, [r5, #16]
 80063f8:	60c6      	str	r6, [r0, #12]
 80063fa:	6926      	ldr	r6, [r4, #16]
 80063fc:	f105 0914 	add.w	r9, r5, #20
 8006400:	f104 0214 	add.w	r2, r4, #20
 8006404:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006408:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800640c:	f100 0514 	add.w	r5, r0, #20
 8006410:	f04f 0e00 	mov.w	lr, #0
 8006414:	f852 ab04 	ldr.w	sl, [r2], #4
 8006418:	f859 4b04 	ldr.w	r4, [r9], #4
 800641c:	fa1e f18a 	uxtah	r1, lr, sl
 8006420:	b2a3      	uxth	r3, r4
 8006422:	1ac9      	subs	r1, r1, r3
 8006424:	0c23      	lsrs	r3, r4, #16
 8006426:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800642a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800642e:	b289      	uxth	r1, r1
 8006430:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006434:	45c8      	cmp	r8, r9
 8006436:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800643a:	4694      	mov	ip, r2
 800643c:	f845 3b04 	str.w	r3, [r5], #4
 8006440:	d8e8      	bhi.n	8006414 <__mdiff+0x5c>
 8006442:	45bc      	cmp	ip, r7
 8006444:	d304      	bcc.n	8006450 <__mdiff+0x98>
 8006446:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800644a:	b183      	cbz	r3, 800646e <__mdiff+0xb6>
 800644c:	6106      	str	r6, [r0, #16]
 800644e:	e7c5      	b.n	80063dc <__mdiff+0x24>
 8006450:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006454:	fa1e f381 	uxtah	r3, lr, r1
 8006458:	141a      	asrs	r2, r3, #16
 800645a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800645e:	b29b      	uxth	r3, r3
 8006460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006464:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006468:	f845 3b04 	str.w	r3, [r5], #4
 800646c:	e7e9      	b.n	8006442 <__mdiff+0x8a>
 800646e:	3e01      	subs	r6, #1
 8006470:	e7e9      	b.n	8006446 <__mdiff+0x8e>

08006472 <__d2b>:
 8006472:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006476:	460e      	mov	r6, r1
 8006478:	2101      	movs	r1, #1
 800647a:	ec59 8b10 	vmov	r8, r9, d0
 800647e:	4615      	mov	r5, r2
 8006480:	f7ff fd6b 	bl	8005f5a <_Balloc>
 8006484:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006488:	4607      	mov	r7, r0
 800648a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800648e:	bb34      	cbnz	r4, 80064de <__d2b+0x6c>
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	f1b8 0300 	subs.w	r3, r8, #0
 8006496:	d027      	beq.n	80064e8 <__d2b+0x76>
 8006498:	a802      	add	r0, sp, #8
 800649a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800649e:	f7ff fe01 	bl	80060a4 <__lo0bits>
 80064a2:	9900      	ldr	r1, [sp, #0]
 80064a4:	b1f0      	cbz	r0, 80064e4 <__d2b+0x72>
 80064a6:	9a01      	ldr	r2, [sp, #4]
 80064a8:	f1c0 0320 	rsb	r3, r0, #32
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	430b      	orrs	r3, r1
 80064b2:	40c2      	lsrs	r2, r0
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	9201      	str	r2, [sp, #4]
 80064b8:	9b01      	ldr	r3, [sp, #4]
 80064ba:	61bb      	str	r3, [r7, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf14      	ite	ne
 80064c0:	2102      	movne	r1, #2
 80064c2:	2101      	moveq	r1, #1
 80064c4:	6139      	str	r1, [r7, #16]
 80064c6:	b1c4      	cbz	r4, 80064fa <__d2b+0x88>
 80064c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80064cc:	4404      	add	r4, r0
 80064ce:	6034      	str	r4, [r6, #0]
 80064d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80064d4:	6028      	str	r0, [r5, #0]
 80064d6:	4638      	mov	r0, r7
 80064d8:	b003      	add	sp, #12
 80064da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064e2:	e7d5      	b.n	8006490 <__d2b+0x1e>
 80064e4:	6179      	str	r1, [r7, #20]
 80064e6:	e7e7      	b.n	80064b8 <__d2b+0x46>
 80064e8:	a801      	add	r0, sp, #4
 80064ea:	f7ff fddb 	bl	80060a4 <__lo0bits>
 80064ee:	9b01      	ldr	r3, [sp, #4]
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	2101      	movs	r1, #1
 80064f4:	6139      	str	r1, [r7, #16]
 80064f6:	3020      	adds	r0, #32
 80064f8:	e7e5      	b.n	80064c6 <__d2b+0x54>
 80064fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80064fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006502:	6030      	str	r0, [r6, #0]
 8006504:	6918      	ldr	r0, [r3, #16]
 8006506:	f7ff fdae 	bl	8006066 <__hi0bits>
 800650a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800650e:	e7e1      	b.n	80064d4 <__d2b+0x62>

08006510 <_calloc_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	fb02 f401 	mul.w	r4, r2, r1
 8006516:	4621      	mov	r1, r4
 8006518:	f000 f856 	bl	80065c8 <_malloc_r>
 800651c:	4605      	mov	r5, r0
 800651e:	b118      	cbz	r0, 8006528 <_calloc_r+0x18>
 8006520:	4622      	mov	r2, r4
 8006522:	2100      	movs	r1, #0
 8006524:	f7fe fa2e 	bl	8004984 <memset>
 8006528:	4628      	mov	r0, r5
 800652a:	bd38      	pop	{r3, r4, r5, pc}

0800652c <_free_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4605      	mov	r5, r0
 8006530:	2900      	cmp	r1, #0
 8006532:	d045      	beq.n	80065c0 <_free_r+0x94>
 8006534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006538:	1f0c      	subs	r4, r1, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	bfb8      	it	lt
 800653e:	18e4      	addlt	r4, r4, r3
 8006540:	f000 fa29 	bl	8006996 <__malloc_lock>
 8006544:	4a1f      	ldr	r2, [pc, #124]	; (80065c4 <_free_r+0x98>)
 8006546:	6813      	ldr	r3, [r2, #0]
 8006548:	4610      	mov	r0, r2
 800654a:	b933      	cbnz	r3, 800655a <_free_r+0x2e>
 800654c:	6063      	str	r3, [r4, #4]
 800654e:	6014      	str	r4, [r2, #0]
 8006550:	4628      	mov	r0, r5
 8006552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006556:	f000 ba1f 	b.w	8006998 <__malloc_unlock>
 800655a:	42a3      	cmp	r3, r4
 800655c:	d90c      	bls.n	8006578 <_free_r+0x4c>
 800655e:	6821      	ldr	r1, [r4, #0]
 8006560:	1862      	adds	r2, r4, r1
 8006562:	4293      	cmp	r3, r2
 8006564:	bf04      	itt	eq
 8006566:	681a      	ldreq	r2, [r3, #0]
 8006568:	685b      	ldreq	r3, [r3, #4]
 800656a:	6063      	str	r3, [r4, #4]
 800656c:	bf04      	itt	eq
 800656e:	1852      	addeq	r2, r2, r1
 8006570:	6022      	streq	r2, [r4, #0]
 8006572:	6004      	str	r4, [r0, #0]
 8006574:	e7ec      	b.n	8006550 <_free_r+0x24>
 8006576:	4613      	mov	r3, r2
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	b10a      	cbz	r2, 8006580 <_free_r+0x54>
 800657c:	42a2      	cmp	r2, r4
 800657e:	d9fa      	bls.n	8006576 <_free_r+0x4a>
 8006580:	6819      	ldr	r1, [r3, #0]
 8006582:	1858      	adds	r0, r3, r1
 8006584:	42a0      	cmp	r0, r4
 8006586:	d10b      	bne.n	80065a0 <_free_r+0x74>
 8006588:	6820      	ldr	r0, [r4, #0]
 800658a:	4401      	add	r1, r0
 800658c:	1858      	adds	r0, r3, r1
 800658e:	4282      	cmp	r2, r0
 8006590:	6019      	str	r1, [r3, #0]
 8006592:	d1dd      	bne.n	8006550 <_free_r+0x24>
 8006594:	6810      	ldr	r0, [r2, #0]
 8006596:	6852      	ldr	r2, [r2, #4]
 8006598:	605a      	str	r2, [r3, #4]
 800659a:	4401      	add	r1, r0
 800659c:	6019      	str	r1, [r3, #0]
 800659e:	e7d7      	b.n	8006550 <_free_r+0x24>
 80065a0:	d902      	bls.n	80065a8 <_free_r+0x7c>
 80065a2:	230c      	movs	r3, #12
 80065a4:	602b      	str	r3, [r5, #0]
 80065a6:	e7d3      	b.n	8006550 <_free_r+0x24>
 80065a8:	6820      	ldr	r0, [r4, #0]
 80065aa:	1821      	adds	r1, r4, r0
 80065ac:	428a      	cmp	r2, r1
 80065ae:	bf04      	itt	eq
 80065b0:	6811      	ldreq	r1, [r2, #0]
 80065b2:	6852      	ldreq	r2, [r2, #4]
 80065b4:	6062      	str	r2, [r4, #4]
 80065b6:	bf04      	itt	eq
 80065b8:	1809      	addeq	r1, r1, r0
 80065ba:	6021      	streq	r1, [r4, #0]
 80065bc:	605c      	str	r4, [r3, #4]
 80065be:	e7c7      	b.n	8006550 <_free_r+0x24>
 80065c0:	bd38      	pop	{r3, r4, r5, pc}
 80065c2:	bf00      	nop
 80065c4:	200001fc 	.word	0x200001fc

080065c8 <_malloc_r>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	1ccd      	adds	r5, r1, #3
 80065cc:	f025 0503 	bic.w	r5, r5, #3
 80065d0:	3508      	adds	r5, #8
 80065d2:	2d0c      	cmp	r5, #12
 80065d4:	bf38      	it	cc
 80065d6:	250c      	movcc	r5, #12
 80065d8:	2d00      	cmp	r5, #0
 80065da:	4606      	mov	r6, r0
 80065dc:	db01      	blt.n	80065e2 <_malloc_r+0x1a>
 80065de:	42a9      	cmp	r1, r5
 80065e0:	d903      	bls.n	80065ea <_malloc_r+0x22>
 80065e2:	230c      	movs	r3, #12
 80065e4:	6033      	str	r3, [r6, #0]
 80065e6:	2000      	movs	r0, #0
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
 80065ea:	f000 f9d4 	bl	8006996 <__malloc_lock>
 80065ee:	4a21      	ldr	r2, [pc, #132]	; (8006674 <_malloc_r+0xac>)
 80065f0:	6814      	ldr	r4, [r2, #0]
 80065f2:	4621      	mov	r1, r4
 80065f4:	b991      	cbnz	r1, 800661c <_malloc_r+0x54>
 80065f6:	4c20      	ldr	r4, [pc, #128]	; (8006678 <_malloc_r+0xb0>)
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	b91b      	cbnz	r3, 8006604 <_malloc_r+0x3c>
 80065fc:	4630      	mov	r0, r6
 80065fe:	f000 f98f 	bl	8006920 <_sbrk_r>
 8006602:	6020      	str	r0, [r4, #0]
 8006604:	4629      	mov	r1, r5
 8006606:	4630      	mov	r0, r6
 8006608:	f000 f98a 	bl	8006920 <_sbrk_r>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d124      	bne.n	800665a <_malloc_r+0x92>
 8006610:	230c      	movs	r3, #12
 8006612:	6033      	str	r3, [r6, #0]
 8006614:	4630      	mov	r0, r6
 8006616:	f000 f9bf 	bl	8006998 <__malloc_unlock>
 800661a:	e7e4      	b.n	80065e6 <_malloc_r+0x1e>
 800661c:	680b      	ldr	r3, [r1, #0]
 800661e:	1b5b      	subs	r3, r3, r5
 8006620:	d418      	bmi.n	8006654 <_malloc_r+0x8c>
 8006622:	2b0b      	cmp	r3, #11
 8006624:	d90f      	bls.n	8006646 <_malloc_r+0x7e>
 8006626:	600b      	str	r3, [r1, #0]
 8006628:	50cd      	str	r5, [r1, r3]
 800662a:	18cc      	adds	r4, r1, r3
 800662c:	4630      	mov	r0, r6
 800662e:	f000 f9b3 	bl	8006998 <__malloc_unlock>
 8006632:	f104 000b 	add.w	r0, r4, #11
 8006636:	1d23      	adds	r3, r4, #4
 8006638:	f020 0007 	bic.w	r0, r0, #7
 800663c:	1ac3      	subs	r3, r0, r3
 800663e:	d0d3      	beq.n	80065e8 <_malloc_r+0x20>
 8006640:	425a      	negs	r2, r3
 8006642:	50e2      	str	r2, [r4, r3]
 8006644:	e7d0      	b.n	80065e8 <_malloc_r+0x20>
 8006646:	428c      	cmp	r4, r1
 8006648:	684b      	ldr	r3, [r1, #4]
 800664a:	bf16      	itet	ne
 800664c:	6063      	strne	r3, [r4, #4]
 800664e:	6013      	streq	r3, [r2, #0]
 8006650:	460c      	movne	r4, r1
 8006652:	e7eb      	b.n	800662c <_malloc_r+0x64>
 8006654:	460c      	mov	r4, r1
 8006656:	6849      	ldr	r1, [r1, #4]
 8006658:	e7cc      	b.n	80065f4 <_malloc_r+0x2c>
 800665a:	1cc4      	adds	r4, r0, #3
 800665c:	f024 0403 	bic.w	r4, r4, #3
 8006660:	42a0      	cmp	r0, r4
 8006662:	d005      	beq.n	8006670 <_malloc_r+0xa8>
 8006664:	1a21      	subs	r1, r4, r0
 8006666:	4630      	mov	r0, r6
 8006668:	f000 f95a 	bl	8006920 <_sbrk_r>
 800666c:	3001      	adds	r0, #1
 800666e:	d0cf      	beq.n	8006610 <_malloc_r+0x48>
 8006670:	6025      	str	r5, [r4, #0]
 8006672:	e7db      	b.n	800662c <_malloc_r+0x64>
 8006674:	200001fc 	.word	0x200001fc
 8006678:	20000200 	.word	0x20000200

0800667c <__ssputs_r>:
 800667c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	688e      	ldr	r6, [r1, #8]
 8006682:	429e      	cmp	r6, r3
 8006684:	4682      	mov	sl, r0
 8006686:	460c      	mov	r4, r1
 8006688:	4690      	mov	r8, r2
 800668a:	4699      	mov	r9, r3
 800668c:	d837      	bhi.n	80066fe <__ssputs_r+0x82>
 800668e:	898a      	ldrh	r2, [r1, #12]
 8006690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006694:	d031      	beq.n	80066fa <__ssputs_r+0x7e>
 8006696:	6825      	ldr	r5, [r4, #0]
 8006698:	6909      	ldr	r1, [r1, #16]
 800669a:	1a6f      	subs	r7, r5, r1
 800669c:	6965      	ldr	r5, [r4, #20]
 800669e:	2302      	movs	r3, #2
 80066a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80066a8:	f109 0301 	add.w	r3, r9, #1
 80066ac:	443b      	add	r3, r7
 80066ae:	429d      	cmp	r5, r3
 80066b0:	bf38      	it	cc
 80066b2:	461d      	movcc	r5, r3
 80066b4:	0553      	lsls	r3, r2, #21
 80066b6:	d530      	bpl.n	800671a <__ssputs_r+0x9e>
 80066b8:	4629      	mov	r1, r5
 80066ba:	f7ff ff85 	bl	80065c8 <_malloc_r>
 80066be:	4606      	mov	r6, r0
 80066c0:	b950      	cbnz	r0, 80066d8 <__ssputs_r+0x5c>
 80066c2:	230c      	movs	r3, #12
 80066c4:	f8ca 3000 	str.w	r3, [sl]
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ce:	81a3      	strh	r3, [r4, #12]
 80066d0:	f04f 30ff 	mov.w	r0, #4294967295
 80066d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d8:	463a      	mov	r2, r7
 80066da:	6921      	ldr	r1, [r4, #16]
 80066dc:	f7ff fc32 	bl	8005f44 <memcpy>
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	6126      	str	r6, [r4, #16]
 80066ee:	6165      	str	r5, [r4, #20]
 80066f0:	443e      	add	r6, r7
 80066f2:	1bed      	subs	r5, r5, r7
 80066f4:	6026      	str	r6, [r4, #0]
 80066f6:	60a5      	str	r5, [r4, #8]
 80066f8:	464e      	mov	r6, r9
 80066fa:	454e      	cmp	r6, r9
 80066fc:	d900      	bls.n	8006700 <__ssputs_r+0x84>
 80066fe:	464e      	mov	r6, r9
 8006700:	4632      	mov	r2, r6
 8006702:	4641      	mov	r1, r8
 8006704:	6820      	ldr	r0, [r4, #0]
 8006706:	f000 f92d 	bl	8006964 <memmove>
 800670a:	68a3      	ldr	r3, [r4, #8]
 800670c:	1b9b      	subs	r3, r3, r6
 800670e:	60a3      	str	r3, [r4, #8]
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	441e      	add	r6, r3
 8006714:	6026      	str	r6, [r4, #0]
 8006716:	2000      	movs	r0, #0
 8006718:	e7dc      	b.n	80066d4 <__ssputs_r+0x58>
 800671a:	462a      	mov	r2, r5
 800671c:	f000 f93d 	bl	800699a <_realloc_r>
 8006720:	4606      	mov	r6, r0
 8006722:	2800      	cmp	r0, #0
 8006724:	d1e2      	bne.n	80066ec <__ssputs_r+0x70>
 8006726:	6921      	ldr	r1, [r4, #16]
 8006728:	4650      	mov	r0, sl
 800672a:	f7ff feff 	bl	800652c <_free_r>
 800672e:	e7c8      	b.n	80066c2 <__ssputs_r+0x46>

08006730 <_svfiprintf_r>:
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	461d      	mov	r5, r3
 8006736:	898b      	ldrh	r3, [r1, #12]
 8006738:	061f      	lsls	r7, r3, #24
 800673a:	b09d      	sub	sp, #116	; 0x74
 800673c:	4680      	mov	r8, r0
 800673e:	460c      	mov	r4, r1
 8006740:	4616      	mov	r6, r2
 8006742:	d50f      	bpl.n	8006764 <_svfiprintf_r+0x34>
 8006744:	690b      	ldr	r3, [r1, #16]
 8006746:	b96b      	cbnz	r3, 8006764 <_svfiprintf_r+0x34>
 8006748:	2140      	movs	r1, #64	; 0x40
 800674a:	f7ff ff3d 	bl	80065c8 <_malloc_r>
 800674e:	6020      	str	r0, [r4, #0]
 8006750:	6120      	str	r0, [r4, #16]
 8006752:	b928      	cbnz	r0, 8006760 <_svfiprintf_r+0x30>
 8006754:	230c      	movs	r3, #12
 8006756:	f8c8 3000 	str.w	r3, [r8]
 800675a:	f04f 30ff 	mov.w	r0, #4294967295
 800675e:	e0c8      	b.n	80068f2 <_svfiprintf_r+0x1c2>
 8006760:	2340      	movs	r3, #64	; 0x40
 8006762:	6163      	str	r3, [r4, #20]
 8006764:	2300      	movs	r3, #0
 8006766:	9309      	str	r3, [sp, #36]	; 0x24
 8006768:	2320      	movs	r3, #32
 800676a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800676e:	2330      	movs	r3, #48	; 0x30
 8006770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006774:	9503      	str	r5, [sp, #12]
 8006776:	f04f 0b01 	mov.w	fp, #1
 800677a:	4637      	mov	r7, r6
 800677c:	463d      	mov	r5, r7
 800677e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006782:	b10b      	cbz	r3, 8006788 <_svfiprintf_r+0x58>
 8006784:	2b25      	cmp	r3, #37	; 0x25
 8006786:	d13e      	bne.n	8006806 <_svfiprintf_r+0xd6>
 8006788:	ebb7 0a06 	subs.w	sl, r7, r6
 800678c:	d00b      	beq.n	80067a6 <_svfiprintf_r+0x76>
 800678e:	4653      	mov	r3, sl
 8006790:	4632      	mov	r2, r6
 8006792:	4621      	mov	r1, r4
 8006794:	4640      	mov	r0, r8
 8006796:	f7ff ff71 	bl	800667c <__ssputs_r>
 800679a:	3001      	adds	r0, #1
 800679c:	f000 80a4 	beq.w	80068e8 <_svfiprintf_r+0x1b8>
 80067a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a2:	4453      	add	r3, sl
 80067a4:	9309      	str	r3, [sp, #36]	; 0x24
 80067a6:	783b      	ldrb	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 809d 	beq.w	80068e8 <_svfiprintf_r+0x1b8>
 80067ae:	2300      	movs	r3, #0
 80067b0:	f04f 32ff 	mov.w	r2, #4294967295
 80067b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067b8:	9304      	str	r3, [sp, #16]
 80067ba:	9307      	str	r3, [sp, #28]
 80067bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067c0:	931a      	str	r3, [sp, #104]	; 0x68
 80067c2:	462f      	mov	r7, r5
 80067c4:	2205      	movs	r2, #5
 80067c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80067ca:	4850      	ldr	r0, [pc, #320]	; (800690c <_svfiprintf_r+0x1dc>)
 80067cc:	f7f9 fd08 	bl	80001e0 <memchr>
 80067d0:	9b04      	ldr	r3, [sp, #16]
 80067d2:	b9d0      	cbnz	r0, 800680a <_svfiprintf_r+0xda>
 80067d4:	06d9      	lsls	r1, r3, #27
 80067d6:	bf44      	itt	mi
 80067d8:	2220      	movmi	r2, #32
 80067da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067de:	071a      	lsls	r2, r3, #28
 80067e0:	bf44      	itt	mi
 80067e2:	222b      	movmi	r2, #43	; 0x2b
 80067e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067e8:	782a      	ldrb	r2, [r5, #0]
 80067ea:	2a2a      	cmp	r2, #42	; 0x2a
 80067ec:	d015      	beq.n	800681a <_svfiprintf_r+0xea>
 80067ee:	9a07      	ldr	r2, [sp, #28]
 80067f0:	462f      	mov	r7, r5
 80067f2:	2000      	movs	r0, #0
 80067f4:	250a      	movs	r5, #10
 80067f6:	4639      	mov	r1, r7
 80067f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067fc:	3b30      	subs	r3, #48	; 0x30
 80067fe:	2b09      	cmp	r3, #9
 8006800:	d94d      	bls.n	800689e <_svfiprintf_r+0x16e>
 8006802:	b1b8      	cbz	r0, 8006834 <_svfiprintf_r+0x104>
 8006804:	e00f      	b.n	8006826 <_svfiprintf_r+0xf6>
 8006806:	462f      	mov	r7, r5
 8006808:	e7b8      	b.n	800677c <_svfiprintf_r+0x4c>
 800680a:	4a40      	ldr	r2, [pc, #256]	; (800690c <_svfiprintf_r+0x1dc>)
 800680c:	1a80      	subs	r0, r0, r2
 800680e:	fa0b f000 	lsl.w	r0, fp, r0
 8006812:	4318      	orrs	r0, r3
 8006814:	9004      	str	r0, [sp, #16]
 8006816:	463d      	mov	r5, r7
 8006818:	e7d3      	b.n	80067c2 <_svfiprintf_r+0x92>
 800681a:	9a03      	ldr	r2, [sp, #12]
 800681c:	1d11      	adds	r1, r2, #4
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	9103      	str	r1, [sp, #12]
 8006822:	2a00      	cmp	r2, #0
 8006824:	db01      	blt.n	800682a <_svfiprintf_r+0xfa>
 8006826:	9207      	str	r2, [sp, #28]
 8006828:	e004      	b.n	8006834 <_svfiprintf_r+0x104>
 800682a:	4252      	negs	r2, r2
 800682c:	f043 0302 	orr.w	r3, r3, #2
 8006830:	9207      	str	r2, [sp, #28]
 8006832:	9304      	str	r3, [sp, #16]
 8006834:	783b      	ldrb	r3, [r7, #0]
 8006836:	2b2e      	cmp	r3, #46	; 0x2e
 8006838:	d10c      	bne.n	8006854 <_svfiprintf_r+0x124>
 800683a:	787b      	ldrb	r3, [r7, #1]
 800683c:	2b2a      	cmp	r3, #42	; 0x2a
 800683e:	d133      	bne.n	80068a8 <_svfiprintf_r+0x178>
 8006840:	9b03      	ldr	r3, [sp, #12]
 8006842:	1d1a      	adds	r2, r3, #4
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	9203      	str	r2, [sp, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	bfb8      	it	lt
 800684c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006850:	3702      	adds	r7, #2
 8006852:	9305      	str	r3, [sp, #20]
 8006854:	4d2e      	ldr	r5, [pc, #184]	; (8006910 <_svfiprintf_r+0x1e0>)
 8006856:	7839      	ldrb	r1, [r7, #0]
 8006858:	2203      	movs	r2, #3
 800685a:	4628      	mov	r0, r5
 800685c:	f7f9 fcc0 	bl	80001e0 <memchr>
 8006860:	b138      	cbz	r0, 8006872 <_svfiprintf_r+0x142>
 8006862:	2340      	movs	r3, #64	; 0x40
 8006864:	1b40      	subs	r0, r0, r5
 8006866:	fa03 f000 	lsl.w	r0, r3, r0
 800686a:	9b04      	ldr	r3, [sp, #16]
 800686c:	4303      	orrs	r3, r0
 800686e:	3701      	adds	r7, #1
 8006870:	9304      	str	r3, [sp, #16]
 8006872:	7839      	ldrb	r1, [r7, #0]
 8006874:	4827      	ldr	r0, [pc, #156]	; (8006914 <_svfiprintf_r+0x1e4>)
 8006876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800687a:	2206      	movs	r2, #6
 800687c:	1c7e      	adds	r6, r7, #1
 800687e:	f7f9 fcaf 	bl	80001e0 <memchr>
 8006882:	2800      	cmp	r0, #0
 8006884:	d038      	beq.n	80068f8 <_svfiprintf_r+0x1c8>
 8006886:	4b24      	ldr	r3, [pc, #144]	; (8006918 <_svfiprintf_r+0x1e8>)
 8006888:	bb13      	cbnz	r3, 80068d0 <_svfiprintf_r+0x1a0>
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	3307      	adds	r3, #7
 800688e:	f023 0307 	bic.w	r3, r3, #7
 8006892:	3308      	adds	r3, #8
 8006894:	9303      	str	r3, [sp, #12]
 8006896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006898:	444b      	add	r3, r9
 800689a:	9309      	str	r3, [sp, #36]	; 0x24
 800689c:	e76d      	b.n	800677a <_svfiprintf_r+0x4a>
 800689e:	fb05 3202 	mla	r2, r5, r2, r3
 80068a2:	2001      	movs	r0, #1
 80068a4:	460f      	mov	r7, r1
 80068a6:	e7a6      	b.n	80067f6 <_svfiprintf_r+0xc6>
 80068a8:	2300      	movs	r3, #0
 80068aa:	3701      	adds	r7, #1
 80068ac:	9305      	str	r3, [sp, #20]
 80068ae:	4619      	mov	r1, r3
 80068b0:	250a      	movs	r5, #10
 80068b2:	4638      	mov	r0, r7
 80068b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068b8:	3a30      	subs	r2, #48	; 0x30
 80068ba:	2a09      	cmp	r2, #9
 80068bc:	d903      	bls.n	80068c6 <_svfiprintf_r+0x196>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0c8      	beq.n	8006854 <_svfiprintf_r+0x124>
 80068c2:	9105      	str	r1, [sp, #20]
 80068c4:	e7c6      	b.n	8006854 <_svfiprintf_r+0x124>
 80068c6:	fb05 2101 	mla	r1, r5, r1, r2
 80068ca:	2301      	movs	r3, #1
 80068cc:	4607      	mov	r7, r0
 80068ce:	e7f0      	b.n	80068b2 <_svfiprintf_r+0x182>
 80068d0:	ab03      	add	r3, sp, #12
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	4622      	mov	r2, r4
 80068d6:	4b11      	ldr	r3, [pc, #68]	; (800691c <_svfiprintf_r+0x1ec>)
 80068d8:	a904      	add	r1, sp, #16
 80068da:	4640      	mov	r0, r8
 80068dc:	f7fe f8ee 	bl	8004abc <_printf_float>
 80068e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80068e4:	4681      	mov	r9, r0
 80068e6:	d1d6      	bne.n	8006896 <_svfiprintf_r+0x166>
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	065b      	lsls	r3, r3, #25
 80068ec:	f53f af35 	bmi.w	800675a <_svfiprintf_r+0x2a>
 80068f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068f2:	b01d      	add	sp, #116	; 0x74
 80068f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f8:	ab03      	add	r3, sp, #12
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	4622      	mov	r2, r4
 80068fe:	4b07      	ldr	r3, [pc, #28]	; (800691c <_svfiprintf_r+0x1ec>)
 8006900:	a904      	add	r1, sp, #16
 8006902:	4640      	mov	r0, r8
 8006904:	f7fe fb90 	bl	8005028 <_printf_i>
 8006908:	e7ea      	b.n	80068e0 <_svfiprintf_r+0x1b0>
 800690a:	bf00      	nop
 800690c:	08006bec 	.word	0x08006bec
 8006910:	08006bf2 	.word	0x08006bf2
 8006914:	08006bf6 	.word	0x08006bf6
 8006918:	08004abd 	.word	0x08004abd
 800691c:	0800667d 	.word	0x0800667d

08006920 <_sbrk_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4c06      	ldr	r4, [pc, #24]	; (800693c <_sbrk_r+0x1c>)
 8006924:	2300      	movs	r3, #0
 8006926:	4605      	mov	r5, r0
 8006928:	4608      	mov	r0, r1
 800692a:	6023      	str	r3, [r4, #0]
 800692c:	f7fa fee8 	bl	8001700 <_sbrk>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d102      	bne.n	800693a <_sbrk_r+0x1a>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	b103      	cbz	r3, 800693a <_sbrk_r+0x1a>
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	200002fc 	.word	0x200002fc

08006940 <__ascii_mbtowc>:
 8006940:	b082      	sub	sp, #8
 8006942:	b901      	cbnz	r1, 8006946 <__ascii_mbtowc+0x6>
 8006944:	a901      	add	r1, sp, #4
 8006946:	b142      	cbz	r2, 800695a <__ascii_mbtowc+0x1a>
 8006948:	b14b      	cbz	r3, 800695e <__ascii_mbtowc+0x1e>
 800694a:	7813      	ldrb	r3, [r2, #0]
 800694c:	600b      	str	r3, [r1, #0]
 800694e:	7812      	ldrb	r2, [r2, #0]
 8006950:	1c10      	adds	r0, r2, #0
 8006952:	bf18      	it	ne
 8006954:	2001      	movne	r0, #1
 8006956:	b002      	add	sp, #8
 8006958:	4770      	bx	lr
 800695a:	4610      	mov	r0, r2
 800695c:	e7fb      	b.n	8006956 <__ascii_mbtowc+0x16>
 800695e:	f06f 0001 	mvn.w	r0, #1
 8006962:	e7f8      	b.n	8006956 <__ascii_mbtowc+0x16>

08006964 <memmove>:
 8006964:	4288      	cmp	r0, r1
 8006966:	b510      	push	{r4, lr}
 8006968:	eb01 0302 	add.w	r3, r1, r2
 800696c:	d807      	bhi.n	800697e <memmove+0x1a>
 800696e:	1e42      	subs	r2, r0, #1
 8006970:	4299      	cmp	r1, r3
 8006972:	d00a      	beq.n	800698a <memmove+0x26>
 8006974:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006978:	f802 4f01 	strb.w	r4, [r2, #1]!
 800697c:	e7f8      	b.n	8006970 <memmove+0xc>
 800697e:	4283      	cmp	r3, r0
 8006980:	d9f5      	bls.n	800696e <memmove+0xa>
 8006982:	1881      	adds	r1, r0, r2
 8006984:	1ad2      	subs	r2, r2, r3
 8006986:	42d3      	cmn	r3, r2
 8006988:	d100      	bne.n	800698c <memmove+0x28>
 800698a:	bd10      	pop	{r4, pc}
 800698c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006990:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006994:	e7f7      	b.n	8006986 <memmove+0x22>

08006996 <__malloc_lock>:
 8006996:	4770      	bx	lr

08006998 <__malloc_unlock>:
 8006998:	4770      	bx	lr

0800699a <_realloc_r>:
 800699a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699c:	4607      	mov	r7, r0
 800699e:	4614      	mov	r4, r2
 80069a0:	460e      	mov	r6, r1
 80069a2:	b921      	cbnz	r1, 80069ae <_realloc_r+0x14>
 80069a4:	4611      	mov	r1, r2
 80069a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80069aa:	f7ff be0d 	b.w	80065c8 <_malloc_r>
 80069ae:	b922      	cbnz	r2, 80069ba <_realloc_r+0x20>
 80069b0:	f7ff fdbc 	bl	800652c <_free_r>
 80069b4:	4625      	mov	r5, r4
 80069b6:	4628      	mov	r0, r5
 80069b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ba:	f000 f821 	bl	8006a00 <_malloc_usable_size_r>
 80069be:	42a0      	cmp	r0, r4
 80069c0:	d20f      	bcs.n	80069e2 <_realloc_r+0x48>
 80069c2:	4621      	mov	r1, r4
 80069c4:	4638      	mov	r0, r7
 80069c6:	f7ff fdff 	bl	80065c8 <_malloc_r>
 80069ca:	4605      	mov	r5, r0
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d0f2      	beq.n	80069b6 <_realloc_r+0x1c>
 80069d0:	4631      	mov	r1, r6
 80069d2:	4622      	mov	r2, r4
 80069d4:	f7ff fab6 	bl	8005f44 <memcpy>
 80069d8:	4631      	mov	r1, r6
 80069da:	4638      	mov	r0, r7
 80069dc:	f7ff fda6 	bl	800652c <_free_r>
 80069e0:	e7e9      	b.n	80069b6 <_realloc_r+0x1c>
 80069e2:	4635      	mov	r5, r6
 80069e4:	e7e7      	b.n	80069b6 <_realloc_r+0x1c>

080069e6 <__ascii_wctomb>:
 80069e6:	b149      	cbz	r1, 80069fc <__ascii_wctomb+0x16>
 80069e8:	2aff      	cmp	r2, #255	; 0xff
 80069ea:	bf85      	ittet	hi
 80069ec:	238a      	movhi	r3, #138	; 0x8a
 80069ee:	6003      	strhi	r3, [r0, #0]
 80069f0:	700a      	strbls	r2, [r1, #0]
 80069f2:	f04f 30ff 	movhi.w	r0, #4294967295
 80069f6:	bf98      	it	ls
 80069f8:	2001      	movls	r0, #1
 80069fa:	4770      	bx	lr
 80069fc:	4608      	mov	r0, r1
 80069fe:	4770      	bx	lr

08006a00 <_malloc_usable_size_r>:
 8006a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a04:	1f18      	subs	r0, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	bfbc      	itt	lt
 8006a0a:	580b      	ldrlt	r3, [r1, r0]
 8006a0c:	18c0      	addlt	r0, r0, r3
 8006a0e:	4770      	bx	lr

08006a10 <_init>:
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	bf00      	nop
 8006a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a16:	bc08      	pop	{r3}
 8006a18:	469e      	mov	lr, r3
 8006a1a:	4770      	bx	lr

08006a1c <_fini>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	bf00      	nop
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr
